
Embedded_final_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008338  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  080084c0  080084c0  000184c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008818  08008818  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008818  08008818  00018818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008820  08008820  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008820  08008820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008824  08008824  00018824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08008828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  200001fc  08008a24  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000095c  08008a24  0002095c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f84  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030da  00000000  00000000  0003a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001730  00000000  00000000  0003d290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001598  00000000  00000000  0003e9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028bdd  00000000  00000000  0003ff58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012099  00000000  00000000  00068b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f509d  00000000  00000000  0007abce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016fc6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a48  00000000  00000000  0016fce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001fc 	.word	0x200001fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080084a8 	.word	0x080084a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000200 	.word	0x20000200
 80001c4:	080084a8 	.word	0x080084a8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b096      	sub	sp, #88	; 0x58
 8000e04:	af00      	add	r7, sp, #0
int main(void)
 8000e06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e0a:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0c:	f001 fd62 	bl	80028d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 fb28 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f000 fd32 	bl	800187c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000e18:	f000 fbc8 	bl	80015ac <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000e1c:	f000 fbfe 	bl	800161c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000e20:	f000 fc3a 	bl	8001698 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000e24:	f000 fc5e 	bl	80016e4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000e28:	f000 fc9a 	bl	8001760 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e2c:	f000 fcc8 	bl	80017c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e30:	f000 fcf6 	bl	8001820 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  BSP_TSENSOR_Init();
 8000e34:	f001 fb92 	bl	800255c <BSP_TSENSOR_Init>
    BSP_HSENSOR_Init();
 8000e38:	f001 fb62 	bl	8002500 <BSP_HSENSOR_Init>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    int powerChanged = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

    int cupSize1ButtonChanged = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
    int cupSize2ButtonChanged = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
    int cupSize3ButtonChanged = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
    int cupSize4ButtonChanged = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]

    int cupSizeNumber = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	643b      	str	r3, [r7, #64]	; 0x40

    int powerPressed = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	657b      	str	r3, [r7, #84]	; 0x54

    int cupSize1Pressed = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	653b      	str	r3, [r7, #80]	; 0x50
    int cupSize2Pressed = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    int cupSize3Pressed = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	64bb      	str	r3, [r7, #72]	; 0x48
    int cupSize4Pressed = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44

 	 GPIO_PinState Cup_Size_Button_1 = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 	 GPIO_PinState Cup_Size_Button_2 = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 	 GPIO_PinState Cup_Size_Button_3 = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 	 GPIO_PinState Cup_Size_Button_4 = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    int Strong_Button = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	63bb      	str	r3, [r7, #56]	; 0x38

    /*-------------------------------TRANSMIT UART1 -----------------------------*/
      char *msg = "On:";
 8000e84:	4bae      	ldr	r3, [pc, #696]	; (8001140 <main+0x340>)
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
     char *msg4 = "Off:";
 8000e88:	4bae      	ldr	r3, [pc, #696]	; (8001144 <main+0x344>)
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
   	  int index = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
         int len = 5;
 8000e90:	2305      	movs	r3, #5
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
   	  int iterations = 10;
 8000e94:	230a      	movs	r3, #10
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24

     /* Infinite loop */

     /* USER CODE BEGIN WHILE */

     int uart = 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]


    while (1)
      {

  	  uint32_t button = BSP_PB_GetState(BUTTON_USER);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f001 f9c9 	bl	8002234 <BSP_PB_GetState>
 8000ea2:	61f8      	str	r0, [r7, #28]
  	  Cup_Size_Button_1 = HAL_GPIO_ReadPin(ARD_D0_GPIO_Port, ARD_D0_Pin);
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f002 fa63 	bl	8003374 <HAL_GPIO_ReadPin>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  	  Cup_Size_Button_2 = HAL_GPIO_ReadPin(ARD_D1_GPIO_Port, ARD_D1_Pin);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f002 fa5b 	bl	8003374 <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  	  Cup_Size_Button_3 = HAL_GPIO_ReadPin(ARD_D2_GPIO_Port, ARD_D2_Pin);
 8000ec4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec8:	489f      	ldr	r0, [pc, #636]	; (8001148 <main+0x348>)
 8000eca:	f002 fa53 	bl	8003374 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  	  Cup_Size_Button_4 = HAL_GPIO_ReadPin(ARD_D3_GPIO_Port, ARD_D3_Pin);
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	489d      	ldr	r0, [pc, #628]	; (800114c <main+0x34c>)
 8000ed8:	f002 fa4c 	bl	8003374 <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c


  	  //uint32_t Strong_Button = BSP_PB_GetState(Strong_Brew_Button);

  	  // --- Power Press --- //
  	  if (button == 1) {
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d101      	bne.n	8000eec <main+0xec>
  		 powerPressed = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	657b      	str	r3, [r7, #84]	; 0x54
  	  }

  	  if (button == 0 && powerPressed == 0) {
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d11d      	bne.n	8000f2e <main+0x12e>
 8000ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d11a      	bne.n	8000f2e <main+0x12e>
  		  powerPressed = 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	657b      	str	r3, [r7, #84]	; 0x54
  		 if (powerChanged == 0) {
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d111      	bne.n	8000f26 <main+0x126>
  			 powerChanged = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
  			 printUart("Power ON");
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	469c      	mov	ip, r3
 8000f0a:	4891      	ldr	r0, [pc, #580]	; (8001150 <main+0x350>)
 8000f0c:	f000 f926 	bl	800115c <printUart.10203>
  			 HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000f10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f14:	488d      	ldr	r0, [pc, #564]	; (800114c <main+0x34c>)
 8000f16:	f002 fa5d 	bl	80033d4 <HAL_GPIO_TogglePin>

  			 printUart("Select Cup Size: 1, 2, 3, 4");
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	469c      	mov	ip, r3
 8000f1e:	488d      	ldr	r0, [pc, #564]	; (8001154 <main+0x354>)
 8000f20:	f000 f91c 	bl	800115c <printUart.10203>
 8000f24:	e003      	b.n	8000f2e <main+0x12e>
  		 } else {
  			 powerOff();
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	469c      	mov	ip, r3
 8000f2a:	f000 f943 	bl	80011b4 <powerOff.10210>
  		 }
  	  }
  	  // --- Power Press --- //

  	  // --- Cup Size 1 Button --- //
  	  if (Cup_Size_Button_1 == GPIO_PIN_RESET) {
 8000f2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <main+0x13a>
  		 cupSize1Pressed = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	653b      	str	r3, [r7, #80]	; 0x50
  	  }

  	  if (Cup_Size_Button_1 == GPIO_PIN_SET && cupSize1Pressed == 0) {
 8000f3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d109      	bne.n	8000f56 <main+0x156>
 8000f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d106      	bne.n	8000f56 <main+0x156>
  		  cupSize1Pressed = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	653b      	str	r3, [r7, #80]	; 0x50
  		 if (cupSize1ButtonChanged == 0) {
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <main+0x156>
  			 cupSize1ButtonChanged = 1;
 8000f52:	2301      	movs	r3, #1
 8000f54:	613b      	str	r3, [r7, #16]
  		 }
  	  }
  	  // --- Cup Size 1 Button --- //

  	  // --- Cup Size 2 Button --- //
  	  if (Cup_Size_Button_2 == GPIO_PIN_RESET) {
 8000f56:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <main+0x162>
  		 cupSize2Pressed = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	64fb      	str	r3, [r7, #76]	; 0x4c
  	  }

  	  if (Cup_Size_Button_2 == GPIO_PIN_SET && cupSize2Pressed == 0) {
 8000f62:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d109      	bne.n	8000f7e <main+0x17e>
 8000f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d106      	bne.n	8000f7e <main+0x17e>
  		  cupSize2Pressed = 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  		 if (cupSize2ButtonChanged == 0) {
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <main+0x17e>
  			 cupSize2ButtonChanged = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
  		 }
  	  }
  	  // --- Cup Size 2 Button --- //

  	  // --- Cup Size 3 Button --- //
  	  if (Cup_Size_Button_3 == GPIO_PIN_RESET) {
 8000f7e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <main+0x18a>
  		 cupSize3Pressed = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	64bb      	str	r3, [r7, #72]	; 0x48
  	  }

  	  if (Cup_Size_Button_3 == GPIO_PIN_SET && cupSize3Pressed == 0) {
 8000f8a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d109      	bne.n	8000fa6 <main+0x1a6>
 8000f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d106      	bne.n	8000fa6 <main+0x1a6>
  		  cupSize3Pressed = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  		 if (cupSize3ButtonChanged == 0) {
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <main+0x1a6>
  			 cupSize3ButtonChanged = 1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
  		 }
  	  }
  	  // --- Cup Size 3 Button --- //

  	  // --- Cup Size 4 Button --- //
  	  if (Cup_Size_Button_4 == GPIO_PIN_RESET) {
 8000fa6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <main+0x1b2>
  		 cupSize4Pressed = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	647b      	str	r3, [r7, #68]	; 0x44
  	  }

  	  if (Cup_Size_Button_4 == GPIO_PIN_SET && cupSize4Pressed == 0) {
 8000fb2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d109      	bne.n	8000fce <main+0x1ce>
 8000fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d106      	bne.n	8000fce <main+0x1ce>
  		  cupSize4Pressed = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  		 if (cupSize4ButtonChanged == 0) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <main+0x1ce>
  			 cupSize4ButtonChanged = 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
  		 }
  	  }
  	  // --- Cup Size 4 Button --- //

  	  if (powerChanged == 1) {
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	f47f af63 	bne.w	8000e9c <main+0x9c>
  		 }
  		 else
  		 {
  		 */

  		  if(cupSize1ButtonChanged == 1)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d129      	bne.n	8001030 <main+0x230>
  		  {
  			  HAL_GPIO_WritePin(ARD_D5_GPIO_Port, ARD_D5_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2110      	movs	r1, #16
 8000fe0:	485a      	ldr	r0, [pc, #360]	; (800114c <main+0x34c>)
 8000fe2:	f002 f9df 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2104      	movs	r1, #4
 8000fea:	4858      	ldr	r0, [pc, #352]	; (800114c <main+0x34c>)
 8000fec:	f002 f9da 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffa:	f002 f9d3 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2104      	movs	r1, #4
 8001002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001006:	f002 f9cd 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D14_GPIO_Port, ARD_D14_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001010:	484e      	ldr	r0, [pc, #312]	; (800114c <main+0x34c>)
 8001012:	f002 f9c7 	bl	80033a4 <HAL_GPIO_WritePin>

  			  cupSize2ButtonChanged == 0;
  			  cupSize3ButtonChanged == 0;
  			  cupSize4ButtonChanged == 0;

  			HAL_GPIO_TogglePin(ARD_A5_GPIO_Port, ARD_D5_Pin);//Led Auto_Off_LED_Pin
 8001016:	2110      	movs	r1, #16
 8001018:	484f      	ldr	r0, [pc, #316]	; (8001158 <main+0x358>)
 800101a:	f002 f9db 	bl	80033d4 <HAL_GPIO_TogglePin>

  		  	  processCup1();
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	469c      	mov	ip, r3
 8001022:	f000 f8ef 	bl	8001204 <processCup1.10212>

  		  	powerOff();
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	469c      	mov	ip, r3
 800102a:	f000 f8c3 	bl	80011b4 <powerOff.10210>
 800102e:	e735      	b.n	8000e9c <main+0x9c>
  		  }
  		  else if(cupSize2ButtonChanged == 1)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d129      	bne.n	800108a <main+0x28a>
  		  {
  			  HAL_GPIO_WritePin(ARD_D5_GPIO_Port, ARD_D5_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2110      	movs	r1, #16
 800103a:	4844      	ldr	r0, [pc, #272]	; (800114c <main+0x34c>)
 800103c:	f002 f9b2 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2104      	movs	r1, #4
 8001044:	4841      	ldr	r0, [pc, #260]	; (800114c <main+0x34c>)
 8001046:	f002 f9ad 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001054:	f002 f9a6 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2104      	movs	r1, #4
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001060:	f002 f9a0 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D14_GPIO_Port, ARD_D14_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	4838      	ldr	r0, [pc, #224]	; (800114c <main+0x34c>)
 800106c:	f002 f99a 	bl	80033a4 <HAL_GPIO_WritePin>

  			  cupSize1ButtonChanged == 0;
  			  cupSize3ButtonChanged == 0;
  			  cupSize4ButtonChanged == 0;

  			HAL_GPIO_TogglePin(ARD_A5_GPIO_Port, ARD_D5_Pin);//Led Auto_Off_LED_Pin
 8001070:	2110      	movs	r1, #16
 8001072:	4839      	ldr	r0, [pc, #228]	; (8001158 <main+0x358>)
 8001074:	f002 f9ae 	bl	80033d4 <HAL_GPIO_TogglePin>

  			  processCup2();
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	469c      	mov	ip, r3
 800107c:	f000 f90e 	bl	800129c <processCup2.10214>

  			powerOff();
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	469c      	mov	ip, r3
 8001084:	f000 f896 	bl	80011b4 <powerOff.10210>
 8001088:	e708      	b.n	8000e9c <main+0x9c>
  		  }
  		  else if(cupSize3ButtonChanged == 11)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b0b      	cmp	r3, #11
 800108e:	d129      	bne.n	80010e4 <main+0x2e4>
  		  {
  			  HAL_GPIO_WritePin(ARD_D5_GPIO_Port, ARD_D5_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2110      	movs	r1, #16
 8001094:	482d      	ldr	r0, [pc, #180]	; (800114c <main+0x34c>)
 8001096:	f002 f985 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2104      	movs	r1, #4
 800109e:	482b      	ldr	r0, [pc, #172]	; (800114c <main+0x34c>)
 80010a0:	f002 f980 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f002 f979 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2104      	movs	r1, #4
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ba:	f002 f973 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D14_GPIO_Port, ARD_D14_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c4:	4821      	ldr	r0, [pc, #132]	; (800114c <main+0x34c>)
 80010c6:	f002 f96d 	bl	80033a4 <HAL_GPIO_WritePin>

  			  cupSize2ButtonChanged == 0;
  			  cupSize1ButtonChanged == 0;
  			  cupSize4ButtonChanged == 0;

  			HAL_GPIO_TogglePin(ARD_A5_GPIO_Port, ARD_D5_Pin);//Led Auto_Off_LED_Pin
 80010ca:	2110      	movs	r1, #16
 80010cc:	4822      	ldr	r0, [pc, #136]	; (8001158 <main+0x358>)
 80010ce:	f002 f981 	bl	80033d4 <HAL_GPIO_TogglePin>

  			  processCup3();
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	469c      	mov	ip, r3
 80010d6:	f000 f92d 	bl	8001334 <processCup3.10216>

  			powerOff();
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	469c      	mov	ip, r3
 80010de:	f000 f869 	bl	80011b4 <powerOff.10210>
 80010e2:	e6db      	b.n	8000e9c <main+0x9c>
  		  }
  		  else if(cupSize4ButtonChanged == 1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	f47f aed8 	bne.w	8000e9c <main+0x9c>
  		  {
  			  HAL_GPIO_WritePin(ARD_D5_GPIO_Port, ARD_D5_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2110      	movs	r1, #16
 80010f0:	4816      	ldr	r0, [pc, #88]	; (800114c <main+0x34c>)
 80010f2:	f002 f957 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2104      	movs	r1, #4
 80010fa:	4814      	ldr	r0, [pc, #80]	; (800114c <main+0x34c>)
 80010fc:	f002 f952 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f002 f94b 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	2104      	movs	r1, #4
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f002 f945 	bl	80033a4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(ARD_D14_GPIO_Port, ARD_D14_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001120:	480a      	ldr	r0, [pc, #40]	; (800114c <main+0x34c>)
 8001122:	f002 f93f 	bl	80033a4 <HAL_GPIO_WritePin>

  			  cupSize2ButtonChanged == 0;
  			  cupSize3ButtonChanged == 0;
  			  cupSize1ButtonChanged == 0;

  			HAL_GPIO_TogglePin(ARD_A5_GPIO_Port, ARD_D5_Pin);//Led Auto_Off_LED_Pin
 8001126:	2110      	movs	r1, #16
 8001128:	480b      	ldr	r0, [pc, #44]	; (8001158 <main+0x358>)
 800112a:	f002 f953 	bl	80033d4 <HAL_GPIO_TogglePin>

  			  processCup4();
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	469c      	mov	ip, r3
 8001132:	f000 f94b 	bl	80013cc <processCup4.10218>

  			powerOff();
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	469c      	mov	ip, r3
 800113a:	f000 f83b 	bl	80011b4 <powerOff.10210>
      {
 800113e:	e6ad      	b.n	8000e9c <main+0x9c>
 8001140:	080084c0 	.word	0x080084c0
 8001144:	080084c4 	.word	0x080084c4
 8001148:	48000c00 	.word	0x48000c00
 800114c:	48000400 	.word	0x48000400
 8001150:	080084cc 	.word	0x080084cc
 8001154:	080084d8 	.word	0x080084d8
 8001158:	48000800 	.word	0x48000800

0800115c <printUart.10203>:
     void printUart(char *msg) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	f8c7 c000 	str.w	ip, [r7]
  	   for (int i = 0; i < strlen(msg); i++) {
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	e00d      	b.n	800118a <printUart.10203+0x2e>
  		   HAL_UART_Transmit(&huart1, &msg[i], 1, 0);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	18d1      	adds	r1, r2, r3
 8001174:	2300      	movs	r3, #0
 8001176:	2201      	movs	r2, #1
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <printUart.10203+0x50>)
 800117a:	f004 fd2c 	bl	8005bd6 <HAL_UART_Transmit>
  		   HAL_Delay(10);
 800117e:	200a      	movs	r0, #10
 8001180:	f001 fc1c 	bl	80029bc <HAL_Delay>
  	   for (int i = 0; i < strlen(msg); i++) {
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3301      	adds	r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff f81c 	bl	80001c8 <strlen>
 8001190:	4602      	mov	r2, r0
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8ea      	bhi.n	800116e <printUart.10203+0x12>
  	   HAL_UART_Transmit(&huart1, "\n", 1, 0);
 8001198:	2300      	movs	r3, #0
 800119a:	2201      	movs	r2, #1
 800119c:	4904      	ldr	r1, [pc, #16]	; (80011b0 <printUart.10203+0x54>)
 800119e:	4803      	ldr	r0, [pc, #12]	; (80011ac <printUart.10203+0x50>)
 80011a0:	f004 fd19 	bl	8005bd6 <HAL_UART_Transmit>
     }
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200007c4 	.word	0x200007c4
 80011b0:	080084f4 	.word	0x080084f4

080011b4 <powerOff.10210>:
  	void powerOff() {
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4664      	mov	r4, ip
 80011bc:	f8c7 c004 	str.w	ip, [r7, #4]
  		powerChanged = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	6123      	str	r3, [r4, #16]
  		cupSize1ButtonChanged = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60e3      	str	r3, [r4, #12]
  		cupSize2ButtonChanged = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60a3      	str	r3, [r4, #8]
  		cupSize3ButtonChanged = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	6063      	str	r3, [r4, #4]
  		cupSize4ButtonChanged = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	6023      	str	r3, [r4, #0]
  		printUart("Power OFF");
 80011d4:	46a4      	mov	ip, r4
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <powerOff.10210+0x44>)
 80011d8:	f7ff ffc0 	bl	800115c <printUart.10203>
  		printUart("Bye");
 80011dc:	46a4      	mov	ip, r4
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <powerOff.10210+0x48>)
 80011e0:	f7ff ffbc 	bl	800115c <printUart.10203>
  		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80011e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <powerOff.10210+0x4c>)
 80011ea:	f002 f8f3 	bl	80033d4 <HAL_GPIO_TogglePin>
  	}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	080084f8 	.word	0x080084f8
 80011fc:	08008504 	.word	0x08008504
 8001200:	48000400 	.word	0x48000400

08001204 <processCup1.10212>:
  	void processCup1() {
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4664      	mov	r4, ip
 800120c:	f8c7 c004 	str.w	ip, [r7, #4]
  		 printUart("Cup Size Selected: 1");
 8001210:	46a4      	mov	ip, r4
 8001212:	481d      	ldr	r0, [pc, #116]	; (8001288 <processCup1.10212+0x84>)
 8001214:	f7ff ffa2 	bl	800115c <printUart.10203>
  		 HAL_Delay(3000);
 8001218:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800121c:	f001 fbce 	bl	80029bc <HAL_Delay>
  		 printUart("Adding Water to Cup");
 8001220:	46a4      	mov	ip, r4
 8001222:	481a      	ldr	r0, [pc, #104]	; (800128c <processCup1.10212+0x88>)
 8001224:	f7ff ff9a 	bl	800115c <printUart.10203>
  		 HAL_GPIO_TogglePin(ARD_D8_GPIO_Port, ARD_D8_Pin);//Add_Water_LED_GPIO
 8001228:	2104      	movs	r1, #4
 800122a:	4819      	ldr	r0, [pc, #100]	; (8001290 <processCup1.10212+0x8c>)
 800122c:	f002 f8d2 	bl	80033d4 <HAL_GPIO_TogglePin>
  		 HAL_Delay(10000);
 8001230:	f242 7010 	movw	r0, #10000	; 0x2710
 8001234:	f001 fbc2 	bl	80029bc <HAL_Delay>
  		 if (BSP_HSENSOR_ReadHumidity() > 0) {
 8001238:	f001 f982 	bl	8002540 <BSP_HSENSOR_ReadHumidity>
 800123c:	eef0 7a40 	vmov.f32	s15, s0
 8001240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	dd03      	ble.n	8001252 <processCup1.10212+0x4e>
  			 printUart("Brewing Coffee");
 800124a:	46a4      	mov	ip, r4
 800124c:	4811      	ldr	r0, [pc, #68]	; (8001294 <processCup1.10212+0x90>)
 800124e:	f7ff ff85 	bl	800115c <printUart.10203>
  		 HAL_Delay(8000);
 8001252:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001256:	f001 fbb1 	bl	80029bc <HAL_Delay>
  		 if (BSP_TSENSOR_ReadTemp() > 20) {
 800125a:	f001 f99b 	bl	8002594 <BSP_TSENSOR_ReadTemp>
 800125e:	eeb0 7a40 	vmov.f32	s14, s0
 8001262:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	dd03      	ble.n	8001278 <processCup1.10212+0x74>
  			 printUart("Ready to drink, Enjoy!");
 8001270:	46a4      	mov	ip, r4
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <processCup1.10212+0x94>)
 8001274:	f7ff ff72 	bl	800115c <printUart.10203>
  		HAL_Delay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127c:	f001 fb9e 	bl	80029bc <HAL_Delay>
  	}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	08008508 	.word	0x08008508
 800128c:	08008520 	.word	0x08008520
 8001290:	48000400 	.word	0x48000400
 8001294:	08008534 	.word	0x08008534
 8001298:	08008544 	.word	0x08008544

0800129c <processCup2.10214>:
  	void processCup2() {
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4664      	mov	r4, ip
 80012a4:	f8c7 c004 	str.w	ip, [r7, #4]
  		 printUart("Cup Size Selected: 2");
 80012a8:	46a4      	mov	ip, r4
 80012aa:	481d      	ldr	r0, [pc, #116]	; (8001320 <processCup2.10214+0x84>)
 80012ac:	f7ff ff56 	bl	800115c <printUart.10203>
  		 HAL_Delay(3000);
 80012b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012b4:	f001 fb82 	bl	80029bc <HAL_Delay>
  		 printUart("Adding Water to Cup");
 80012b8:	46a4      	mov	ip, r4
 80012ba:	481a      	ldr	r0, [pc, #104]	; (8001324 <processCup2.10214+0x88>)
 80012bc:	f7ff ff4e 	bl	800115c <printUart.10203>
  		 HAL_GPIO_TogglePin(ARD_D8_GPIO_Port, ARD_D8_Pin);//Add_Water_LED_GPIO
 80012c0:	2104      	movs	r1, #4
 80012c2:	4819      	ldr	r0, [pc, #100]	; (8001328 <processCup2.10214+0x8c>)
 80012c4:	f002 f886 	bl	80033d4 <HAL_GPIO_TogglePin>
  		 HAL_Delay(8000);
 80012c8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80012cc:	f001 fb76 	bl	80029bc <HAL_Delay>
  		 if (BSP_HSENSOR_ReadHumidity() > 0) {
 80012d0:	f001 f936 	bl	8002540 <BSP_HSENSOR_ReadHumidity>
 80012d4:	eef0 7a40 	vmov.f32	s15, s0
 80012d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e0:	dd03      	ble.n	80012ea <processCup2.10214+0x4e>
  			 printUart("Brewing Coffee");
 80012e2:	46a4      	mov	ip, r4
 80012e4:	4811      	ldr	r0, [pc, #68]	; (800132c <processCup2.10214+0x90>)
 80012e6:	f7ff ff39 	bl	800115c <printUart.10203>
  		 HAL_Delay(6000);
 80012ea:	f241 7070 	movw	r0, #6000	; 0x1770
 80012ee:	f001 fb65 	bl	80029bc <HAL_Delay>
  		 if (BSP_TSENSOR_ReadTemp() > 20) {
 80012f2:	f001 f94f 	bl	8002594 <BSP_TSENSOR_ReadTemp>
 80012f6:	eeb0 7a40 	vmov.f32	s14, s0
 80012fa:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80012fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	dd03      	ble.n	8001310 <processCup2.10214+0x74>
  			 printUart("Ready to drink, Enjoy!");
 8001308:	46a4      	mov	ip, r4
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <processCup2.10214+0x94>)
 800130c:	f7ff ff26 	bl	800115c <printUart.10203>
  		HAL_Delay(1000);
 8001310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001314:	f001 fb52 	bl	80029bc <HAL_Delay>
  	}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	0800855c 	.word	0x0800855c
 8001324:	08008520 	.word	0x08008520
 8001328:	48000400 	.word	0x48000400
 800132c:	08008534 	.word	0x08008534
 8001330:	08008544 	.word	0x08008544

08001334 <processCup3.10216>:
  	void processCup3() {
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4664      	mov	r4, ip
 800133c:	f8c7 c004 	str.w	ip, [r7, #4]
  		 printUart("Cup Size Selected: 3");
 8001340:	46a4      	mov	ip, r4
 8001342:	481d      	ldr	r0, [pc, #116]	; (80013b8 <processCup3.10216+0x84>)
 8001344:	f7ff ff0a 	bl	800115c <printUart.10203>
  		 HAL_Delay(3000);
 8001348:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800134c:	f001 fb36 	bl	80029bc <HAL_Delay>
  		 printUart("Adding Water to Cup");
 8001350:	46a4      	mov	ip, r4
 8001352:	481a      	ldr	r0, [pc, #104]	; (80013bc <processCup3.10216+0x88>)
 8001354:	f7ff ff02 	bl	800115c <printUart.10203>
  		 HAL_GPIO_TogglePin(ARD_D8_GPIO_Port, ARD_D8_Pin);//Add_Water_LED_GPIO
 8001358:	2104      	movs	r1, #4
 800135a:	4819      	ldr	r0, [pc, #100]	; (80013c0 <processCup3.10216+0x8c>)
 800135c:	f002 f83a 	bl	80033d4 <HAL_GPIO_TogglePin>
  		 HAL_Delay(6000);
 8001360:	f241 7070 	movw	r0, #6000	; 0x1770
 8001364:	f001 fb2a 	bl	80029bc <HAL_Delay>
  		 if (BSP_HSENSOR_ReadHumidity() > 0) {
 8001368:	f001 f8ea 	bl	8002540 <BSP_HSENSOR_ReadHumidity>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
 8001370:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	dd03      	ble.n	8001382 <processCup3.10216+0x4e>
  			 printUart("Brewing Coffee");
 800137a:	46a4      	mov	ip, r4
 800137c:	4811      	ldr	r0, [pc, #68]	; (80013c4 <processCup3.10216+0x90>)
 800137e:	f7ff feed 	bl	800115c <printUart.10203>
  		 HAL_Delay(4000);
 8001382:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001386:	f001 fb19 	bl	80029bc <HAL_Delay>
  		 if (BSP_TSENSOR_ReadTemp() > 20) {
 800138a:	f001 f903 	bl	8002594 <BSP_TSENSOR_ReadTemp>
 800138e:	eeb0 7a40 	vmov.f32	s14, s0
 8001392:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	dd03      	ble.n	80013a8 <processCup3.10216+0x74>
  			 printUart("Ready to drink, Enjoy!");
 80013a0:	46a4      	mov	ip, r4
 80013a2:	4809      	ldr	r0, [pc, #36]	; (80013c8 <processCup3.10216+0x94>)
 80013a4:	f7ff feda 	bl	800115c <printUart.10203>
  		HAL_Delay(1000);
 80013a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ac:	f001 fb06 	bl	80029bc <HAL_Delay>
  	}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	08008574 	.word	0x08008574
 80013bc:	08008520 	.word	0x08008520
 80013c0:	48000400 	.word	0x48000400
 80013c4:	08008534 	.word	0x08008534
 80013c8:	08008544 	.word	0x08008544

080013cc <processCup4.10218>:
  	void processCup4() {
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4664      	mov	r4, ip
 80013d4:	f8c7 c004 	str.w	ip, [r7, #4]
  		 printUart("Cup Size Selected: 4");
 80013d8:	46a4      	mov	ip, r4
 80013da:	481d      	ldr	r0, [pc, #116]	; (8001450 <processCup4.10218+0x84>)
 80013dc:	f7ff febe 	bl	800115c <printUart.10203>
  		 HAL_Delay(3000);
 80013e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013e4:	f001 faea 	bl	80029bc <HAL_Delay>
  		 printUart("Adding Water to Cup");
 80013e8:	46a4      	mov	ip, r4
 80013ea:	481a      	ldr	r0, [pc, #104]	; (8001454 <processCup4.10218+0x88>)
 80013ec:	f7ff feb6 	bl	800115c <printUart.10203>
  		 HAL_GPIO_TogglePin(ARD_D8_GPIO_Port, ARD_D8_Pin);//Add_Water_LED_GPIO
 80013f0:	2104      	movs	r1, #4
 80013f2:	4819      	ldr	r0, [pc, #100]	; (8001458 <processCup4.10218+0x8c>)
 80013f4:	f001 ffee 	bl	80033d4 <HAL_GPIO_TogglePin>
  		 HAL_Delay(4000);
 80013f8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80013fc:	f001 fade 	bl	80029bc <HAL_Delay>
  		 if (BSP_HSENSOR_ReadHumidity() > 0) {
 8001400:	f001 f89e 	bl	8002540 <BSP_HSENSOR_ReadHumidity>
 8001404:	eef0 7a40 	vmov.f32	s15, s0
 8001408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	dd03      	ble.n	800141a <processCup4.10218+0x4e>
  			 printUart("Brewing Coffee");
 8001412:	46a4      	mov	ip, r4
 8001414:	4811      	ldr	r0, [pc, #68]	; (800145c <processCup4.10218+0x90>)
 8001416:	f7ff fea1 	bl	800115c <printUart.10203>
  		 HAL_Delay(2000);
 800141a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800141e:	f001 facd 	bl	80029bc <HAL_Delay>
  		 if (BSP_TSENSOR_ReadTemp() > 20) {
 8001422:	f001 f8b7 	bl	8002594 <BSP_TSENSOR_ReadTemp>
 8001426:	eeb0 7a40 	vmov.f32	s14, s0
 800142a:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800142e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	dd03      	ble.n	8001440 <processCup4.10218+0x74>
  			 printUart("Ready to drink, Enjoy!");
 8001438:	46a4      	mov	ip, r4
 800143a:	4809      	ldr	r0, [pc, #36]	; (8001460 <processCup4.10218+0x94>)
 800143c:	f7ff fe8e 	bl	800115c <printUart.10203>
  		HAL_Delay(1000);
 8001440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001444:	f001 faba 	bl	80029bc <HAL_Delay>
  	}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bd90      	pop	{r4, r7, pc}
 8001450:	0800858c 	.word	0x0800858c
 8001454:	08008520 	.word	0x08008520
 8001458:	48000400 	.word	0x48000400
 800145c:	08008534 	.word	0x08008534
 8001460:	08008544 	.word	0x08008544

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0b8      	sub	sp, #224	; 0xe0
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800146e:	2244      	movs	r2, #68	; 0x44
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f005 faf3 	bl	8006a5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001488:	463b      	mov	r3, r7
 800148a:	2288      	movs	r2, #136	; 0x88
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f005 fae5 	bl	8006a5e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001494:	f002 fec4 	bl	8004220 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <SystemClock_Config+0x140>)
 800149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149e:	4a41      	ldr	r2, [pc, #260]	; (80015a4 <SystemClock_Config+0x140>)
 80014a0:	f023 0318 	bic.w	r3, r3, #24
 80014a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014a8:	2314      	movs	r3, #20
 80014aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014b4:	2301      	movs	r3, #1
 80014b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014c0:	2360      	movs	r3, #96	; 0x60
 80014c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c6:	2302      	movs	r3, #2
 80014c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014d8:	2328      	movs	r3, #40	; 0x28
 80014da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014de:	2307      	movs	r3, #7
 80014e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 ffd3 	bl	80044a0 <HAL_RCC_OscConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001500:	f000 fb68 	bl	8001bd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001504:	230f      	movs	r3, #15
 8001506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150a:	2303      	movs	r3, #3
 800150c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001522:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001526:	2104      	movs	r1, #4
 8001528:	4618      	mov	r0, r3
 800152a:	f003 fb9f 	bl	8004c6c <HAL_RCC_ClockConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001534:	f000 fb4e 	bl	8001bd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <SystemClock_Config+0x144>)
 800153a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800153c:	2300      	movs	r3, #0
 800153e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001540:	2300      	movs	r3, #0
 8001542:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001544:	2300      	movs	r3, #0
 8001546:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800154e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001552:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001554:	2301      	movs	r3, #1
 8001556:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001558:	2301      	movs	r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800155c:	2318      	movs	r3, #24
 800155e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001560:	2307      	movs	r3, #7
 8001562:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001564:	2302      	movs	r3, #2
 8001566:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001568:	2302      	movs	r3, #2
 800156a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800156c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001570:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	4618      	mov	r0, r3
 8001576:	f003 fd7d 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001580:	f000 fb28 	bl	8001bd4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001584:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001588:	f002 fe68 	bl	800425c <HAL_PWREx_ControlVoltageScaling>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8001592:	f000 fb1f 	bl	8001bd4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001596:	f004 f853 	bl	8005640 <HAL_RCCEx_EnableMSIPLLMode>
}
 800159a:	bf00      	nop
 800159c:	37e0      	adds	r7, #224	; 0xe0
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	00012085 	.word	0x00012085

080015ac <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015b2:	4a19      	ldr	r2, [pc, #100]	; (8001618 <MX_DFSDM1_Init+0x6c>)
 80015b4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015c4:	2202      	movs	r2, #2
 80015c6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015da:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015e4:	2204      	movs	r2, #4
 80015e6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_DFSDM1_Init+0x68>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <MX_DFSDM1_Init+0x68>)
 8001602:	f001 fb0f 	bl	8002c24 <HAL_DFSDM_ChannelInit>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800160c:	f000 fae2 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000254 	.word	0x20000254
 8001618:	40016020 	.word	0x40016020

0800161c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_I2C2_Init+0x74>)
 8001622:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <MX_I2C2_Init+0x78>)
 8001624:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_I2C2_Init+0x74>)
 8001628:	f640 6214 	movw	r2, #3604	; 0xe14
 800162c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_I2C2_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_I2C2_Init+0x74>)
 8001636:	2201      	movs	r2, #1
 8001638:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_I2C2_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_I2C2_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_I2C2_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_I2C2_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_I2C2_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_I2C2_Init+0x74>)
 800165a:	f001 fef8 	bl	800344e <HAL_I2C_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001664:	f000 fab6 	bl	8001bd4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001668:	2100      	movs	r1, #0
 800166a:	4809      	ldr	r0, [pc, #36]	; (8001690 <MX_I2C2_Init+0x74>)
 800166c:	f002 fbf8 	bl	8003e60 <HAL_I2CEx_ConfigAnalogFilter>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001676:	f000 faad 	bl	8001bd4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800167a:	2100      	movs	r1, #0
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <MX_I2C2_Init+0x74>)
 800167e:	f002 fc3a 	bl	8003ef6 <HAL_I2CEx_ConfigDigitalFilter>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001688:	f000 faa4 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000714 	.word	0x20000714
 8001694:	40005800 	.word	0x40005800

08001698 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_QUADSPI_Init+0x44>)
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <MX_QUADSPI_Init+0x48>)
 80016a0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_QUADSPI_Init+0x44>)
 80016a4:	22ff      	movs	r2, #255	; 0xff
 80016a6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_QUADSPI_Init+0x44>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_QUADSPI_Init+0x44>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_QUADSPI_Init+0x44>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_QUADSPI_Init+0x44>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_QUADSPI_Init+0x44>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_QUADSPI_Init+0x44>)
 80016c8:	f002 fe2e 	bl	8004328 <HAL_QSPI_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80016d2:	f000 fa7f 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000844 	.word	0x20000844
 80016e0:	a0001000 	.word	0xa0001000

080016e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_SPI3_Init+0x74>)
 80016ea:	4a1c      	ldr	r2, [pc, #112]	; (800175c <MX_SPI3_Init+0x78>)
 80016ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_SPI3_Init+0x74>)
 80016f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_SPI3_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_SPI3_Init+0x74>)
 80016fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001702:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_SPI3_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_SPI3_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_SPI3_Init+0x74>)
 8001712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001716:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_SPI3_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_SPI3_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_SPI3_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_SPI3_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_SPI3_Init+0x74>)
 8001732:	2207      	movs	r2, #7
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_SPI3_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_SPI3_Init+0x74>)
 800173e:	2208      	movs	r2, #8
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_SPI3_Init+0x74>)
 8001744:	f004 f956 	bl	80059f4 <HAL_SPI_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800174e:	f000 fa41 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000760 	.word	0x20000760
 800175c:	40003c00 	.word	0x40003c00

08001760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 8001768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_USART1_UART_Init+0x58>)
 80017a4:	f004 f9c9 	bl	8005b3a <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017ae:	f000 fa11 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200007c4 	.word	0x200007c4
 80017bc:	40013800 	.word	0x40013800

080017c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_USART3_UART_Init+0x58>)
 80017c6:	4a15      	ldr	r2, [pc, #84]	; (800181c <MX_USART3_UART_Init+0x5c>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <MX_USART3_UART_Init+0x58>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_USART3_UART_Init+0x58>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_USART3_UART_Init+0x58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_USART3_UART_Init+0x58>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_USART3_UART_Init+0x58>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <MX_USART3_UART_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_USART3_UART_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <MX_USART3_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_USART3_UART_Init+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_USART3_UART_Init+0x58>)
 8001804:	f004 f999 	bl	8005b3a <HAL_UART_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800180e:	f000 f9e1 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000028c 	.word	0x2000028c
 800181c:	40004800 	.word	0x40004800

08001820 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800182a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800182e:	2206      	movs	r2, #6
 8001830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001834:	2202      	movs	r2, #2
 8001836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800183a:	2202      	movs	r2, #2
 800183c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001864:	f002 fb93 	bl	8003f8e <HAL_PCD_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800186e:	f000 f9b1 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2000030c 	.word	0x2000030c

0800187c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001892:	4bba      	ldr	r3, [pc, #744]	; (8001b7c <MX_GPIO_Init+0x300>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	4ab9      	ldr	r2, [pc, #740]	; (8001b7c <MX_GPIO_Init+0x300>)
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189e:	4bb7      	ldr	r3, [pc, #732]	; (8001b7c <MX_GPIO_Init+0x300>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	4bb4      	ldr	r3, [pc, #720]	; (8001b7c <MX_GPIO_Init+0x300>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	4ab3      	ldr	r2, [pc, #716]	; (8001b7c <MX_GPIO_Init+0x300>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b6:	4bb1      	ldr	r3, [pc, #708]	; (8001b7c <MX_GPIO_Init+0x300>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4bae      	ldr	r3, [pc, #696]	; (8001b7c <MX_GPIO_Init+0x300>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	4aad      	ldr	r2, [pc, #692]	; (8001b7c <MX_GPIO_Init+0x300>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ce:	4bab      	ldr	r3, [pc, #684]	; (8001b7c <MX_GPIO_Init+0x300>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4ba8      	ldr	r3, [pc, #672]	; (8001b7c <MX_GPIO_Init+0x300>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4aa7      	ldr	r2, [pc, #668]	; (8001b7c <MX_GPIO_Init+0x300>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e6:	4ba5      	ldr	r3, [pc, #660]	; (8001b7c <MX_GPIO_Init+0x300>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f2:	4ba2      	ldr	r3, [pc, #648]	; (8001b7c <MX_GPIO_Init+0x300>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	4aa1      	ldr	r2, [pc, #644]	; (8001b7c <MX_GPIO_Init+0x300>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fe:	4b9f      	ldr	r3, [pc, #636]	; (8001b7c <MX_GPIO_Init+0x300>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001910:	489b      	ldr	r0, [pc, #620]	; (8001b80 <MX_GPIO_Init+0x304>)
 8001912:	f001 fd47 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	f248 1104 	movw	r1, #33028	; 0x8104
 800191c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001920:	f001 fd40 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001924:	2200      	movs	r2, #0
 8001926:	f24f 0114 	movw	r1, #61460	; 0xf014
 800192a:	4896      	ldr	r0, [pc, #600]	; (8001b84 <MX_GPIO_Init+0x308>)
 800192c:	f001 fd3a 	bl	80033a4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8001936:	4894      	ldr	r0, [pc, #592]	; (8001b88 <MX_GPIO_Init+0x30c>)
 8001938:	f001 fd34 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001942:	4891      	ldr	r0, [pc, #580]	; (8001b88 <MX_GPIO_Init+0x30c>)
 8001944:	f001 fd2e 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800194e:	488f      	ldr	r0, [pc, #572]	; (8001b8c <MX_GPIO_Init+0x310>)
 8001950:	f001 fd28 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	2120      	movs	r1, #32
 8001958:	488a      	ldr	r0, [pc, #552]	; (8001b84 <MX_GPIO_Init+0x308>)
 800195a:	f001 fd23 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2101      	movs	r1, #1
 8001962:	4887      	ldr	r0, [pc, #540]	; (8001b80 <MX_GPIO_Init+0x304>)
 8001964:	f001 fd1e 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001968:	f240 1315 	movw	r3, #277	; 0x115
 800196c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	487f      	ldr	r0, [pc, #508]	; (8001b80 <MX_GPIO_Init+0x304>)
 8001982:	f001 fa5b 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001986:	236a      	movs	r3, #106	; 0x6a
 8001988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800198a:	4b81      	ldr	r3, [pc, #516]	; (8001b90 <MX_GPIO_Init+0x314>)
 800198c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4879      	ldr	r0, [pc, #484]	; (8001b80 <MX_GPIO_Init+0x304>)
 800199a:	f001 fa4f 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800199e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019a4:	4b7b      	ldr	r3, [pc, #492]	; (8001b94 <MX_GPIO_Init+0x318>)
 80019a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4876      	ldr	r0, [pc, #472]	; (8001b8c <MX_GPIO_Init+0x310>)
 80019b4:	f001 fa42 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80019b8:	233f      	movs	r3, #63	; 0x3f
 80019ba:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019bc:	230b      	movs	r3, #11
 80019be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4870      	ldr	r0, [pc, #448]	; (8001b8c <MX_GPIO_Init+0x310>)
 80019cc:	f001 fa36 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80019d0:	2303      	movs	r3, #3
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019e0:	2308      	movs	r3, #8
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ee:	f001 fa25 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80019f2:	f248 1304 	movw	r3, #33028	; 0x8104
 80019f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0e:	f001 fa15 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001a12:	2308      	movs	r3, #8
 8001a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a22:	2301      	movs	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a30:	f001 fa04 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001a34:	2310      	movs	r3, #16
 8001a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a38:	230b      	movs	r3, #11
 8001a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f001 f9f7 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001a4e:	23e0      	movs	r3, #224	; 0xe0
 8001a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a5e:	2305      	movs	r3, #5
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6c:	f001 f9e6 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001a70:	2301      	movs	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a74:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <MX_GPIO_Init+0x314>)
 8001a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4840      	ldr	r0, [pc, #256]	; (8001b84 <MX_GPIO_Init+0x308>)
 8001a84:	f001 f9da 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a8c:	230b      	movs	r3, #11
 8001a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	483a      	ldr	r0, [pc, #232]	; (8001b84 <MX_GPIO_Init+0x308>)
 8001a9c:	f001 f9ce 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001aa0:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001aa4:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4832      	ldr	r0, [pc, #200]	; (8001b84 <MX_GPIO_Init+0x308>)
 8001aba:	f001 f9bf 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin;
 8001abe:	f44f 434c 	mov.w	r3, #52224	; 0xcc00
 8001ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <MX_GPIO_Init+0x314>)
 8001ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	482d      	ldr	r0, [pc, #180]	; (8001b88 <MX_GPIO_Init+0x30c>)
 8001ad4:	f001 f9b2 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|STSAFE_A100_RESET_Pin;
 8001ad8:	f44f 5342 	mov.w	r3, #12416	; 0x3080
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	4825      	ldr	r0, [pc, #148]	; (8001b88 <MX_GPIO_Init+0x30c>)
 8001af2:	f001 f9a3 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001af6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	2301      	movs	r3, #1
 8001afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	481f      	ldr	r0, [pc, #124]	; (8001b8c <MX_GPIO_Init+0x310>)
 8001b10:	f001 f994 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001b14:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <MX_GPIO_Init+0x314>)
 8001b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	4818      	ldr	r0, [pc, #96]	; (8001b8c <MX_GPIO_Init+0x310>)
 8001b2a:	f001 f987 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b2e:	231f      	movs	r3, #31
 8001b30:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4811      	ldr	r0, [pc, #68]	; (8001b88 <MX_GPIO_Init+0x30c>)
 8001b42:	f001 f97b 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001b46:	2360      	movs	r3, #96	; 0x60
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b56:	2307      	movs	r3, #7
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4809      	ldr	r0, [pc, #36]	; (8001b88 <MX_GPIO_Init+0x30c>)
 8001b62:	f001 f96b 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001b66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6c:	2312      	movs	r3, #18
 8001b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	e00d      	b.n	8001b98 <MX_GPIO_Init+0x31c>
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48001000 	.word	0x48001000
 8001b84:	48000400 	.word	0x48000400
 8001b88:	48000c00 	.word	0x48000c00
 8001b8c:	48000800 	.word	0x48000800
 8001b90:	10110000 	.word	0x10110000
 8001b94:	10210000 	.word	0x10210000
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <MX_GPIO_Init+0x354>)
 8001ba2:	f001 f94b 	bl	8002e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2017      	movs	r0, #23
 8001bac:	f001 f803 	bl	8002bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bb0:	2017      	movs	r0, #23
 8001bb2:	f001 f81c 	bl	8002bee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2028      	movs	r0, #40	; 0x28
 8001bbc:	f000 fffb 	bl	8002bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bc0:	2028      	movs	r0, #40	; 0x28
 8001bc2:	f001 f814 	bl	8002bee <HAL_NVIC_EnableIRQ>

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	; 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	48000400 	.word	0x48000400

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <HAL_MspInit+0x44>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bee:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <HAL_MspInit+0x44>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_MspInit+0x44>)
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_MspInit+0x44>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <HAL_MspInit+0x44>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_MspInit+0x44>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d128      	bne.n	8001c9e <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_DFSDM_ChannelMspInit+0x80>)
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c50:	4a16      	ldr	r2, [pc, #88]	; (8001cac <HAL_DFSDM_ChannelMspInit+0x80>)
 8001c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c56:	6613      	str	r3, [r2, #96]	; 0x60
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_DFSDM_ChannelMspInit+0x80>)
 8001c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_DFSDM_ChannelMspInit+0x80>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HAL_DFSDM_ChannelMspInit+0x80>)
 8001c6a:	f043 0310 	orr.w	r3, r3, #16
 8001c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_DFSDM_ChannelMspInit+0x80>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001c7c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c8e:	2306      	movs	r3, #6
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001c9a:	f001 f8cf 	bl	8002e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3728      	adds	r7, #40	; 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000218 	.word	0x20000218
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48001000 	.word	0x48001000

08001cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_I2C_MspInit+0x7c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d128      	bne.n	8001d28 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_I2C_MspInit+0x80>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	4a16      	ldr	r2, [pc, #88]	; (8001d34 <HAL_I2C_MspInit+0x80>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_I2C_MspInit+0x80>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001cee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf4:	2312      	movs	r3, #18
 8001cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d00:	2304      	movs	r3, #4
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480b      	ldr	r0, [pc, #44]	; (8001d38 <HAL_I2C_MspInit+0x84>)
 8001d0c:	f001 f896 	bl	8002e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_I2C_MspInit+0x80>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <HAL_I2C_MspInit+0x80>)
 8001d16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_I2C_MspInit+0x80>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	; 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40005800 	.word	0x40005800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	48000400 	.word	0x48000400

08001d3c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <HAL_I2C_MspDeInit+0x3c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10f      	bne.n	8001d6e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_I2C_MspDeInit+0x40>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_I2C_MspDeInit+0x40>)
 8001d54:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d58:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d5e:	4808      	ldr	r0, [pc, #32]	; (8001d80 <HAL_I2C_MspDeInit+0x44>)
 8001d60:	f001 fa14 	bl	800318c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d68:	4805      	ldr	r0, [pc, #20]	; (8001d80 <HAL_I2C_MspDeInit+0x44>)
 8001d6a:	f001 fa0f 	bl	800318c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40005800 	.word	0x40005800
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	48000400 	.word	0x48000400

08001d84 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <HAL_QSPI_MspInit+0x7c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d128      	bne.n	8001df8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_QSPI_MspInit+0x80>)
 8001da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001daa:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <HAL_QSPI_MspInit+0x80>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6513      	str	r3, [r2, #80]	; 0x50
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_QSPI_MspInit+0x80>)
 8001db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_QSPI_MspInit+0x80>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <HAL_QSPI_MspInit+0x80>)
 8001dc4:	f043 0310 	orr.w	r3, r3, #16
 8001dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_QSPI_MspInit+0x80>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001dd6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001dda:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001de8:	230a      	movs	r3, #10
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <HAL_QSPI_MspInit+0x84>)
 8001df4:	f001 f822 	bl	8002e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001df8:	bf00      	nop
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	a0001000 	.word	0xa0001000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	48001000 	.word	0x48001000

08001e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <HAL_SPI_MspInit+0x7c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d128      	bne.n	8001e80 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e38:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_SPI_MspInit+0x80>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001e5e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e70:	2306      	movs	r3, #6
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <HAL_SPI_MspInit+0x84>)
 8001e7c:	f000 ffde 	bl	8002e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e80:	bf00      	nop
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40003c00 	.word	0x40003c00
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	48000800 	.word	0x48000800

08001e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2e      	ldr	r2, [pc, #184]	; (8001f6c <HAL_UART_MspInit+0xd8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d128      	bne.n	8001f08 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	4a2d      	ldr	r2, [pc, #180]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec2:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eca:	61bb      	str	r3, [r7, #24]
 8001ecc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	4a27      	ldr	r2, [pc, #156]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eda:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001ee6:	23c0      	movs	r3, #192	; 0xc0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	4619      	mov	r1, r3
 8001f00:	481c      	ldr	r0, [pc, #112]	; (8001f74 <HAL_UART_MspInit+0xe0>)
 8001f02:	f000 ff9b 	bl	8002e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f06:	e02d      	b.n	8001f64 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1a      	ldr	r2, [pc, #104]	; (8001f78 <HAL_UART_MspInit+0xe4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d128      	bne.n	8001f64 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_UART_MspInit+0xdc>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001f42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f54:	2307      	movs	r3, #7
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4807      	ldr	r0, [pc, #28]	; (8001f7c <HAL_UART_MspInit+0xe8>)
 8001f60:	f000 ff6c 	bl	8002e3c <HAL_GPIO_Init>
}
 8001f64:	bf00      	nop
 8001f66:	3730      	adds	r7, #48	; 0x30
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40013800 	.word	0x40013800
 8001f70:	40021000 	.word	0x40021000
 8001f74:	48000400 	.word	0x48000400
 8001f78:	40004800 	.word	0x40004800
 8001f7c:	48000c00 	.word	0x48000c00

08001f80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa0:	d154      	bne.n	800204c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_PCD_MspInit+0xd4>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <HAL_PCD_MspInit+0xd4>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fae:	4b29      	ldr	r3, [pc, #164]	; (8002054 <HAL_PCD_MspInit+0xd4>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd2:	f000 ff33 	bl	8002e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001fd6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fe8:	230a      	movs	r3, #10
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff6:	f000 ff21 	bl	8002e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_PCD_MspInit+0xd4>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <HAL_PCD_MspInit+0xd4>)
 8002000:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_PCD_MspInit+0xd4>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_PCD_MspInit+0xd4>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d114      	bne.n	8002048 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_PCD_MspInit+0xd4>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <HAL_PCD_MspInit+0xd4>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	6593      	str	r3, [r2, #88]	; 0x58
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_PCD_MspInit+0xd4>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002036:	f002 f967 	bl	8004308 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_PCD_MspInit+0xd4>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <HAL_PCD_MspInit+0xd4>)
 8002040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002044:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002046:	e001      	b.n	800204c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8002048:	f002 f95e 	bl	8004308 <HAL_PWREx_EnableVddUSB>
}
 800204c:	bf00      	nop
 800204e:	3728      	adds	r7, #40	; 0x28
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <HardFault_Handler+0x4>

0800206c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <MemManage_Handler+0x4>

08002072 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <UsageFault_Handler+0x4>

0800207e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ac:	f000 fc66 	bl	800297c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80020b8:	2020      	movs	r0, #32
 80020ba:	f001 f9a5 	bl	8003408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80020be:	2040      	movs	r0, #64	; 0x40
 80020c0:	f001 f9a2 	bl	8003408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80020c4:	2080      	movs	r0, #128	; 0x80
 80020c6:	f001 f99f 	bl	8003408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80020ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020ce:	f001 f99b 	bl	8003408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80020da:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020de:	f001 f993 	bl	8003408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80020e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020e6:	f001 f98f 	bl	8003408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80020ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020ee:	f001 f98b 	bl	8003408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80020f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020f6:	f001 f987 	bl	8003408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80020fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020fe:	f001 f983 	bl	8003408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f004 fc5c 	bl	80069f4 <__errno>
 800213c:	4602      	mov	r2, r0
 800213e:	230c      	movs	r3, #12
 8002140:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20018000 	.word	0x20018000
 8002168:	00000400 	.word	0x00000400
 800216c:	2000021c 	.word	0x2000021c
 8002170:	20000960 	.word	0x20000960

08002174 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <SystemInit+0x64>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <SystemInit+0x64>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <SystemInit+0x68>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a13      	ldr	r2, [pc, #76]	; (80021dc <SystemInit+0x68>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <SystemInit+0x68>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <SystemInit+0x68>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a0f      	ldr	r2, [pc, #60]	; (80021dc <SystemInit+0x68>)
 80021a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80021a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80021a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <SystemInit+0x68>)
 80021ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <SystemInit+0x68>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <SystemInit+0x68>)
 80021b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <SystemInit+0x68>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <SystemInit+0x64>)
 80021c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ca:	609a      	str	r2, [r3, #8]
#endif
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00
 80021dc:	40021000 	.word	0x40021000

080021e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002218 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021e4:	f7ff ffc6 	bl	8002174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80021e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80021ea:	e003      	b.n	80021f4 <LoopCopyDataInit>

080021ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80021ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80021f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80021f2:	3104      	adds	r1, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80021f4:	480a      	ldr	r0, [pc, #40]	; (8002220 <LoopForever+0xa>)
	ldr	r3, =_edata
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <LoopForever+0xe>)
	adds	r2, r0, r1
 80021f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80021fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80021fc:	d3f6      	bcc.n	80021ec <CopyDataInit>
	ldr	r2, =_sbss
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002200:	e002      	b.n	8002208 <LoopFillZerobss>

08002202 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002202:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002204:	f842 3b04 	str.w	r3, [r2], #4

08002208 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <LoopForever+0x16>)
	cmp	r2, r3
 800220a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800220c:	d3f9      	bcc.n	8002202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220e:	f004 fbf7 	bl	8006a00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002212:	f7fe fdf5 	bl	8000e00 <main>

08002216 <LoopForever>:

LoopForever:
    b LoopForever
 8002216:	e7fe      	b.n	8002216 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002218:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800221c:	08008828 	.word	0x08008828
	ldr	r0, =_sdata
 8002220:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002224:	200001fc 	.word	0x200001fc
	ldr	r2, =_sbss
 8002228:	200001fc 	.word	0x200001fc
	ldr	r3, = _ebss
 800222c:	2000095c 	.word	0x2000095c

08002230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC1_2_IRQHandler>
	...

08002234 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button 
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	4a06      	ldr	r2, [pc, #24]	; (800225c <BSP_PB_GetState+0x28>)
 8002242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f001 f891 	bl	8003374 <HAL_GPIO_ReadPin>
 8002252:	4603      	mov	r3, r0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000004 	.word	0x20000004

08002260 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <I2Cx_MspInit+0xa8>)
 800226a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226c:	4a26      	ldr	r2, [pc, #152]	; (8002308 <I2Cx_MspInit+0xa8>)
 800226e:	f043 0302 	orr.w	r3, r3, #2
 8002272:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <I2Cx_MspInit+0xa8>)
 8002276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002280:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002284:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002286:	2312      	movs	r3, #18
 8002288:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800228a:	2301      	movs	r3, #1
 800228c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228e:	2303      	movs	r3, #3
 8002290:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002292:	2304      	movs	r3, #4
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	481b      	ldr	r0, [pc, #108]	; (800230c <I2Cx_MspInit+0xac>)
 800229e:	f000 fdcd 	bl	8002e3c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	4818      	ldr	r0, [pc, #96]	; (800230c <I2Cx_MspInit+0xac>)
 80022aa:	f000 fdc7 	bl	8002e3c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <I2Cx_MspInit+0xa8>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	4a15      	ldr	r2, [pc, #84]	; (8002308 <I2Cx_MspInit+0xa8>)
 80022b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022b8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <I2Cx_MspInit+0xa8>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <I2Cx_MspInit+0xa8>)
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <I2Cx_MspInit+0xa8>)
 80022cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <I2Cx_MspInit+0xa8>)
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <I2Cx_MspInit+0xa8>)
 80022d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80022dc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	210f      	movs	r1, #15
 80022e2:	2021      	movs	r0, #33	; 0x21
 80022e4:	f000 fc67 	bl	8002bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80022e8:	2021      	movs	r0, #33	; 0x21
 80022ea:	f000 fc80 	bl	8002bee <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	210f      	movs	r1, #15
 80022f2:	2022      	movs	r0, #34	; 0x22
 80022f4:	f000 fc5f 	bl	8002bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80022f8:	2022      	movs	r0, #34	; 0x22
 80022fa:	f000 fc78 	bl	8002bee <HAL_NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3728      	adds	r7, #40	; 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	48000400 	.word	0x48000400

08002310 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a12      	ldr	r2, [pc, #72]	; (8002364 <I2Cx_Init+0x54>)
 800231c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a11      	ldr	r2, [pc, #68]	; (8002368 <I2Cx_Init+0x58>)
 8002322:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff89 	bl	8002260 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f001 f87d 	bl	800344e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002354:	2100      	movs	r1, #0
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f001 fd82 	bl	8003e60 <HAL_I2CEx_ConfigAnalogFilter>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40005800 	.word	0x40005800
 8002368:	00702681 	.word	0x00702681

0800236c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af04      	add	r7, sp, #16
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	4608      	mov	r0, r1
 8002376:	4611      	mov	r1, r2
 8002378:	461a      	mov	r2, r3
 800237a:	4603      	mov	r3, r0
 800237c:	72fb      	strb	r3, [r7, #11]
 800237e:	460b      	mov	r3, r1
 8002380:	813b      	strh	r3, [r7, #8]
 8002382:	4613      	mov	r3, r2
 8002384:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800238a:	7afb      	ldrb	r3, [r7, #11]
 800238c:	b299      	uxth	r1, r3
 800238e:	88f8      	ldrh	r0, [r7, #6]
 8002390:	893a      	ldrh	r2, [r7, #8]
 8002392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002396:	9302      	str	r3, [sp, #8]
 8002398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	4603      	mov	r3, r0
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f001 fa26 	bl	80037f4 <HAL_I2C_Mem_Read>
 80023a8:	4603      	mov	r3, r0
 80023aa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80023ac:	7dfb      	ldrb	r3, [r7, #23]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80023b2:	7afb      	ldrb	r3, [r7, #11]
 80023b4:	4619      	mov	r1, r3
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f832 	bl	8002420 <I2Cx_Error>
  }
  return status;
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b08a      	sub	sp, #40	; 0x28
 80023ca:	af04      	add	r7, sp, #16
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	4608      	mov	r0, r1
 80023d0:	4611      	mov	r1, r2
 80023d2:	461a      	mov	r2, r3
 80023d4:	4603      	mov	r3, r0
 80023d6:	72fb      	strb	r3, [r7, #11]
 80023d8:	460b      	mov	r3, r1
 80023da:	813b      	strh	r3, [r7, #8]
 80023dc:	4613      	mov	r3, r2
 80023de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80023e4:	7afb      	ldrb	r3, [r7, #11]
 80023e6:	b299      	uxth	r1, r3
 80023e8:	88f8      	ldrh	r0, [r7, #6]
 80023ea:	893a      	ldrh	r2, [r7, #8]
 80023ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f0:	9302      	str	r3, [sp, #8]
 80023f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	4603      	mov	r3, r0
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f001 f8e5 	bl	80035cc <HAL_I2C_Mem_Write>
 8002402:	4603      	mov	r3, r0
 8002404:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800240c:	7afb      	ldrb	r3, [r7, #11]
 800240e:	4619      	mov	r1, r3
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f805 	bl	8002420 <I2Cx_Error>
  }
  return status;
 8002416:	7dfb      	ldrb	r3, [r7, #23]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f001 f89d 	bl	800356c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ff6c 	bl	8002310 <I2Cx_Init>
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <SENSOR_IO_Init+0x10>)
 8002446:	f7ff ff63 	bl	8002310 <I2Cx_Init>
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000908 	.word	0x20000908

08002454 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af02      	add	r7, sp, #8
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
 800245e:	460b      	mov	r3, r1
 8002460:	71bb      	strb	r3, [r7, #6]
 8002462:	4613      	mov	r3, r2
 8002464:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002466:	79bb      	ldrb	r3, [r7, #6]
 8002468:	b29a      	uxth	r2, r3
 800246a:	79f9      	ldrb	r1, [r7, #7]
 800246c:	2301      	movs	r3, #1
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	1d7b      	adds	r3, r7, #5
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2301      	movs	r3, #1
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <SENSOR_IO_Write+0x30>)
 8002478:	f7ff ffa5 	bl	80023c6 <I2Cx_WriteMultiple>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000908 	.word	0x20000908

08002488 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af02      	add	r7, sp, #8
 800248e:	4603      	mov	r3, r0
 8002490:	460a      	mov	r2, r1
 8002492:	71fb      	strb	r3, [r7, #7]
 8002494:	4613      	mov	r3, r2
 8002496:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800249c:	79bb      	ldrb	r3, [r7, #6]
 800249e:	b29a      	uxth	r2, r3
 80024a0:	79f9      	ldrb	r1, [r7, #7]
 80024a2:	2301      	movs	r3, #1
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	f107 030f 	add.w	r3, r7, #15
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2301      	movs	r3, #1
 80024ae:	4804      	ldr	r0, [pc, #16]	; (80024c0 <SENSOR_IO_Read+0x38>)
 80024b0:	f7ff ff5c 	bl	800236c <I2Cx_ReadMultiple>

  return read_value;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000908 	.word	0x20000908

080024c4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	603a      	str	r2, [r7, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
 80024d2:	460b      	mov	r3, r1
 80024d4:	71bb      	strb	r3, [r7, #6]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80024da:	79bb      	ldrb	r3, [r7, #6]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	79f9      	ldrb	r1, [r7, #7]
 80024e0:	88bb      	ldrh	r3, [r7, #4]
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2301      	movs	r3, #1
 80024ea:	4804      	ldr	r0, [pc, #16]	; (80024fc <SENSOR_IO_ReadMultiple+0x38>)
 80024ec:	f7ff ff3e 	bl	800236c <I2Cx_ReadMultiple>
 80024f0:	4603      	mov	r3, r0
 80024f2:	b29b      	uxth	r3, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000908 	.word	0x20000908

08002500 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <BSP_HSENSOR_Init+0x38>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	20be      	movs	r0, #190	; 0xbe
 800250c:	4798      	blx	r3
 800250e:	4603      	mov	r3, r0
 8002510:	2bbc      	cmp	r3, #188	; 0xbc
 8002512:	d002      	beq.n	800251a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	e009      	b.n	800252e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <BSP_HSENSOR_Init+0x3c>)
 800251c:	4a06      	ldr	r2, [pc, #24]	; (8002538 <BSP_HSENSOR_Init+0x38>)
 800251e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <BSP_HSENSOR_Init+0x3c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	20be      	movs	r0, #190	; 0xbe
 8002528:	4798      	blx	r3
    ret = HSENSOR_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800252e:	687b      	ldr	r3, [r7, #4]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000008 	.word	0x20000008
 800253c:	20000220 	.word	0x20000220

08002540 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	20be      	movs	r0, #190	; 0xbe
 800254c:	4798      	blx	r3
 800254e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002552:	eeb0 0a67 	vmov.f32	s0, s15
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000220 	.word	0x20000220

0800255c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <BSP_TSENSOR_Init+0x30>)
 8002568:	4a09      	ldr	r2, [pc, #36]	; (8002590 <BSP_TSENSOR_Init+0x34>)
 800256a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800256c:	f7ff ff68 	bl	8002440 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <BSP_TSENSOR_Init+0x30>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2100      	movs	r1, #0
 8002578:	20be      	movs	r0, #190	; 0xbe
 800257a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002580:	79fb      	ldrb	r3, [r7, #7]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000224 	.word	0x20000224
 8002590:	20000014 	.word	0x20000014

08002594 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <BSP_TSENSOR_ReadTemp+0x18>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	20be      	movs	r0, #190	; 0xbe
 80025a0:	4798      	blx	r3
 80025a2:	eef0 7a40 	vmov.f32	s15, s0
}
 80025a6:	eeb0 0a67 	vmov.f32	s0, s15
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000224 	.word	0x20000224

080025b0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2120      	movs	r1, #32
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff61 	bl	8002488 <SENSOR_IO_Read>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	f023 0303 	bic.w	r3, r3, #3
 80025e0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025f0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	2120      	movs	r1, #32
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff2a 	bl	8002454 <SENSOR_IO_Write>
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002616:	f7ff ff13 	bl	8002440 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	210f      	movs	r1, #15
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff31 	bl	8002488 <SENSOR_IO_Read>
 8002626:	4603      	mov	r3, r0
 8002628:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	b2d8      	uxtb	r0, r3
 8002642:	f107 020c 	add.w	r2, r7, #12
 8002646:	2302      	movs	r3, #2
 8002648:	21b0      	movs	r1, #176	; 0xb0
 800264a:	f7ff ff3b 	bl	80024c4 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800264e:	7b3b      	ldrb	r3, [r7, #12]
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002656:	7b7b      	ldrb	r3, [r7, #13]
 8002658:	085b      	lsrs	r3, r3, #1
 800265a:	b2db      	uxtb	r3, r3
 800265c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	b2d8      	uxtb	r0, r3
 8002662:	f107 020c 	add.w	r2, r7, #12
 8002666:	2302      	movs	r3, #2
 8002668:	21b6      	movs	r1, #182	; 0xb6
 800266a:	f7ff ff2b 	bl	80024c4 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800266e:	7b7b      	ldrb	r3, [r7, #13]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	b21a      	sxth	r2, r3
 8002674:	7b3b      	ldrb	r3, [r7, #12]
 8002676:	b21b      	sxth	r3, r3
 8002678:	4313      	orrs	r3, r2
 800267a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	b2d8      	uxtb	r0, r3
 8002680:	f107 020c 	add.w	r2, r7, #12
 8002684:	2302      	movs	r3, #2
 8002686:	21ba      	movs	r1, #186	; 0xba
 8002688:	f7ff ff1c 	bl	80024c4 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800268c:	7b7b      	ldrb	r3, [r7, #13]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	b21a      	sxth	r2, r3
 8002692:	7b3b      	ldrb	r3, [r7, #12]
 8002694:	b21b      	sxth	r3, r3
 8002696:	4313      	orrs	r3, r2
 8002698:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	b2d8      	uxtb	r0, r3
 800269e:	f107 020c 	add.w	r2, r7, #12
 80026a2:	2302      	movs	r3, #2
 80026a4:	21a8      	movs	r1, #168	; 0xa8
 80026a6:	f7ff ff0d 	bl	80024c4 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80026aa:	7b7b      	ldrb	r3, [r7, #13]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	b21a      	sxth	r2, r3
 80026b0:	7b3b      	ldrb	r3, [r7, #12]
 80026b2:	b21b      	sxth	r3, r3
 80026b4:	4313      	orrs	r3, r2
 80026b6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80026b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80026bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	ee07 3a90 	vmov	s15, r3
 80026c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ca:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80026ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	ee07 3a90 	vmov	s15, r3
 80026d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026e0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80026e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	ee07 3a90 	vmov	s15, r3
 80026ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800270a:	edd7 7a04 	vldr	s15, [r7, #16]
 800270e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002716:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800271a:	edd7 7a04 	vldr	s15, [r7, #16]
 800271e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002764 <HTS221_H_ReadHumidity+0x130>
 8002722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272a:	dd01      	ble.n	8002730 <HTS221_H_ReadHumidity+0xfc>
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HTS221_H_ReadHumidity+0x134>)
 800272e:	e00a      	b.n	8002746 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002730:	edd7 7a04 	vldr	s15, [r7, #16]
 8002734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	d502      	bpl.n	8002744 <HTS221_H_ReadHumidity+0x110>
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	e000      	b.n	8002746 <HTS221_H_ReadHumidity+0x112>
 8002744:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002746:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002748:	edd7 7a04 	vldr	s15, [r7, #16]
 800274c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002750:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002754:	eef0 7a66 	vmov.f32	s15, s13
}
 8002758:	eeb0 0a67 	vmov.f32	s0, s15
 800275c:	3720      	adds	r7, #32
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	447a0000 	.word	0x447a0000
 8002768:	447a0000 	.word	0x447a0000

0800276c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2120      	movs	r1, #32
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fe82 	bl	8002488 <SENSOR_IO_Read>
 8002784:	4603      	mov	r3, r0
 8002786:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	f023 0304 	bic.w	r3, r3, #4
 800278e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	f023 0303 	bic.w	r3, r3, #3
 800279e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027ae:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	2120      	movs	r1, #32
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fe4b 	bl	8002454 <SENSOR_IO_Write>
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b088      	sub	sp, #32
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	b2d8      	uxtb	r0, r3
 80027d4:	f107 0208 	add.w	r2, r7, #8
 80027d8:	2302      	movs	r3, #2
 80027da:	21b2      	movs	r1, #178	; 0xb2
 80027dc:	f7ff fe72 	bl	80024c4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2135      	movs	r1, #53	; 0x35
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fe4e 	bl	8002488 <SENSOR_IO_Read>
 80027ec:	4603      	mov	r3, r0
 80027ee:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80027f0:	7ffb      	ldrb	r3, [r7, #31]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fa:	b21a      	sxth	r2, r3
 80027fc:	7a3b      	ldrb	r3, [r7, #8]
 80027fe:	b21b      	sxth	r3, r3
 8002800:	4313      	orrs	r3, r2
 8002802:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002804:	7ffb      	ldrb	r3, [r7, #31]
 8002806:	019b      	lsls	r3, r3, #6
 8002808:	b21b      	sxth	r3, r3
 800280a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280e:	b21a      	sxth	r2, r3
 8002810:	7a7b      	ldrb	r3, [r7, #9]
 8002812:	b21b      	sxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002818:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800281c:	10db      	asrs	r3, r3, #3
 800281e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002820:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002824:	10db      	asrs	r3, r3, #3
 8002826:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	b2d8      	uxtb	r0, r3
 800282c:	f107 0208 	add.w	r2, r7, #8
 8002830:	2304      	movs	r3, #4
 8002832:	21bc      	movs	r1, #188	; 0xbc
 8002834:	f7ff fe46 	bl	80024c4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002838:	7a7b      	ldrb	r3, [r7, #9]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	b21a      	sxth	r2, r3
 800283e:	7a3b      	ldrb	r3, [r7, #8]
 8002840:	b21b      	sxth	r3, r3
 8002842:	4313      	orrs	r3, r2
 8002844:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002846:	7afb      	ldrb	r3, [r7, #11]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	b21a      	sxth	r2, r3
 800284c:	7abb      	ldrb	r3, [r7, #10]
 800284e:	b21b      	sxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	b2d8      	uxtb	r0, r3
 8002858:	f107 0208 	add.w	r2, r7, #8
 800285c:	2302      	movs	r3, #2
 800285e:	21aa      	movs	r1, #170	; 0xaa
 8002860:	f7ff fe30 	bl	80024c4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002864:	7a7b      	ldrb	r3, [r7, #9]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	b21a      	sxth	r2, r3
 800286a:	7a3b      	ldrb	r3, [r7, #8]
 800286c:	b21b      	sxth	r3, r3
 800286e:	4313      	orrs	r3, r2
 8002870:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002872:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002876:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002884:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002888:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002896:	ee67 6a27 	vmul.f32	s13, s14, s15
 800289a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800289e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028b0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	ee07 3a90 	vmov	s15, r3
}
 80028ca:	eeb0 0a67 	vmov.f32	s0, s15
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028de:	2003      	movs	r0, #3
 80028e0:	f000 f95e 	bl	8002ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e4:	2000      	movs	r0, #0
 80028e6:	f000 f80d 	bl	8002904 <HAL_InitTick>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	71fb      	strb	r3, [r7, #7]
 80028f4:	e001      	b.n	80028fa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028f6:	f7ff f975 	bl	8001be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028fa:	79fb      	ldrb	r3, [r7, #7]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <HAL_InitTick+0x6c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002918:	4b16      	ldr	r3, [pc, #88]	; (8002974 <HAL_InitTick+0x70>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <HAL_InitTick+0x6c>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002926:	fbb3 f3f1 	udiv	r3, r3, r1
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f96b 	bl	8002c0a <HAL_SYSTICK_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10f      	bne.n	800295a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b0f      	cmp	r3, #15
 800293e:	d809      	bhi.n	8002954 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002940:	2200      	movs	r2, #0
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	f000 f935 	bl	8002bb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800294c:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <HAL_InitTick+0x74>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e007      	b.n	8002964 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
 8002958:	e004      	b.n	8002964 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	e001      	b.n	8002964 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000028 	.word	0x20000028
 8002974:	20000000 	.word	0x20000000
 8002978:	20000024 	.word	0x20000024

0800297c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_IncTick+0x20>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_IncTick+0x24>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4413      	add	r3, r2
 800298c:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <HAL_IncTick+0x24>)
 800298e:	6013      	str	r3, [r2, #0]
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000028 	.word	0x20000028
 80029a0:	20000954 	.word	0x20000954

080029a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return uwTick;
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_GetTick+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000954 	.word	0x20000954

080029bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c4:	f7ff ffee 	bl	80029a4 <HAL_GetTick>
 80029c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d005      	beq.n	80029e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_Delay+0x40>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4413      	add	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029e2:	bf00      	nop
 80029e4:	f7ff ffde 	bl	80029a4 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d8f7      	bhi.n	80029e4 <HAL_Delay+0x28>
  {
  }
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000028 	.word	0x20000028

08002a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a32:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	60d3      	str	r3, [r2, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <__NVIC_GetPriorityGrouping+0x18>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	f003 0307 	and.w	r3, r3, #7
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	db0b      	blt.n	8002a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	f003 021f 	and.w	r2, r3, #31
 8002a7c:	4907      	ldr	r1, [pc, #28]	; (8002a9c <__NVIC_EnableIRQ+0x38>)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2001      	movs	r0, #1
 8002a86:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000e100 	.word	0xe000e100

08002aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db0a      	blt.n	8002aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	490c      	ldr	r1, [pc, #48]	; (8002aec <__NVIC_SetPriority+0x4c>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac8:	e00a      	b.n	8002ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4908      	ldr	r1, [pc, #32]	; (8002af0 <__NVIC_SetPriority+0x50>)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	3b04      	subs	r3, #4
 8002ad8:	0112      	lsls	r2, r2, #4
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	440b      	add	r3, r1
 8002ade:	761a      	strb	r2, [r3, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f1c3 0307 	rsb	r3, r3, #7
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	bf28      	it	cs
 8002b12:	2304      	movcs	r3, #4
 8002b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d902      	bls.n	8002b24 <NVIC_EncodePriority+0x30>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3b03      	subs	r3, #3
 8002b22:	e000      	b.n	8002b26 <NVIC_EncodePriority+0x32>
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	4313      	orrs	r3, r2
         );
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b6c:	d301      	bcc.n	8002b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00f      	b.n	8002b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b72:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <SysTick_Config+0x40>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7a:	210f      	movs	r1, #15
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b80:	f7ff ff8e 	bl	8002aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <SysTick_Config+0x40>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8a:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <SysTick_Config+0x40>)
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	e000e010 	.word	0xe000e010

08002ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ff29 	bl	8002a00 <__NVIC_SetPriorityGrouping>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc8:	f7ff ff3e 	bl	8002a48 <__NVIC_GetPriorityGrouping>
 8002bcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	6978      	ldr	r0, [r7, #20]
 8002bd4:	f7ff ff8e 	bl	8002af4 <NVIC_EncodePriority>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff5d 	bl	8002aa0 <__NVIC_SetPriority>
}
 8002be6:	bf00      	nop
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff31 	bl	8002a64 <__NVIC_EnableIRQ>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ffa2 	bl	8002b5c <SysTick_Config>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0ac      	b.n	8002d90 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f8b2 	bl	8002da4 <DFSDM_GetChannelFromInstance>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b55      	ldr	r3, [pc, #340]	; (8002d98 <HAL_DFSDM_ChannelInit+0x174>)
 8002c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e09f      	b.n	8002d90 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7fe ffeb 	bl	8001c2c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002c56:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <HAL_DFSDM_ChannelInit+0x178>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	4a4f      	ldr	r2, [pc, #316]	; (8002d9c <HAL_DFSDM_ChannelInit+0x178>)
 8002c5e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002c60:	4b4e      	ldr	r3, [pc, #312]	; (8002d9c <HAL_DFSDM_ChannelInit+0x178>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d125      	bne.n	8002cb4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002c68:	4b4d      	ldr	r3, [pc, #308]	; (8002da0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a4c      	ldr	r2, [pc, #304]	; (8002da0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c72:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002c74:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4948      	ldr	r1, [pc, #288]	; (8002da0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002c82:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a46      	ldr	r2, [pc, #280]	; (8002da0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c88:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002c8c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	791b      	ldrb	r3, [r3, #4]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d108      	bne.n	8002ca8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002c96:	4b42      	ldr	r3, [pc, #264]	; (8002da0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	493f      	ldr	r1, [pc, #252]	; (8002da0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002ca8:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a3c      	ldr	r2, [pc, #240]	; (8002da0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002cae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cb2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002cc2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6819      	ldr	r1, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002cd2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002cd8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 020f 	bic.w	r2, r2, #15
 8002cf0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002d18:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6899      	ldr	r1, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f002 0207 	and.w	r2, r2, #7
 8002d44:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d70:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f810 	bl	8002da4 <DFSDM_GetChannelFromInstance>
 8002d84:	4601      	mov	r1, r0
 8002d86:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <HAL_DFSDM_ChannelInit+0x174>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	2000022c 	.word	0x2000022c
 8002d9c:	20000228 	.word	0x20000228
 8002da0:	40016000 	.word	0x40016000

08002da4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <DFSDM_GetChannelFromInstance+0x7c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d102      	bne.n	8002dba <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e02b      	b.n	8002e12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <DFSDM_GetChannelFromInstance+0x80>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d102      	bne.n	8002dc8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	e024      	b.n	8002e12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a17      	ldr	r2, [pc, #92]	; (8002e28 <DFSDM_GetChannelFromInstance+0x84>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d102      	bne.n	8002dd6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e01d      	b.n	8002e12 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <DFSDM_GetChannelFromInstance+0x88>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d102      	bne.n	8002de4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002dde:	2304      	movs	r3, #4
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	e016      	b.n	8002e12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <DFSDM_GetChannelFromInstance+0x8c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d102      	bne.n	8002df2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002dec:	2305      	movs	r3, #5
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e00f      	b.n	8002e12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <DFSDM_GetChannelFromInstance+0x90>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d102      	bne.n	8002e00 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002dfa:	2306      	movs	r3, #6
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	e008      	b.n	8002e12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <DFSDM_GetChannelFromInstance+0x94>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002e08:	2307      	movs	r3, #7
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e001      	b.n	8002e12 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002e12:	68fb      	ldr	r3, [r7, #12]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40016000 	.word	0x40016000
 8002e24:	40016020 	.word	0x40016020
 8002e28:	40016040 	.word	0x40016040
 8002e2c:	40016080 	.word	0x40016080
 8002e30:	400160a0 	.word	0x400160a0
 8002e34:	400160c0 	.word	0x400160c0
 8002e38:	400160e0 	.word	0x400160e0

08002e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e4a:	e17f      	b.n	800314c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	2101      	movs	r1, #1
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8171 	beq.w	8003146 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d00b      	beq.n	8002e84 <HAL_GPIO_Init+0x48>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d007      	beq.n	8002e84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e78:	2b11      	cmp	r3, #17
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b12      	cmp	r3, #18
 8002e82:	d130      	bne.n	8002ee6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eba:	2201      	movs	r2, #1
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 0201 	and.w	r2, r3, #1
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d118      	bne.n	8002f24 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	08db      	lsrs	r3, r3, #3
 8002f0e:	f003 0201 	and.w	r2, r3, #1
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x128>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b12      	cmp	r3, #18
 8002f62:	d123      	bne.n	8002fac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	08da      	lsrs	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3208      	adds	r2, #8
 8002f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	08da      	lsrs	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3208      	adds	r2, #8
 8002fa6:	6939      	ldr	r1, [r7, #16]
 8002fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0203 	and.w	r2, r3, #3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80ac 	beq.w	8003146 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	4b5e      	ldr	r3, [pc, #376]	; (8003168 <HAL_GPIO_Init+0x32c>)
 8002ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff2:	4a5d      	ldr	r2, [pc, #372]	; (8003168 <HAL_GPIO_Init+0x32c>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8002ffa:	4b5b      	ldr	r3, [pc, #364]	; (8003168 <HAL_GPIO_Init+0x32c>)
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003006:	4a59      	ldr	r2, [pc, #356]	; (800316c <HAL_GPIO_Init+0x330>)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	089b      	lsrs	r3, r3, #2
 800300c:	3302      	adds	r3, #2
 800300e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003030:	d025      	beq.n	800307e <HAL_GPIO_Init+0x242>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a4e      	ldr	r2, [pc, #312]	; (8003170 <HAL_GPIO_Init+0x334>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01f      	beq.n	800307a <HAL_GPIO_Init+0x23e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a4d      	ldr	r2, [pc, #308]	; (8003174 <HAL_GPIO_Init+0x338>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d019      	beq.n	8003076 <HAL_GPIO_Init+0x23a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4c      	ldr	r2, [pc, #304]	; (8003178 <HAL_GPIO_Init+0x33c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_GPIO_Init+0x236>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4b      	ldr	r2, [pc, #300]	; (800317c <HAL_GPIO_Init+0x340>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00d      	beq.n	800306e <HAL_GPIO_Init+0x232>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4a      	ldr	r2, [pc, #296]	; (8003180 <HAL_GPIO_Init+0x344>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <HAL_GPIO_Init+0x22e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a49      	ldr	r2, [pc, #292]	; (8003184 <HAL_GPIO_Init+0x348>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_GPIO_Init+0x22a>
 8003062:	2306      	movs	r3, #6
 8003064:	e00c      	b.n	8003080 <HAL_GPIO_Init+0x244>
 8003066:	2307      	movs	r3, #7
 8003068:	e00a      	b.n	8003080 <HAL_GPIO_Init+0x244>
 800306a:	2305      	movs	r3, #5
 800306c:	e008      	b.n	8003080 <HAL_GPIO_Init+0x244>
 800306e:	2304      	movs	r3, #4
 8003070:	e006      	b.n	8003080 <HAL_GPIO_Init+0x244>
 8003072:	2303      	movs	r3, #3
 8003074:	e004      	b.n	8003080 <HAL_GPIO_Init+0x244>
 8003076:	2302      	movs	r3, #2
 8003078:	e002      	b.n	8003080 <HAL_GPIO_Init+0x244>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_GPIO_Init+0x244>
 800307e:	2300      	movs	r3, #0
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	f002 0203 	and.w	r2, r2, #3
 8003086:	0092      	lsls	r2, r2, #2
 8003088:	4093      	lsls	r3, r2
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003090:	4936      	ldr	r1, [pc, #216]	; (800316c <HAL_GPIO_Init+0x330>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	3302      	adds	r3, #2
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800309e:	4b3a      	ldr	r3, [pc, #232]	; (8003188 <HAL_GPIO_Init+0x34c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030c2:	4a31      	ldr	r2, [pc, #196]	; (8003188 <HAL_GPIO_Init+0x34c>)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80030c8:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <HAL_GPIO_Init+0x34c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030ec:	4a26      	ldr	r2, [pc, #152]	; (8003188 <HAL_GPIO_Init+0x34c>)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030f2:	4b25      	ldr	r3, [pc, #148]	; (8003188 <HAL_GPIO_Init+0x34c>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003116:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <HAL_GPIO_Init+0x34c>)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <HAL_GPIO_Init+0x34c>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	43db      	mvns	r3, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003140:	4a11      	ldr	r2, [pc, #68]	; (8003188 <HAL_GPIO_Init+0x34c>)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3301      	adds	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	f47f ae78 	bne.w	8002e4c <HAL_GPIO_Init+0x10>
  }
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	40021000 	.word	0x40021000
 800316c:	40010000 	.word	0x40010000
 8003170:	48000400 	.word	0x48000400
 8003174:	48000800 	.word	0x48000800
 8003178:	48000c00 	.word	0x48000c00
 800317c:	48001000 	.word	0x48001000
 8003180:	48001400 	.word	0x48001400
 8003184:	48001800 	.word	0x48001800
 8003188:	40010400 	.word	0x40010400

0800318c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800319a:	e0cd      	b.n	8003338 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800319c:	2201      	movs	r2, #1
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80c0 	beq.w	8003332 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80031b2:	4a68      	ldr	r2, [pc, #416]	; (8003354 <HAL_GPIO_DeInit+0x1c8>)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	3302      	adds	r3, #2
 80031ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	220f      	movs	r2, #15
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031da:	d025      	beq.n	8003228 <HAL_GPIO_DeInit+0x9c>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a5e      	ldr	r2, [pc, #376]	; (8003358 <HAL_GPIO_DeInit+0x1cc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d01f      	beq.n	8003224 <HAL_GPIO_DeInit+0x98>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a5d      	ldr	r2, [pc, #372]	; (800335c <HAL_GPIO_DeInit+0x1d0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d019      	beq.n	8003220 <HAL_GPIO_DeInit+0x94>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a5c      	ldr	r2, [pc, #368]	; (8003360 <HAL_GPIO_DeInit+0x1d4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <HAL_GPIO_DeInit+0x90>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a5b      	ldr	r2, [pc, #364]	; (8003364 <HAL_GPIO_DeInit+0x1d8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00d      	beq.n	8003218 <HAL_GPIO_DeInit+0x8c>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a5a      	ldr	r2, [pc, #360]	; (8003368 <HAL_GPIO_DeInit+0x1dc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <HAL_GPIO_DeInit+0x88>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a59      	ldr	r2, [pc, #356]	; (800336c <HAL_GPIO_DeInit+0x1e0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d101      	bne.n	8003210 <HAL_GPIO_DeInit+0x84>
 800320c:	2306      	movs	r3, #6
 800320e:	e00c      	b.n	800322a <HAL_GPIO_DeInit+0x9e>
 8003210:	2307      	movs	r3, #7
 8003212:	e00a      	b.n	800322a <HAL_GPIO_DeInit+0x9e>
 8003214:	2305      	movs	r3, #5
 8003216:	e008      	b.n	800322a <HAL_GPIO_DeInit+0x9e>
 8003218:	2304      	movs	r3, #4
 800321a:	e006      	b.n	800322a <HAL_GPIO_DeInit+0x9e>
 800321c:	2303      	movs	r3, #3
 800321e:	e004      	b.n	800322a <HAL_GPIO_DeInit+0x9e>
 8003220:	2302      	movs	r3, #2
 8003222:	e002      	b.n	800322a <HAL_GPIO_DeInit+0x9e>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_GPIO_DeInit+0x9e>
 8003228:	2300      	movs	r3, #0
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	f002 0203 	and.w	r2, r2, #3
 8003230:	0092      	lsls	r2, r2, #2
 8003232:	4093      	lsls	r3, r2
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	429a      	cmp	r2, r3
 8003238:	d132      	bne.n	80032a0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800323a:	4b4d      	ldr	r3, [pc, #308]	; (8003370 <HAL_GPIO_DeInit+0x1e4>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	43db      	mvns	r3, r3
 8003242:	494b      	ldr	r1, [pc, #300]	; (8003370 <HAL_GPIO_DeInit+0x1e4>)
 8003244:	4013      	ands	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003248:	4b49      	ldr	r3, [pc, #292]	; (8003370 <HAL_GPIO_DeInit+0x1e4>)
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	43db      	mvns	r3, r3
 8003250:	4947      	ldr	r1, [pc, #284]	; (8003370 <HAL_GPIO_DeInit+0x1e4>)
 8003252:	4013      	ands	r3, r2
 8003254:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003256:	4b46      	ldr	r3, [pc, #280]	; (8003370 <HAL_GPIO_DeInit+0x1e4>)
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	4944      	ldr	r1, [pc, #272]	; (8003370 <HAL_GPIO_DeInit+0x1e4>)
 8003260:	4013      	ands	r3, r2
 8003262:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003264:	4b42      	ldr	r3, [pc, #264]	; (8003370 <HAL_GPIO_DeInit+0x1e4>)
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	43db      	mvns	r3, r3
 800326c:	4940      	ldr	r1, [pc, #256]	; (8003370 <HAL_GPIO_DeInit+0x1e4>)
 800326e:	4013      	ands	r3, r2
 8003270:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003282:	4a34      	ldr	r2, [pc, #208]	; (8003354 <HAL_GPIO_DeInit+0x1c8>)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	3302      	adds	r3, #2
 800328a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	43da      	mvns	r2, r3
 8003292:	4830      	ldr	r0, [pc, #192]	; (8003354 <HAL_GPIO_DeInit+0x1c8>)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	400a      	ands	r2, r1
 800329a:	3302      	adds	r3, #2
 800329c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2103      	movs	r1, #3
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	08da      	lsrs	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3208      	adds	r2, #8
 80032bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	220f      	movs	r2, #15
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	08d2      	lsrs	r2, r2, #3
 80032d4:	4019      	ands	r1, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3208      	adds	r2, #8
 80032da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2103      	movs	r1, #3
 80032e8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	401a      	ands	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	2101      	movs	r1, #1
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	401a      	ands	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	2103      	movs	r1, #3
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	401a      	ands	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003322:	2101      	movs	r1, #1
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	401a      	ands	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3301      	adds	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	f47f af2b 	bne.w	800319c <HAL_GPIO_DeInit+0x10>
  }
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40010000 	.word	0x40010000
 8003358:	48000400 	.word	0x48000400
 800335c:	48000800 	.word	0x48000800
 8003360:	48000c00 	.word	0x48000c00
 8003364:	48001000 	.word	0x48001000
 8003368:	48001400 	.word	0x48001400
 800336c:	48001800 	.word	0x48001800
 8003370:	40010400 	.word	0x40010400

08003374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	887b      	ldrh	r3, [r7, #2]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
 8003390:	e001      	b.n	8003396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
 80033b0:	4613      	mov	r3, r2
 80033b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b4:	787b      	ldrb	r3, [r7, #1]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033c0:	e002      	b.n	80033c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	041a      	lsls	r2, r3, #16
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	43d9      	mvns	r1, r3
 80033f2:	887b      	ldrh	r3, [r7, #2]
 80033f4:	400b      	ands	r3, r1
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d006      	beq.n	800342c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800341e:	4a05      	ldr	r2, [pc, #20]	; (8003434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f806 	bl	8003438 <HAL_GPIO_EXTI_Callback>
  }
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40010400 	.word	0x40010400

08003438 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e081      	b.n	8003564 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fe fc1d 	bl	8001cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2224      	movs	r2, #36	; 0x24
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800349e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d107      	bne.n	80034c8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	e006      	b.n	80034d6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d104      	bne.n	80034e8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034fa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800350a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	ea42 0103 	orr.w	r1, r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	021a      	lsls	r2, r3, #8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69d9      	ldr	r1, [r3, #28]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1a      	ldr	r2, [r3, #32]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0201 	orr.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e021      	b.n	80035c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2224      	movs	r2, #36	; 0x24
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0201 	bic.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fe fbd0 	bl	8001d3c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	4608      	mov	r0, r1
 80035d6:	4611      	mov	r1, r2
 80035d8:	461a      	mov	r2, r3
 80035da:	4603      	mov	r3, r0
 80035dc:	817b      	strh	r3, [r7, #10]
 80035de:	460b      	mov	r3, r1
 80035e0:	813b      	strh	r3, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	f040 80f9 	bne.w	80037e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_I2C_Mem_Write+0x34>
 80035fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003606:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0ed      	b.n	80037e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_I2C_Mem_Write+0x4e>
 8003616:	2302      	movs	r3, #2
 8003618:	e0e6      	b.n	80037e8 <HAL_I2C_Mem_Write+0x21c>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003622:	f7ff f9bf 	bl	80029a4 <HAL_GetTick>
 8003626:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2319      	movs	r3, #25
 800362e:	2201      	movs	r2, #1
 8003630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fac3 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0d1      	b.n	80037e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2221      	movs	r2, #33	; 0x21
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2240      	movs	r2, #64	; 0x40
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a3a      	ldr	r2, [r7, #32]
 800365e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003664:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800366c:	88f8      	ldrh	r0, [r7, #6]
 800366e:	893a      	ldrh	r2, [r7, #8]
 8003670:	8979      	ldrh	r1, [r7, #10]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	4603      	mov	r3, r0
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f9d3 	bl	8003a28 <I2C_RequestMemoryWrite>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0a9      	b.n	80037e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	2bff      	cmp	r3, #255	; 0xff
 800369c:	d90e      	bls.n	80036bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	22ff      	movs	r2, #255	; 0xff
 80036a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	8979      	ldrh	r1, [r7, #10]
 80036ac:	2300      	movs	r3, #0
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fba5 	bl	8003e04 <I2C_TransferConfig>
 80036ba:	e00f      	b.n	80036dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	8979      	ldrh	r1, [r7, #10]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fb94 	bl	8003e04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 faad 	bl	8003c40 <I2C_WaitOnTXISFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e07b      	b.n	80037e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d034      	beq.n	8003794 <HAL_I2C_Mem_Write+0x1c8>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	2b00      	cmp	r3, #0
 8003730:	d130      	bne.n	8003794 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	2200      	movs	r2, #0
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fa3f 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e04d      	b.n	80037e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	2bff      	cmp	r3, #255	; 0xff
 8003754:	d90e      	bls.n	8003774 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	22ff      	movs	r2, #255	; 0xff
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	b2da      	uxtb	r2, r3
 8003762:	8979      	ldrh	r1, [r7, #10]
 8003764:	2300      	movs	r3, #0
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fb49 	bl	8003e04 <I2C_TransferConfig>
 8003772:	e00f      	b.n	8003794 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	b2da      	uxtb	r2, r3
 8003784:	8979      	ldrh	r1, [r7, #10]
 8003786:	2300      	movs	r3, #0
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fb38 	bl	8003e04 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d19e      	bne.n	80036dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fa8c 	bl	8003cc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e01a      	b.n	80037e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2220      	movs	r2, #32
 80037b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <HAL_I2C_Mem_Write+0x224>)
 80037c6:	400b      	ands	r3, r1
 80037c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e000      	b.n	80037e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
  }
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	fe00e800 	.word	0xfe00e800

080037f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	4608      	mov	r0, r1
 80037fe:	4611      	mov	r1, r2
 8003800:	461a      	mov	r2, r3
 8003802:	4603      	mov	r3, r0
 8003804:	817b      	strh	r3, [r7, #10]
 8003806:	460b      	mov	r3, r1
 8003808:	813b      	strh	r3, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b20      	cmp	r3, #32
 8003818:	f040 80fd 	bne.w	8003a16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_I2C_Mem_Read+0x34>
 8003822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800382e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0f1      	b.n	8003a18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_I2C_Mem_Read+0x4e>
 800383e:	2302      	movs	r3, #2
 8003840:	e0ea      	b.n	8003a18 <HAL_I2C_Mem_Read+0x224>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800384a:	f7ff f8ab 	bl	80029a4 <HAL_GetTick>
 800384e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	2319      	movs	r3, #25
 8003856:	2201      	movs	r2, #1
 8003858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f9af 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0d5      	b.n	8003a18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2222      	movs	r2, #34	; 0x22
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2240      	movs	r2, #64	; 0x40
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a3a      	ldr	r2, [r7, #32]
 8003886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003894:	88f8      	ldrh	r0, [r7, #6]
 8003896:	893a      	ldrh	r2, [r7, #8]
 8003898:	8979      	ldrh	r1, [r7, #10]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	4603      	mov	r3, r0
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f913 	bl	8003ad0 <I2C_RequestMemoryRead>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0ad      	b.n	8003a18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2bff      	cmp	r3, #255	; 0xff
 80038c4:	d90e      	bls.n	80038e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	22ff      	movs	r2, #255	; 0xff
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	8979      	ldrh	r1, [r7, #10]
 80038d4:	4b52      	ldr	r3, [pc, #328]	; (8003a20 <HAL_I2C_Mem_Read+0x22c>)
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fa91 	bl	8003e04 <I2C_TransferConfig>
 80038e2:	e00f      	b.n	8003904 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	8979      	ldrh	r1, [r7, #10]
 80038f6:	4b4a      	ldr	r3, [pc, #296]	; (8003a20 <HAL_I2C_Mem_Read+0x22c>)
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fa80 	bl	8003e04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	2200      	movs	r2, #0
 800390c:	2104      	movs	r1, #4
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f956 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e07c      	b.n	8003a18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d034      	beq.n	80039c4 <HAL_I2C_Mem_Read+0x1d0>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d130      	bne.n	80039c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	2200      	movs	r2, #0
 800396a:	2180      	movs	r1, #128	; 0x80
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f927 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e04d      	b.n	8003a18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2bff      	cmp	r3, #255	; 0xff
 8003984:	d90e      	bls.n	80039a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	b2da      	uxtb	r2, r3
 8003992:	8979      	ldrh	r1, [r7, #10]
 8003994:	2300      	movs	r3, #0
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fa31 	bl	8003e04 <I2C_TransferConfig>
 80039a2:	e00f      	b.n	80039c4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	8979      	ldrh	r1, [r7, #10]
 80039b6:	2300      	movs	r3, #0
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fa20 	bl	8003e04 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d19a      	bne.n	8003904 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f974 	bl	8003cc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e01a      	b.n	8003a18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2220      	movs	r2, #32
 80039e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_I2C_Mem_Read+0x230>)
 80039f6:	400b      	ands	r3, r1
 80039f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	80002400 	.word	0x80002400
 8003a24:	fe00e800 	.word	0xfe00e800

08003a28 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	4608      	mov	r0, r1
 8003a32:	4611      	mov	r1, r2
 8003a34:	461a      	mov	r2, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	817b      	strh	r3, [r7, #10]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	813b      	strh	r3, [r7, #8]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	8979      	ldrh	r1, [r7, #10]
 8003a48:	4b20      	ldr	r3, [pc, #128]	; (8003acc <I2C_RequestMemoryWrite+0xa4>)
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f9d7 	bl	8003e04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	69b9      	ldr	r1, [r7, #24]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f8f0 	bl	8003c40 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e02c      	b.n	8003ac4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d105      	bne.n	8003a7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a70:	893b      	ldrh	r3, [r7, #8]
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
 8003a7a:	e015      	b.n	8003aa8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a7c:	893b      	ldrh	r3, [r7, #8]
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	69b9      	ldr	r1, [r7, #24]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f8d6 	bl	8003c40 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e012      	b.n	8003ac4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9e:	893b      	ldrh	r3, [r7, #8]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f884 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	80002000 	.word	0x80002000

08003ad0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	461a      	mov	r2, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	817b      	strh	r3, [r7, #10]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	813b      	strh	r3, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	8979      	ldrh	r1, [r7, #10]
 8003af0:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <I2C_RequestMemoryRead+0xa4>)
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2300      	movs	r3, #0
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f984 	bl	8003e04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	69b9      	ldr	r1, [r7, #24]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f89d 	bl	8003c40 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e02c      	b.n	8003b6a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d105      	bne.n	8003b22 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b16:	893b      	ldrh	r3, [r7, #8]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b20:	e015      	b.n	8003b4e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b22:	893b      	ldrh	r3, [r7, #8]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	69b9      	ldr	r1, [r7, #24]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f883 	bl	8003c40 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e012      	b.n	8003b6a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b44:	893b      	ldrh	r3, [r7, #8]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2200      	movs	r2, #0
 8003b56:	2140      	movs	r1, #64	; 0x40
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f831 	bl	8003bc0 <I2C_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	80002000 	.word	0x80002000

08003b78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d103      	bne.n	8003b96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2200      	movs	r2, #0
 8003b94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d007      	beq.n	8003bb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	619a      	str	r2, [r3, #24]
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bd0:	e022      	b.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d01e      	beq.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fe fee3 	bl	80029a4 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d113      	bne.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf4:	f043 0220 	orr.w	r2, r3, #32
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e00f      	b.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4013      	ands	r3, r2
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d0cd      	beq.n	8003bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c4c:	e02c      	b.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f870 	bl	8003d38 <I2C_IsAcknowledgeFailed>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e02a      	b.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d01e      	beq.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6a:	f7fe fe9b 	bl	80029a4 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d302      	bcc.n	8003c80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d113      	bne.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e007      	b.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d1cb      	bne.n	8003c4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ccc:	e028      	b.n	8003d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f830 	bl	8003d38 <I2C_IsAcknowledgeFailed>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e026      	b.n	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fe fe5f 	bl	80029a4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d113      	bne.n	8003d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e007      	b.n	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d1cf      	bne.n	8003cce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d151      	bne.n	8003df6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d52:	e022      	b.n	8003d9a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d01e      	beq.n	8003d9a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5c:	f7fe fe22 	bl	80029a4 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <I2C_IsAcknowledgeFailed+0x3a>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d113      	bne.n	8003d9a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f043 0220 	orr.w	r2, r3, #32
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e02e      	b.n	8003df8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d1d5      	bne.n	8003d54 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2210      	movs	r2, #16
 8003dae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2220      	movs	r2, #32
 8003db6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff fedd 	bl	8003b78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6859      	ldr	r1, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <I2C_IsAcknowledgeFailed+0xc8>)
 8003dca:	400b      	ands	r3, r1
 8003dcc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f043 0204 	orr.w	r2, r3, #4
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	fe00e800 	.word	0xfe00e800

08003e04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	817b      	strh	r3, [r7, #10]
 8003e12:	4613      	mov	r3, r2
 8003e14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	0d5b      	lsrs	r3, r3, #21
 8003e20:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e24:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <I2C_TransferConfig+0x58>)
 8003e26:	430b      	orrs	r3, r1
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	ea02 0103 	and.w	r1, r2, r3
 8003e2e:	897b      	ldrh	r3, [r7, #10]
 8003e30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e34:	7a7b      	ldrb	r3, [r7, #9]
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	03ff63ff 	.word	0x03ff63ff

08003e60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d138      	bne.n	8003ee8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e032      	b.n	8003eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	; 0x24
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003eb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6819      	ldr	r1, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b085      	sub	sp, #20
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d139      	bne.n	8003f80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e033      	b.n	8003f82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2224      	movs	r2, #36	; 0x24
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e000      	b.n	8003f82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f90:	b08f      	sub	sp, #60	; 0x3c
 8003f92:	af0a      	add	r7, sp, #40	; 0x28
 8003f94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e116      	b.n	80041ce <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd ffe0 	bl	8001f80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f002 faca 	bl	8006578 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	687e      	ldr	r6, [r7, #4]
 8003fec:	466d      	mov	r5, sp
 8003fee:	f106 0410 	add.w	r4, r6, #16
 8003ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ffe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004002:	1d33      	adds	r3, r6, #4
 8004004:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004006:	6838      	ldr	r0, [r7, #0]
 8004008:	f002 fa64 	bl	80064d4 <USB_CoreInit>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e0d7      	b.n	80041ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f002 fab8 	bl	800659a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
 800402e:	e04a      	b.n	80040c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	333d      	adds	r3, #61	; 0x3d
 8004040:	2201      	movs	r2, #1
 8004042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	333c      	adds	r3, #60	; 0x3c
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004058:	7bfa      	ldrb	r2, [r7, #15]
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	b298      	uxth	r0, r3
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	3342      	adds	r3, #66	; 0x42
 800406c:	4602      	mov	r2, r0
 800406e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004070:	7bfa      	ldrb	r2, [r7, #15]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	333f      	adds	r3, #63	; 0x3f
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004084:	7bfa      	ldrb	r2, [r7, #15]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	3344      	adds	r3, #68	; 0x44
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	3348      	adds	r3, #72	; 0x48
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040ac:	7bfa      	ldrb	r2, [r7, #15]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	3350      	adds	r3, #80	; 0x50
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	3301      	adds	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
 80040c6:	7bfa      	ldrb	r2, [r7, #15]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d3af      	bcc.n	8004030 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d0:	2300      	movs	r3, #0
 80040d2:	73fb      	strb	r3, [r7, #15]
 80040d4:	e044      	b.n	8004160 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040d6:	7bfa      	ldrb	r2, [r7, #15]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040ec:	7bfa      	ldrb	r2, [r7, #15]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004102:	7bfa      	ldrb	r2, [r7, #15]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004118:	7bfa      	ldrb	r2, [r7, #15]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800412e:	7bfa      	ldrb	r2, [r7, #15]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004144:	7bfa      	ldrb	r2, [r7, #15]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	3301      	adds	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	7bfa      	ldrb	r2, [r7, #15]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	429a      	cmp	r2, r3
 8004168:	d3b5      	bcc.n	80040d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	687e      	ldr	r6, [r7, #4]
 8004172:	466d      	mov	r5, sp
 8004174:	f106 0410 	add.w	r4, r6, #16
 8004178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800417a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800417c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800417e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004180:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004184:	e885 0003 	stmia.w	r5, {r0, r1}
 8004188:	1d33      	adds	r3, r6, #4
 800418a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800418c:	6838      	ldr	r0, [r7, #0]
 800418e:	f002 fa2f 	bl	80065f0 <USB_DevInit>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e014      	b.n	80041ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d102      	bne.n	80041c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f80a 	bl	80041d6 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f002 fbbf 	bl	800694a <USB_DevDisconnect>

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004208:	f043 0303 	orr.w	r3, r3, #3
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a04      	ldr	r2, [pc, #16]	; (800423c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800422a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40007000 	.word	0x40007000

08004240 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <HAL_PWREx_GetVoltageRange+0x18>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40007000 	.word	0x40007000

0800425c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426a:	d130      	bne.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800426c:	4b23      	ldr	r3, [pc, #140]	; (80042fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004278:	d038      	beq.n	80042ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004282:	4a1e      	ldr	r2, [pc, #120]	; (80042fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004288:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800428a:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2232      	movs	r2, #50	; 0x32
 8004290:	fb02 f303 	mul.w	r3, r2, r3
 8004294:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0c9b      	lsrs	r3, r3, #18
 800429c:	3301      	adds	r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042a0:	e002      	b.n	80042a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042a8:	4b14      	ldr	r3, [pc, #80]	; (80042fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b4:	d102      	bne.n	80042bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f2      	bne.n	80042a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c8:	d110      	bne.n	80042ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e00f      	b.n	80042ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042da:	d007      	beq.n	80042ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042dc:	4b07      	ldr	r3, [pc, #28]	; (80042fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042e4:	4a05      	ldr	r2, [pc, #20]	; (80042fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40007000 	.word	0x40007000
 8004300:	20000000 	.word	0x20000000
 8004304:	431bde83 	.word	0x431bde83

08004308 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_PWREx_EnableVddUSB+0x1c>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4a04      	ldr	r2, [pc, #16]	; (8004324 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004316:	6053      	str	r3, [r2, #4]
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40007000 	.word	0x40007000

08004328 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af02      	add	r7, sp, #8
 800432e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004330:	f7fe fb38 	bl	80029a4 <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e063      	b.n	8004408 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10b      	bne.n	8004364 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7fd fd15 	bl	8001d84 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800435a:	f241 3188 	movw	r1, #5000	; 0x1388
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f858 	bl	8004414 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	3b01      	subs	r3, #1
 8004374:	021a      	lsls	r2, r3, #8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	2120      	movs	r1, #32
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f850 	bl	8004430 <QSPI_WaitFlagStateUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004394:	7afb      	ldrb	r3, [r7, #11]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d131      	bne.n	80043fe <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043a4:	f023 0310 	bic.w	r3, r3, #16
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6852      	ldr	r2, [r2, #4]
 80043ac:	0611      	lsls	r1, r2, #24
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68d2      	ldr	r2, [r2, #12]
 80043b2:	4311      	orrs	r1, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6812      	ldr	r2, [r2, #0]
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_QSPI_Init+0xe8>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6912      	ldr	r2, [r2, #16]
 80043ca:	0411      	lsls	r1, r2, #16
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6952      	ldr	r2, [r2, #20]
 80043d0:	4311      	orrs	r1, r2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6992      	ldr	r2, [r2, #24]
 80043d6:	4311      	orrs	r1, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	430b      	orrs	r3, r1
 80043de:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004406:	7afb      	ldrb	r3, [r7, #11]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	ffe0f8fe 	.word	0xffe0f8fe

08004414 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004440:	e01a      	b.n	8004478 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d016      	beq.n	8004478 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444a:	f7fe faab 	bl	80029a4 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2204      	movs	r2, #4
 8004464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	f043 0201 	orr.w	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e00e      	b.n	8004496 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4013      	ands	r3, r2
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	429a      	cmp	r2, r3
 8004492:	d1d6      	bne.n	8004442 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e3d4      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b2:	4ba1      	ldr	r3, [pc, #644]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044bc:	4b9e      	ldr	r3, [pc, #632]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80e4 	beq.w	800469c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <HAL_RCC_OscConfig+0x4a>
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b0c      	cmp	r3, #12
 80044de:	f040 808b 	bne.w	80045f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	f040 8087 	bne.w	80045f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ea:	4b93      	ldr	r3, [pc, #588]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_RCC_OscConfig+0x62>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e3ac      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1a      	ldr	r2, [r3, #32]
 8004506:	4b8c      	ldr	r3, [pc, #560]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <HAL_RCC_OscConfig+0x7c>
 8004512:	4b89      	ldr	r3, [pc, #548]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800451a:	e005      	b.n	8004528 <HAL_RCC_OscConfig+0x88>
 800451c:	4b86      	ldr	r3, [pc, #536]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 800451e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004528:	4293      	cmp	r3, r2
 800452a:	d223      	bcs.n	8004574 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fd3f 	bl	8004fb4 <RCC_SetFlashLatencyFromMSIRange>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e38d      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004540:	4b7d      	ldr	r3, [pc, #500]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a7c      	ldr	r2, [pc, #496]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004546:	f043 0308 	orr.w	r3, r3, #8
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4b7a      	ldr	r3, [pc, #488]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	4977      	ldr	r1, [pc, #476]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800455e:	4b76      	ldr	r3, [pc, #472]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	4972      	ldr	r1, [pc, #456]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]
 8004572:	e025      	b.n	80045c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004574:	4b70      	ldr	r3, [pc, #448]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a6f      	ldr	r2, [pc, #444]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 800457a:	f043 0308 	orr.w	r3, r3, #8
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b6d      	ldr	r3, [pc, #436]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	496a      	ldr	r1, [pc, #424]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004592:	4b69      	ldr	r3, [pc, #420]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	021b      	lsls	r3, r3, #8
 80045a0:	4965      	ldr	r1, [pc, #404]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fcff 	bl	8004fb4 <RCC_SetFlashLatencyFromMSIRange>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e34d      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045c0:	f000 fc36 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 80045c4:	4601      	mov	r1, r0
 80045c6:	4b5c      	ldr	r3, [pc, #368]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	4a5a      	ldr	r2, [pc, #360]	; (800473c <HAL_RCC_OscConfig+0x29c>)
 80045d2:	5cd3      	ldrb	r3, [r2, r3]
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	fa21 f303 	lsr.w	r3, r1, r3
 80045dc:	4a58      	ldr	r2, [pc, #352]	; (8004740 <HAL_RCC_OscConfig+0x2a0>)
 80045de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045e0:	4b58      	ldr	r3, [pc, #352]	; (8004744 <HAL_RCC_OscConfig+0x2a4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fe f98d 	bl	8002904 <HAL_InitTick>
 80045ea:	4603      	mov	r3, r0
 80045ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d052      	beq.n	800469a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	e331      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d032      	beq.n	8004666 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004600:	4b4d      	ldr	r3, [pc, #308]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a4c      	ldr	r2, [pc, #304]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800460c:	f7fe f9ca 	bl	80029a4 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004614:	f7fe f9c6 	bl	80029a4 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e31a      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004626:	4b44      	ldr	r3, [pc, #272]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004632:	4b41      	ldr	r3, [pc, #260]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a40      	ldr	r2, [pc, #256]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004638:	f043 0308 	orr.w	r3, r3, #8
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	4b3e      	ldr	r3, [pc, #248]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	493b      	ldr	r1, [pc, #236]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004650:	4b39      	ldr	r3, [pc, #228]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	4936      	ldr	r1, [pc, #216]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
 8004664:	e01a      	b.n	800469c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004666:	4b34      	ldr	r3, [pc, #208]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a33      	ldr	r2, [pc, #204]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004672:	f7fe f997 	bl	80029a4 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800467a:	f7fe f993 	bl	80029a4 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e2e7      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800468c:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x1da>
 8004698:	e000      	b.n	800469c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800469a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d074      	beq.n	8004792 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d005      	beq.n	80046ba <HAL_RCC_OscConfig+0x21a>
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b0c      	cmp	r3, #12
 80046b2:	d10e      	bne.n	80046d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d10b      	bne.n	80046d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ba:	4b1f      	ldr	r3, [pc, #124]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d064      	beq.n	8004790 <HAL_RCC_OscConfig+0x2f0>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d160      	bne.n	8004790 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e2c4      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046da:	d106      	bne.n	80046ea <HAL_RCC_OscConfig+0x24a>
 80046dc:	4b16      	ldr	r3, [pc, #88]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a15      	ldr	r2, [pc, #84]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 80046e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	e01d      	b.n	8004726 <HAL_RCC_OscConfig+0x286>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046f2:	d10c      	bne.n	800470e <HAL_RCC_OscConfig+0x26e>
 80046f4:	4b10      	ldr	r3, [pc, #64]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a0f      	ldr	r2, [pc, #60]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 80046fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0c      	ldr	r2, [pc, #48]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	e00b      	b.n	8004726 <HAL_RCC_OscConfig+0x286>
 800470e:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a09      	ldr	r2, [pc, #36]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a06      	ldr	r2, [pc, #24]	; (8004738 <HAL_RCC_OscConfig+0x298>)
 8004720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004724:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01c      	beq.n	8004768 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472e:	f7fe f939 	bl	80029a4 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004734:	e011      	b.n	800475a <HAL_RCC_OscConfig+0x2ba>
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	080085a4 	.word	0x080085a4
 8004740:	20000000 	.word	0x20000000
 8004744:	20000024 	.word	0x20000024
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004748:	f7fe f92c 	bl	80029a4 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b64      	cmp	r3, #100	; 0x64
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e280      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800475a:	4baf      	ldr	r3, [pc, #700]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0x2a8>
 8004766:	e014      	b.n	8004792 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fe f91c 	bl	80029a4 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004770:	f7fe f918 	bl	80029a4 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b64      	cmp	r3, #100	; 0x64
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e26c      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004782:	4ba5      	ldr	r3, [pc, #660]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x2d0>
 800478e:	e000      	b.n	8004792 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d060      	beq.n	8004860 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_OscConfig+0x310>
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b0c      	cmp	r3, #12
 80047a8:	d119      	bne.n	80047de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d116      	bne.n	80047de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047b0:	4b99      	ldr	r3, [pc, #612]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_RCC_OscConfig+0x328>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e249      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c8:	4b93      	ldr	r3, [pc, #588]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	061b      	lsls	r3, r3, #24
 80047d6:	4990      	ldr	r1, [pc, #576]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047dc:	e040      	b.n	8004860 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d023      	beq.n	800482e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e6:	4b8c      	ldr	r3, [pc, #560]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a8b      	ldr	r2, [pc, #556]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f2:	f7fe f8d7 	bl	80029a4 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047fa:	f7fe f8d3 	bl	80029a4 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e227      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800480c:	4b82      	ldr	r3, [pc, #520]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004818:	4b7f      	ldr	r3, [pc, #508]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	061b      	lsls	r3, r3, #24
 8004826:	497c      	ldr	r1, [pc, #496]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004828:	4313      	orrs	r3, r2
 800482a:	604b      	str	r3, [r1, #4]
 800482c:	e018      	b.n	8004860 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482e:	4b7a      	ldr	r3, [pc, #488]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a79      	ldr	r2, [pc, #484]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7fe f8b3 	bl	80029a4 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004842:	f7fe f8af 	bl	80029a4 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e203      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004854:	4b70      	ldr	r3, [pc, #448]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d03c      	beq.n	80048e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01c      	beq.n	80048ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004874:	4b68      	ldr	r3, [pc, #416]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800487a:	4a67      	ldr	r2, [pc, #412]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fe f88e 	bl	80029a4 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800488c:	f7fe f88a 	bl	80029a4 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e1de      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800489e:	4b5e      	ldr	r3, [pc, #376]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80048a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0ef      	beq.n	800488c <HAL_RCC_OscConfig+0x3ec>
 80048ac:	e01b      	b.n	80048e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ae:	4b5a      	ldr	r3, [pc, #360]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80048b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b4:	4a58      	ldr	r2, [pc, #352]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048be:	f7fe f871 	bl	80029a4 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c6:	f7fe f86d 	bl	80029a4 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e1c1      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048d8:	4b4f      	ldr	r3, [pc, #316]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1ef      	bne.n	80048c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 80a6 	beq.w	8004a40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f4:	2300      	movs	r3, #0
 80048f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048f8:	4b47      	ldr	r3, [pc, #284]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80048fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10d      	bne.n	8004920 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004904:	4b44      	ldr	r3, [pc, #272]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004908:	4a43      	ldr	r2, [pc, #268]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 800490a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490e:	6593      	str	r3, [r2, #88]	; 0x58
 8004910:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491c:	2301      	movs	r3, #1
 800491e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004920:	4b3e      	ldr	r3, [pc, #248]	; (8004a1c <HAL_RCC_OscConfig+0x57c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d118      	bne.n	800495e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800492c:	4b3b      	ldr	r3, [pc, #236]	; (8004a1c <HAL_RCC_OscConfig+0x57c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3a      	ldr	r2, [pc, #232]	; (8004a1c <HAL_RCC_OscConfig+0x57c>)
 8004932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004936:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004938:	f7fe f834 	bl	80029a4 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004940:	f7fe f830 	bl	80029a4 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e184      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004952:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <HAL_RCC_OscConfig+0x57c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d108      	bne.n	8004978 <HAL_RCC_OscConfig+0x4d8>
 8004966:	4b2c      	ldr	r3, [pc, #176]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496c:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004976:	e024      	b.n	80049c2 <HAL_RCC_OscConfig+0x522>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b05      	cmp	r3, #5
 800497e:	d110      	bne.n	80049a2 <HAL_RCC_OscConfig+0x502>
 8004980:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	4a24      	ldr	r2, [pc, #144]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004988:	f043 0304 	orr.w	r3, r3, #4
 800498c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004990:	4b21      	ldr	r3, [pc, #132]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	4a20      	ldr	r2, [pc, #128]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049a0:	e00f      	b.n	80049c2 <HAL_RCC_OscConfig+0x522>
 80049a2:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80049a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a8:	4a1b      	ldr	r2, [pc, #108]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049b2:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80049ba:	f023 0304 	bic.w	r3, r3, #4
 80049be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d016      	beq.n	80049f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ca:	f7fd ffeb 	bl	80029a4 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d0:	e00a      	b.n	80049e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fd ffe7 	bl	80029a4 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e139      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_RCC_OscConfig+0x578>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0ed      	beq.n	80049d2 <HAL_RCC_OscConfig+0x532>
 80049f6:	e01a      	b.n	8004a2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fd ffd4 	bl	80029a4 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049fe:	e00f      	b.n	8004a20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fd ffd0 	bl	80029a4 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d906      	bls.n	8004a20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e122      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a20:	4b90      	ldr	r3, [pc, #576]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e8      	bne.n	8004a00 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a2e:	7ffb      	ldrb	r3, [r7, #31]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d105      	bne.n	8004a40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a34:	4b8b      	ldr	r3, [pc, #556]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a38:	4a8a      	ldr	r2, [pc, #552]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8108 	beq.w	8004c5a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	f040 80d0 	bne.w	8004bf4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a54:	4b83      	ldr	r3, [pc, #524]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f003 0203 	and.w	r2, r3, #3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d130      	bne.n	8004aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	3b01      	subs	r3, #1
 8004a74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d127      	bne.n	8004aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d11f      	bne.n	8004aca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a94:	2a07      	cmp	r2, #7
 8004a96:	bf14      	ite	ne
 8004a98:	2201      	movne	r2, #1
 8004a9a:	2200      	moveq	r2, #0
 8004a9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d113      	bne.n	8004aca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d109      	bne.n	8004aca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d06e      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	d069      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ad0:	4b64      	ldr	r3, [pc, #400]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004adc:	4b61      	ldr	r3, [pc, #388]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0b7      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004aec:	4b5d      	ldr	r3, [pc, #372]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a5c      	ldr	r2, [pc, #368]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004af6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004af8:	f7fd ff54 	bl	80029a4 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b00:	f7fd ff50 	bl	80029a4 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0a4      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b12:	4b54      	ldr	r3, [pc, #336]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b1e:	4b51      	ldr	r3, [pc, #324]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	4b51      	ldr	r3, [pc, #324]	; (8004c68 <HAL_RCC_OscConfig+0x7c8>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b2e:	3a01      	subs	r2, #1
 8004b30:	0112      	lsls	r2, r2, #4
 8004b32:	4311      	orrs	r1, r2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b38:	0212      	lsls	r2, r2, #8
 8004b3a:	4311      	orrs	r1, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b40:	0852      	lsrs	r2, r2, #1
 8004b42:	3a01      	subs	r2, #1
 8004b44:	0552      	lsls	r2, r2, #21
 8004b46:	4311      	orrs	r1, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b4c:	0852      	lsrs	r2, r2, #1
 8004b4e:	3a01      	subs	r2, #1
 8004b50:	0652      	lsls	r2, r2, #25
 8004b52:	4311      	orrs	r1, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b58:	0912      	lsrs	r2, r2, #4
 8004b5a:	0452      	lsls	r2, r2, #17
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	4941      	ldr	r1, [pc, #260]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b64:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a3e      	ldr	r2, [pc, #248]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b70:	4b3c      	ldr	r3, [pc, #240]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	4a3b      	ldr	r2, [pc, #236]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b7c:	f7fd ff12 	bl	80029a4 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b84:	f7fd ff0e 	bl	80029a4 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e062      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b96:	4b33      	ldr	r3, [pc, #204]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ba2:	e05a      	b.n	8004c5a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e059      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba8:	4b2e      	ldr	r3, [pc, #184]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d152      	bne.n	8004c5a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bb4:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a2a      	ldr	r2, [pc, #168]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bc0:	4b28      	ldr	r3, [pc, #160]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4a27      	ldr	r2, [pc, #156]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bcc:	f7fd feea 	bl	80029a4 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fd fee6 	bl	80029a4 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e03a      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be6:	4b1f      	ldr	r3, [pc, #124]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x734>
 8004bf2:	e032      	b.n	8004c5a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b0c      	cmp	r3, #12
 8004bf8:	d02d      	beq.n	8004c56 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfa:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a19      	ldr	r2, [pc, #100]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c04:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c06:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d105      	bne.n	8004c1e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c12:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004c18:	f023 0303 	bic.w	r3, r3, #3
 8004c1c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	4a10      	ldr	r2, [pc, #64]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004c24:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fd feb9 	bl	80029a4 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c36:	f7fd feb5 	bl	80029a4 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e009      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <HAL_RCC_OscConfig+0x7c4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f0      	bne.n	8004c36 <HAL_RCC_OscConfig+0x796>
 8004c54:	e001      	b.n	8004c5a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3720      	adds	r7, #32
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40021000 	.word	0x40021000
 8004c68:	f99d808c 	.word	0xf99d808c

08004c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0c8      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c80:	4b66      	ldr	r3, [pc, #408]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d910      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b63      	ldr	r3, [pc, #396]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 0207 	bic.w	r2, r3, #7
 8004c96:	4961      	ldr	r1, [pc, #388]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b5f      	ldr	r3, [pc, #380]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0b0      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d04c      	beq.n	8004d56 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d107      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc4:	4b56      	ldr	r3, [pc, #344]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d121      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e09e      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d107      	bne.n	8004cec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cdc:	4b50      	ldr	r3, [pc, #320]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d115      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e092      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d107      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cf4:	4b4a      	ldr	r3, [pc, #296]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e086      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d04:	4b46      	ldr	r3, [pc, #280]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e07e      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d14:	4b42      	ldr	r3, [pc, #264]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f023 0203 	bic.w	r2, r3, #3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	493f      	ldr	r1, [pc, #252]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d26:	f7fd fe3d 	bl	80029a4 <HAL_GetTick>
 8004d2a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2e:	f7fd fe39 	bl	80029a4 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e066      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d44:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 020c 	and.w	r2, r3, #12
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d1eb      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d62:	4b2f      	ldr	r3, [pc, #188]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	492c      	ldr	r1, [pc, #176]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d74:	4b29      	ldr	r3, [pc, #164]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d210      	bcs.n	8004da4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d82:	4b26      	ldr	r3, [pc, #152]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f023 0207 	bic.w	r2, r3, #7
 8004d8a:	4924      	ldr	r1, [pc, #144]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d92:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <HAL_RCC_ClockConfig+0x1b0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d001      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e036      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004db0:	4b1b      	ldr	r3, [pc, #108]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4918      	ldr	r1, [pc, #96]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dce:	4b14      	ldr	r3, [pc, #80]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4910      	ldr	r1, [pc, #64]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004de2:	f000 f825 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8004de6:	4601      	mov	r1, r0
 8004de8:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <HAL_RCC_ClockConfig+0x1b4>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	091b      	lsrs	r3, r3, #4
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	4a0c      	ldr	r2, [pc, #48]	; (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004df4:	5cd3      	ldrb	r3, [r2, r3]
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8004dfe:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e02:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fd fd7c 	bl	8002904 <HAL_InitTick>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e10:	7afb      	ldrb	r3, [r7, #11]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40022000 	.word	0x40022000
 8004e20:	40021000 	.word	0x40021000
 8004e24:	080085a4 	.word	0x080085a4
 8004e28:	20000000 	.word	0x20000000
 8004e2c:	20000024 	.word	0x20000024

08004e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	; 0x24
 8004e34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e3e:	4b3d      	ldr	r3, [pc, #244]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
 8004e46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e48:	4b3a      	ldr	r3, [pc, #232]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0x34>
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d121      	bne.n	8004ea2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d11e      	bne.n	8004ea2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e64:	4b33      	ldr	r3, [pc, #204]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d107      	bne.n	8004e80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e70:	4b30      	ldr	r3, [pc, #192]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e76:	0a1b      	lsrs	r3, r3, #8
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	e005      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e80:	4b2c      	ldr	r3, [pc, #176]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e8c:	4a2a      	ldr	r2, [pc, #168]	; (8004f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10d      	bne.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d102      	bne.n	8004eae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ea8:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	e004      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004eb4:	4b22      	ldr	r3, [pc, #136]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b0c      	cmp	r3, #12
 8004ebc:	d133      	bne.n	8004f26 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ebe:	4b1d      	ldr	r3, [pc, #116]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d002      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0xa4>
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d003      	beq.n	8004eda <HAL_RCC_GetSysClockFreq+0xaa>
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ed4:	4b19      	ldr	r3, [pc, #100]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ed6:	617b      	str	r3, [r7, #20]
      break;
 8004ed8:	e005      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004eda:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8004edc:	617b      	str	r3, [r7, #20]
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	617b      	str	r3, [r7, #20]
      break;
 8004ee4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ee6:	4b13      	ldr	r3, [pc, #76]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	0a1b      	lsrs	r3, r3, #8
 8004efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	fb02 f203 	mul.w	r2, r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f0c:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	0e5b      	lsrs	r3, r3, #25
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	3301      	adds	r3, #1
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f26:	69bb      	ldr	r3, [r7, #24]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3724      	adds	r7, #36	; 0x24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40021000 	.word	0x40021000
 8004f38:	080085bc 	.word	0x080085bc
 8004f3c:	00f42400 	.word	0x00f42400
 8004f40:	007a1200 	.word	0x007a1200

08004f44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	20000000 	.word	0x20000000

08004f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f60:	f7ff fff0 	bl	8004f44 <HAL_RCC_GetHCLKFreq>
 8004f64:	4601      	mov	r1, r0
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	4a04      	ldr	r2, [pc, #16]	; (8004f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f72:	5cd3      	ldrb	r3, [r2, r3]
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40021000 	.word	0x40021000
 8004f84:	080085b4 	.word	0x080085b4

08004f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f8c:	f7ff ffda 	bl	8004f44 <HAL_RCC_GetHCLKFreq>
 8004f90:	4601      	mov	r1, r0
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	0adb      	lsrs	r3, r3, #11
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f9e:	5cd3      	ldrb	r3, [r2, r3]
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	080085b4 	.word	0x080085b4

08004fb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fc0:	4b2a      	ldr	r3, [pc, #168]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fcc:	f7ff f938 	bl	8004240 <HAL_PWREx_GetVoltageRange>
 8004fd0:	6178      	str	r0, [r7, #20]
 8004fd2:	e014      	b.n	8004ffe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fd4:	4b25      	ldr	r3, [pc, #148]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd8:	4a24      	ldr	r2, [pc, #144]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fde:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe0:	4b22      	ldr	r3, [pc, #136]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fec:	f7ff f928 	bl	8004240 <HAL_PWREx_GetVoltageRange>
 8004ff0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ff2:	4b1e      	ldr	r3, [pc, #120]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff6:	4a1d      	ldr	r2, [pc, #116]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005004:	d10b      	bne.n	800501e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b80      	cmp	r3, #128	; 0x80
 800500a:	d919      	bls.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2ba0      	cmp	r3, #160	; 0xa0
 8005010:	d902      	bls.n	8005018 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005012:	2302      	movs	r3, #2
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	e013      	b.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005018:	2301      	movs	r3, #1
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	e010      	b.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b80      	cmp	r3, #128	; 0x80
 8005022:	d902      	bls.n	800502a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005024:	2303      	movs	r3, #3
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	e00a      	b.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b80      	cmp	r3, #128	; 0x80
 800502e:	d102      	bne.n	8005036 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005030:	2302      	movs	r3, #2
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	e004      	b.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b70      	cmp	r3, #112	; 0x70
 800503a:	d101      	bne.n	8005040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800503c:	2301      	movs	r3, #1
 800503e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f023 0207 	bic.w	r2, r3, #7
 8005048:	4909      	ldr	r1, [pc, #36]	; (8005070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	429a      	cmp	r2, r3
 800505c:	d001      	beq.n	8005062 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40021000 	.word	0x40021000
 8005070:	40022000 	.word	0x40022000

08005074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800507c:	2300      	movs	r3, #0
 800507e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005080:	2300      	movs	r3, #0
 8005082:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800508c:	2b00      	cmp	r3, #0
 800508e:	d03f      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005098:	d01c      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800509a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800509e:	d802      	bhi.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00e      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80050a4:	e01f      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80050a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050aa:	d003      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80050ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050b0:	d01c      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 80050b2:	e018      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050b4:	4b85      	ldr	r3, [pc, #532]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4a84      	ldr	r2, [pc, #528]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050c0:	e015      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3304      	adds	r3, #4
 80050c6:	2100      	movs	r1, #0
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fac9 	bl	8005660 <RCCEx_PLLSAI1_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050d2:	e00c      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3320      	adds	r3, #32
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fbb0 	bl	8005840 <RCCEx_PLLSAI2_Config>
 80050e0:	4603      	mov	r3, r0
 80050e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050e4:	e003      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	74fb      	strb	r3, [r7, #19]
      break;
 80050ea:	e000      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80050ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ee:	7cfb      	ldrb	r3, [r7, #19]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10b      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050f4:	4b75      	ldr	r3, [pc, #468]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005102:	4972      	ldr	r1, [pc, #456]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800510a:	e001      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510c:	7cfb      	ldrb	r3, [r7, #19]
 800510e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d03f      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005124:	d01c      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005126:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800512a:	d802      	bhi.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00e      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005130:	e01f      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005136:	d003      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005138:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800513c:	d01c      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800513e:	e018      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005140:	4b62      	ldr	r3, [pc, #392]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	4a61      	ldr	r2, [pc, #388]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800514c:	e015      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3304      	adds	r3, #4
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fa83 	bl	8005660 <RCCEx_PLLSAI1_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800515e:	e00c      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3320      	adds	r3, #32
 8005164:	2100      	movs	r1, #0
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fb6a 	bl	8005840 <RCCEx_PLLSAI2_Config>
 800516c:	4603      	mov	r3, r0
 800516e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005170:	e003      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	74fb      	strb	r3, [r7, #19]
      break;
 8005176:	e000      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800517a:	7cfb      	ldrb	r3, [r7, #19]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10b      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005180:	4b52      	ldr	r3, [pc, #328]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800518e:	494f      	ldr	r1, [pc, #316]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005196:	e001      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	7cfb      	ldrb	r3, [r7, #19]
 800519a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80a0 	beq.w	80052ea <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051aa:	2300      	movs	r3, #0
 80051ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051ae:	4b47      	ldr	r3, [pc, #284]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80051be:	2300      	movs	r3, #0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00d      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051c4:	4b41      	ldr	r3, [pc, #260]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	4a40      	ldr	r2, [pc, #256]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ce:	6593      	str	r3, [r2, #88]	; 0x58
 80051d0:	4b3e      	ldr	r3, [pc, #248]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051dc:	2301      	movs	r3, #1
 80051de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051e0:	4b3b      	ldr	r3, [pc, #236]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a3a      	ldr	r2, [pc, #232]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051ec:	f7fd fbda 	bl	80029a4 <HAL_GetTick>
 80051f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051f2:	e009      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f4:	f7fd fbd6 	bl	80029a4 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d902      	bls.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	74fb      	strb	r3, [r7, #19]
        break;
 8005206:	e005      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005208:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0ef      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d15c      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800521a:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005224:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01f      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	429a      	cmp	r2, r3
 8005236:	d019      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005238:	4b24      	ldr	r3, [pc, #144]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005242:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005244:	4b21      	ldr	r3, [pc, #132]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524a:	4a20      	ldr	r2, [pc, #128]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800524c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800525c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d016      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005276:	f7fd fb95 	bl	80029a4 <HAL_GetTick>
 800527a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800527c:	e00b      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527e:	f7fd fb91 	bl	80029a4 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f241 3288 	movw	r2, #5000	; 0x1388
 800528c:	4293      	cmp	r3, r2
 800528e:	d902      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	74fb      	strb	r3, [r7, #19]
            break;
 8005294:	e006      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ec      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10c      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052aa:	4b08      	ldr	r3, [pc, #32]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ba:	4904      	ldr	r1, [pc, #16]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052c2:	e009      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052c4:	7cfb      	ldrb	r3, [r7, #19]
 80052c6:	74bb      	strb	r3, [r7, #18]
 80052c8:	e006      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d4:	7cfb      	ldrb	r3, [r7, #19]
 80052d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052d8:	7c7b      	ldrb	r3, [r7, #17]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d105      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052de:	4b9e      	ldr	r3, [pc, #632]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e2:	4a9d      	ldr	r2, [pc, #628]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052f6:	4b98      	ldr	r3, [pc, #608]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fc:	f023 0203 	bic.w	r2, r3, #3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	4994      	ldr	r1, [pc, #592]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005318:	4b8f      	ldr	r3, [pc, #572]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531e:	f023 020c 	bic.w	r2, r3, #12
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005326:	498c      	ldr	r1, [pc, #560]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800533a:	4b87      	ldr	r3, [pc, #540]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	4983      	ldr	r1, [pc, #524]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800535c:	4b7e      	ldr	r3, [pc, #504]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536a:	497b      	ldr	r1, [pc, #492]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800537e:	4b76      	ldr	r3, [pc, #472]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538c:	4972      	ldr	r1, [pc, #456]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053a0:	4b6d      	ldr	r3, [pc, #436]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ae:	496a      	ldr	r1, [pc, #424]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053c2:	4b65      	ldr	r3, [pc, #404]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d0:	4961      	ldr	r1, [pc, #388]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053e4:	4b5c      	ldr	r3, [pc, #368]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f2:	4959      	ldr	r1, [pc, #356]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005406:	4b54      	ldr	r3, [pc, #336]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005414:	4950      	ldr	r1, [pc, #320]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005428:	4b4b      	ldr	r3, [pc, #300]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	4948      	ldr	r1, [pc, #288]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800544a:	4b43      	ldr	r3, [pc, #268]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005458:	493f      	ldr	r1, [pc, #252]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d028      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800546c:	4b3a      	ldr	r3, [pc, #232]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547a:	4937      	ldr	r1, [pc, #220]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800548a:	d106      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800548c:	4b32      	ldr	r3, [pc, #200]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4a31      	ldr	r2, [pc, #196]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005496:	60d3      	str	r3, [r2, #12]
 8005498:	e011      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054a2:	d10c      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	2101      	movs	r1, #1
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f8d8 	bl	8005660 <RCCEx_PLLSAI1_Config>
 80054b0:	4603      	mov	r3, r0
 80054b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054b4:	7cfb      	ldrb	r3, [r7, #19]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80054ba:	7cfb      	ldrb	r3, [r7, #19]
 80054bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d028      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054ca:	4b23      	ldr	r3, [pc, #140]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d8:	491f      	ldr	r1, [pc, #124]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054e8:	d106      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	4a1a      	ldr	r2, [pc, #104]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054f4:	60d3      	str	r3, [r2, #12]
 80054f6:	e011      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005500:	d10c      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3304      	adds	r3, #4
 8005506:	2101      	movs	r1, #1
 8005508:	4618      	mov	r0, r3
 800550a:	f000 f8a9 	bl	8005660 <RCCEx_PLLSAI1_Config>
 800550e:	4603      	mov	r3, r0
 8005510:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005512:	7cfb      	ldrb	r3, [r7, #19]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005518:	7cfb      	ldrb	r3, [r7, #19]
 800551a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d02b      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005528:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	4908      	ldr	r1, [pc, #32]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005546:	d109      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005548:	4b03      	ldr	r3, [pc, #12]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4a02      	ldr	r2, [pc, #8]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800554e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005552:	60d3      	str	r3, [r2, #12]
 8005554:	e014      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005564:	d10c      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3304      	adds	r3, #4
 800556a:	2101      	movs	r1, #1
 800556c:	4618      	mov	r0, r3
 800556e:	f000 f877 	bl	8005660 <RCCEx_PLLSAI1_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005576:	7cfb      	ldrb	r3, [r7, #19]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800557c:	7cfb      	ldrb	r3, [r7, #19]
 800557e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d02f      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800558c:	4b2b      	ldr	r3, [pc, #172]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005592:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559a:	4928      	ldr	r1, [pc, #160]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055aa:	d10d      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	2102      	movs	r1, #2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 f854 	bl	8005660 <RCCEx_PLLSAI1_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055bc:	7cfb      	ldrb	r3, [r7, #19]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d014      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80055c2:	7cfb      	ldrb	r3, [r7, #19]
 80055c4:	74bb      	strb	r3, [r7, #18]
 80055c6:	e011      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d0:	d10c      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3320      	adds	r3, #32
 80055d6:	2102      	movs	r1, #2
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 f931 	bl	8005840 <RCCEx_PLLSAI2_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055e2:	7cfb      	ldrb	r3, [r7, #19]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80055e8:	7cfb      	ldrb	r3, [r7, #19]
 80055ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055f8:	4b10      	ldr	r3, [pc, #64]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005606:	490d      	ldr	r1, [pc, #52]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00b      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800561a:	4b08      	ldr	r3, [pc, #32]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005620:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800562a:	4904      	ldr	r1, [pc, #16]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005632:	7cbb      	ldrb	r3, [r7, #18]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40021000 	.word	0x40021000

08005640 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005644:	4b05      	ldr	r3, [pc, #20]	; (800565c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a04      	ldr	r2, [pc, #16]	; (800565c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800564a:	f043 0304 	orr.w	r3, r3, #4
 800564e:	6013      	str	r3, [r2, #0]
}
 8005650:	bf00      	nop
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40021000 	.word	0x40021000

08005660 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800566e:	4b73      	ldr	r3, [pc, #460]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d018      	beq.n	80056ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800567a:	4b70      	ldr	r3, [pc, #448]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 0203 	and.w	r2, r3, #3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d10d      	bne.n	80056a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
       ||
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005692:	4b6a      	ldr	r3, [pc, #424]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	091b      	lsrs	r3, r3, #4
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
       ||
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d044      	beq.n	8005730 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	73fb      	strb	r3, [r7, #15]
 80056aa:	e041      	b.n	8005730 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d00c      	beq.n	80056ce <RCCEx_PLLSAI1_Config+0x6e>
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d013      	beq.n	80056e0 <RCCEx_PLLSAI1_Config+0x80>
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d120      	bne.n	80056fe <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056bc:	4b5f      	ldr	r3, [pc, #380]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d11d      	bne.n	8005704 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056cc:	e01a      	b.n	8005704 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056ce:	4b5b      	ldr	r3, [pc, #364]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d116      	bne.n	8005708 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056de:	e013      	b.n	8005708 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056e0:	4b56      	ldr	r3, [pc, #344]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10f      	bne.n	800570c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056ec:	4b53      	ldr	r3, [pc, #332]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056fc:	e006      	b.n	800570c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
      break;
 8005702:	e004      	b.n	800570e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005704:	bf00      	nop
 8005706:	e002      	b.n	800570e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005708:	bf00      	nop
 800570a:	e000      	b.n	800570e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800570c:	bf00      	nop
    }

    if(status == HAL_OK)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10d      	bne.n	8005730 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005714:	4b49      	ldr	r3, [pc, #292]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6819      	ldr	r1, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	3b01      	subs	r3, #1
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	430b      	orrs	r3, r1
 800572a:	4944      	ldr	r1, [pc, #272]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 800572c:	4313      	orrs	r3, r2
 800572e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d17d      	bne.n	8005832 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005736:	4b41      	ldr	r3, [pc, #260]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a40      	ldr	r2, [pc, #256]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 800573c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005742:	f7fd f92f 	bl	80029a4 <HAL_GetTick>
 8005746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005748:	e009      	b.n	800575e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800574a:	f7fd f92b 	bl	80029a4 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d902      	bls.n	800575e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	73fb      	strb	r3, [r7, #15]
        break;
 800575c:	e005      	b.n	800576a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800575e:	4b37      	ldr	r3, [pc, #220]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1ef      	bne.n	800574a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d160      	bne.n	8005832 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d111      	bne.n	800579a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005776:	4b31      	ldr	r3, [pc, #196]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800577e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6892      	ldr	r2, [r2, #8]
 8005786:	0211      	lsls	r1, r2, #8
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	68d2      	ldr	r2, [r2, #12]
 800578c:	0912      	lsrs	r2, r2, #4
 800578e:	0452      	lsls	r2, r2, #17
 8005790:	430a      	orrs	r2, r1
 8005792:	492a      	ldr	r1, [pc, #168]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005794:	4313      	orrs	r3, r2
 8005796:	610b      	str	r3, [r1, #16]
 8005798:	e027      	b.n	80057ea <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d112      	bne.n	80057c6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057a0:	4b26      	ldr	r3, [pc, #152]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80057a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6892      	ldr	r2, [r2, #8]
 80057b0:	0211      	lsls	r1, r2, #8
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6912      	ldr	r2, [r2, #16]
 80057b6:	0852      	lsrs	r2, r2, #1
 80057b8:	3a01      	subs	r2, #1
 80057ba:	0552      	lsls	r2, r2, #21
 80057bc:	430a      	orrs	r2, r1
 80057be:	491f      	ldr	r1, [pc, #124]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	610b      	str	r3, [r1, #16]
 80057c4:	e011      	b.n	80057ea <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057c6:	4b1d      	ldr	r3, [pc, #116]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6892      	ldr	r2, [r2, #8]
 80057d6:	0211      	lsls	r1, r2, #8
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6952      	ldr	r2, [r2, #20]
 80057dc:	0852      	lsrs	r2, r2, #1
 80057de:	3a01      	subs	r2, #1
 80057e0:	0652      	lsls	r2, r2, #25
 80057e2:	430a      	orrs	r2, r1
 80057e4:	4915      	ldr	r1, [pc, #84]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057ea:	4b14      	ldr	r3, [pc, #80]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a13      	ldr	r2, [pc, #76]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f6:	f7fd f8d5 	bl	80029a4 <HAL_GetTick>
 80057fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057fc:	e009      	b.n	8005812 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057fe:	f7fd f8d1 	bl	80029a4 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d902      	bls.n	8005812 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	73fb      	strb	r3, [r7, #15]
          break;
 8005810:	e005      	b.n	800581e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005812:	4b0a      	ldr	r3, [pc, #40]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0ef      	beq.n	80057fe <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d106      	bne.n	8005832 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	4903      	ldr	r1, [pc, #12]	; (800583c <RCCEx_PLLSAI1_Config+0x1dc>)
 800582e:	4313      	orrs	r3, r2
 8005830:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005832:	7bfb      	ldrb	r3, [r7, #15]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40021000 	.word	0x40021000

08005840 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800584e:	4b68      	ldr	r3, [pc, #416]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d018      	beq.n	800588c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800585a:	4b65      	ldr	r3, [pc, #404]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0203 	and.w	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d10d      	bne.n	8005886 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
       ||
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005872:	4b5f      	ldr	r3, [pc, #380]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	091b      	lsrs	r3, r3, #4
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
       ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d044      	beq.n	8005910 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	73fb      	strb	r3, [r7, #15]
 800588a:	e041      	b.n	8005910 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d00c      	beq.n	80058ae <RCCEx_PLLSAI2_Config+0x6e>
 8005894:	2b03      	cmp	r3, #3
 8005896:	d013      	beq.n	80058c0 <RCCEx_PLLSAI2_Config+0x80>
 8005898:	2b01      	cmp	r3, #1
 800589a:	d120      	bne.n	80058de <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800589c:	4b54      	ldr	r3, [pc, #336]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d11d      	bne.n	80058e4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ac:	e01a      	b.n	80058e4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058ae:	4b50      	ldr	r3, [pc, #320]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d116      	bne.n	80058e8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058be:	e013      	b.n	80058e8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058c0:	4b4b      	ldr	r3, [pc, #300]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10f      	bne.n	80058ec <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058cc:	4b48      	ldr	r3, [pc, #288]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058dc:	e006      	b.n	80058ec <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
      break;
 80058e2:	e004      	b.n	80058ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80058e4:	bf00      	nop
 80058e6:	e002      	b.n	80058ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80058e8:	bf00      	nop
 80058ea:	e000      	b.n	80058ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80058ec:	bf00      	nop
    }

    if(status == HAL_OK)
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10d      	bne.n	8005910 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058f4:	4b3e      	ldr	r3, [pc, #248]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6819      	ldr	r1, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	3b01      	subs	r3, #1
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	430b      	orrs	r3, r1
 800590a:	4939      	ldr	r1, [pc, #228]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800590c:	4313      	orrs	r3, r2
 800590e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d167      	bne.n	80059e6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005916:	4b36      	ldr	r3, [pc, #216]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a35      	ldr	r2, [pc, #212]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800591c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005922:	f7fd f83f 	bl	80029a4 <HAL_GetTick>
 8005926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005928:	e009      	b.n	800593e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800592a:	f7fd f83b 	bl	80029a4 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d902      	bls.n	800593e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	73fb      	strb	r3, [r7, #15]
        break;
 800593c:	e005      	b.n	800594a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800593e:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1ef      	bne.n	800592a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d14a      	bne.n	80059e6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d111      	bne.n	800597a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005956:	4b26      	ldr	r3, [pc, #152]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800595e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6892      	ldr	r2, [r2, #8]
 8005966:	0211      	lsls	r1, r2, #8
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	68d2      	ldr	r2, [r2, #12]
 800596c:	0912      	lsrs	r2, r2, #4
 800596e:	0452      	lsls	r2, r2, #17
 8005970:	430a      	orrs	r2, r1
 8005972:	491f      	ldr	r1, [pc, #124]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005974:	4313      	orrs	r3, r2
 8005976:	614b      	str	r3, [r1, #20]
 8005978:	e011      	b.n	800599e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800597a:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005982:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6892      	ldr	r2, [r2, #8]
 800598a:	0211      	lsls	r1, r2, #8
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6912      	ldr	r2, [r2, #16]
 8005990:	0852      	lsrs	r2, r2, #1
 8005992:	3a01      	subs	r2, #1
 8005994:	0652      	lsls	r2, r2, #25
 8005996:	430a      	orrs	r2, r1
 8005998:	4915      	ldr	r1, [pc, #84]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800599a:	4313      	orrs	r3, r2
 800599c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800599e:	4b14      	ldr	r3, [pc, #80]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a13      	ldr	r2, [pc, #76]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059aa:	f7fc fffb 	bl	80029a4 <HAL_GetTick>
 80059ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059b0:	e009      	b.n	80059c6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059b2:	f7fc fff7 	bl	80029a4 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d902      	bls.n	80059c6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	73fb      	strb	r3, [r7, #15]
          break;
 80059c4:	e005      	b.n	80059d2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0ef      	beq.n	80059b2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059d8:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059da:	695a      	ldr	r2, [r3, #20]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	4903      	ldr	r1, [pc, #12]	; (80059f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40021000 	.word	0x40021000

080059f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e095      	b.n	8005b32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d108      	bne.n	8005a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a16:	d009      	beq.n	8005a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	61da      	str	r2, [r3, #28]
 8005a1e:	e005      	b.n	8005a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fc f9e0 	bl	8001e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a6c:	d902      	bls.n	8005a74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	e002      	b.n	8005a7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a82:	d007      	beq.n	8005a94 <HAL_SPI_Init+0xa0>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a8c:	d002      	beq.n	8005a94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	ea42 0103 	orr.w	r1, r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	0c1b      	lsrs	r3, r3, #16
 8005af0:	f003 0204 	and.w	r2, r3, #4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b10:	ea42 0103 	orr.w	r1, r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e040      	b.n	8005bce <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fc f999 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2224      	movs	r2, #36	; 0x24
 8005b66:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f8bf 	bl	8005cfc <UART_SetConfig>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e022      	b.n	8005bce <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fb3d 	bl	8006210 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ba4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bb4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0201 	orr.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fbc4 	bl	8006354 <UART_CheckIdleState>
 8005bcc:	4603      	mov	r3, r0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b08a      	sub	sp, #40	; 0x28
 8005bda:	af02      	add	r7, sp, #8
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	f040 8081 	bne.w	8005cf2 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <HAL_UART_Transmit+0x26>
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e079      	b.n	8005cf4 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_UART_Transmit+0x38>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e072      	b.n	8005cf4 <HAL_UART_Transmit+0x11e>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2221      	movs	r2, #33	; 0x21
 8005c20:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005c22:	f7fc febf 	bl	80029a4 <HAL_GetTick>
 8005c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	88fa      	ldrh	r2, [r7, #6]
 8005c34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c40:	d108      	bne.n	8005c54 <HAL_UART_Transmit+0x7e>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d104      	bne.n	8005c54 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	e003      	b.n	8005c5c <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005c64:	e02d      	b.n	8005cc2 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2180      	movs	r1, #128	; 0x80
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fbb4 	bl	80063de <UART_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e039      	b.n	8005cf4 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10b      	bne.n	8005c9e <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	881a      	ldrh	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c92:	b292      	uxth	r2, r2
 8005c94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	3302      	adds	r3, #2
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	e008      	b.n	8005cb0 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	b292      	uxth	r2, r2
 8005ca8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	3301      	adds	r3, #1
 8005cae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1cb      	bne.n	8005c66 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2140      	movs	r1, #64	; 0x40
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 fb80 	bl	80063de <UART_WaitOnFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e005      	b.n	8005cf4 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e000      	b.n	8005cf4 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005cf2:	2302      	movs	r3, #2
  }
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3720      	adds	r7, #32
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cfc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005d00:	b088      	sub	sp, #32
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4bac      	ldr	r3, [pc, #688]	; (8005fdc <UART_SetConfig+0x2e0>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6812      	ldr	r2, [r2, #0]
 8005d30:	69f9      	ldr	r1, [r7, #28]
 8005d32:	430b      	orrs	r3, r1
 8005d34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4aa2      	ldr	r2, [pc, #648]	; (8005fe0 <UART_SetConfig+0x2e4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a99      	ldr	r2, [pc, #612]	; (8005fe4 <UART_SetConfig+0x2e8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d121      	bne.n	8005dc8 <UART_SetConfig+0xcc>
 8005d84:	4b98      	ldr	r3, [pc, #608]	; (8005fe8 <UART_SetConfig+0x2ec>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d816      	bhi.n	8005dc0 <UART_SetConfig+0xc4>
 8005d92:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <UART_SetConfig+0x9c>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005da9 	.word	0x08005da9
 8005d9c:	08005db5 	.word	0x08005db5
 8005da0:	08005daf 	.word	0x08005daf
 8005da4:	08005dbb 	.word	0x08005dbb
 8005da8:	2301      	movs	r3, #1
 8005daa:	76fb      	strb	r3, [r7, #27]
 8005dac:	e0e8      	b.n	8005f80 <UART_SetConfig+0x284>
 8005dae:	2302      	movs	r3, #2
 8005db0:	76fb      	strb	r3, [r7, #27]
 8005db2:	e0e5      	b.n	8005f80 <UART_SetConfig+0x284>
 8005db4:	2304      	movs	r3, #4
 8005db6:	76fb      	strb	r3, [r7, #27]
 8005db8:	e0e2      	b.n	8005f80 <UART_SetConfig+0x284>
 8005dba:	2308      	movs	r3, #8
 8005dbc:	76fb      	strb	r3, [r7, #27]
 8005dbe:	e0df      	b.n	8005f80 <UART_SetConfig+0x284>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	76fb      	strb	r3, [r7, #27]
 8005dc4:	bf00      	nop
 8005dc6:	e0db      	b.n	8005f80 <UART_SetConfig+0x284>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a87      	ldr	r2, [pc, #540]	; (8005fec <UART_SetConfig+0x2f0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d134      	bne.n	8005e3c <UART_SetConfig+0x140>
 8005dd2:	4b85      	ldr	r3, [pc, #532]	; (8005fe8 <UART_SetConfig+0x2ec>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f003 030c 	and.w	r3, r3, #12
 8005ddc:	2b0c      	cmp	r3, #12
 8005dde:	d829      	bhi.n	8005e34 <UART_SetConfig+0x138>
 8005de0:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0xec>)
 8005de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de6:	bf00      	nop
 8005de8:	08005e1d 	.word	0x08005e1d
 8005dec:	08005e35 	.word	0x08005e35
 8005df0:	08005e35 	.word	0x08005e35
 8005df4:	08005e35 	.word	0x08005e35
 8005df8:	08005e29 	.word	0x08005e29
 8005dfc:	08005e35 	.word	0x08005e35
 8005e00:	08005e35 	.word	0x08005e35
 8005e04:	08005e35 	.word	0x08005e35
 8005e08:	08005e23 	.word	0x08005e23
 8005e0c:	08005e35 	.word	0x08005e35
 8005e10:	08005e35 	.word	0x08005e35
 8005e14:	08005e35 	.word	0x08005e35
 8005e18:	08005e2f 	.word	0x08005e2f
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	76fb      	strb	r3, [r7, #27]
 8005e20:	e0ae      	b.n	8005f80 <UART_SetConfig+0x284>
 8005e22:	2302      	movs	r3, #2
 8005e24:	76fb      	strb	r3, [r7, #27]
 8005e26:	e0ab      	b.n	8005f80 <UART_SetConfig+0x284>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	76fb      	strb	r3, [r7, #27]
 8005e2c:	e0a8      	b.n	8005f80 <UART_SetConfig+0x284>
 8005e2e:	2308      	movs	r3, #8
 8005e30:	76fb      	strb	r3, [r7, #27]
 8005e32:	e0a5      	b.n	8005f80 <UART_SetConfig+0x284>
 8005e34:	2310      	movs	r3, #16
 8005e36:	76fb      	strb	r3, [r7, #27]
 8005e38:	bf00      	nop
 8005e3a:	e0a1      	b.n	8005f80 <UART_SetConfig+0x284>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a6b      	ldr	r2, [pc, #428]	; (8005ff0 <UART_SetConfig+0x2f4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d120      	bne.n	8005e88 <UART_SetConfig+0x18c>
 8005e46:	4b68      	ldr	r3, [pc, #416]	; (8005fe8 <UART_SetConfig+0x2ec>)
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d00f      	beq.n	8005e74 <UART_SetConfig+0x178>
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d802      	bhi.n	8005e5e <UART_SetConfig+0x162>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <UART_SetConfig+0x16c>
 8005e5c:	e010      	b.n	8005e80 <UART_SetConfig+0x184>
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d005      	beq.n	8005e6e <UART_SetConfig+0x172>
 8005e62:	2b30      	cmp	r3, #48	; 0x30
 8005e64:	d009      	beq.n	8005e7a <UART_SetConfig+0x17e>
 8005e66:	e00b      	b.n	8005e80 <UART_SetConfig+0x184>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	76fb      	strb	r3, [r7, #27]
 8005e6c:	e088      	b.n	8005f80 <UART_SetConfig+0x284>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	76fb      	strb	r3, [r7, #27]
 8005e72:	e085      	b.n	8005f80 <UART_SetConfig+0x284>
 8005e74:	2304      	movs	r3, #4
 8005e76:	76fb      	strb	r3, [r7, #27]
 8005e78:	e082      	b.n	8005f80 <UART_SetConfig+0x284>
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	76fb      	strb	r3, [r7, #27]
 8005e7e:	e07f      	b.n	8005f80 <UART_SetConfig+0x284>
 8005e80:	2310      	movs	r3, #16
 8005e82:	76fb      	strb	r3, [r7, #27]
 8005e84:	bf00      	nop
 8005e86:	e07b      	b.n	8005f80 <UART_SetConfig+0x284>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a59      	ldr	r2, [pc, #356]	; (8005ff4 <UART_SetConfig+0x2f8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d120      	bne.n	8005ed4 <UART_SetConfig+0x1d8>
 8005e92:	4b55      	ldr	r3, [pc, #340]	; (8005fe8 <UART_SetConfig+0x2ec>)
 8005e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	d00f      	beq.n	8005ec0 <UART_SetConfig+0x1c4>
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	d802      	bhi.n	8005eaa <UART_SetConfig+0x1ae>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <UART_SetConfig+0x1b8>
 8005ea8:	e010      	b.n	8005ecc <UART_SetConfig+0x1d0>
 8005eaa:	2b80      	cmp	r3, #128	; 0x80
 8005eac:	d005      	beq.n	8005eba <UART_SetConfig+0x1be>
 8005eae:	2bc0      	cmp	r3, #192	; 0xc0
 8005eb0:	d009      	beq.n	8005ec6 <UART_SetConfig+0x1ca>
 8005eb2:	e00b      	b.n	8005ecc <UART_SetConfig+0x1d0>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	76fb      	strb	r3, [r7, #27]
 8005eb8:	e062      	b.n	8005f80 <UART_SetConfig+0x284>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	76fb      	strb	r3, [r7, #27]
 8005ebe:	e05f      	b.n	8005f80 <UART_SetConfig+0x284>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	76fb      	strb	r3, [r7, #27]
 8005ec4:	e05c      	b.n	8005f80 <UART_SetConfig+0x284>
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	76fb      	strb	r3, [r7, #27]
 8005eca:	e059      	b.n	8005f80 <UART_SetConfig+0x284>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	76fb      	strb	r3, [r7, #27]
 8005ed0:	bf00      	nop
 8005ed2:	e055      	b.n	8005f80 <UART_SetConfig+0x284>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a47      	ldr	r2, [pc, #284]	; (8005ff8 <UART_SetConfig+0x2fc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d124      	bne.n	8005f28 <UART_SetConfig+0x22c>
 8005ede:	4b42      	ldr	r3, [pc, #264]	; (8005fe8 <UART_SetConfig+0x2ec>)
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eec:	d012      	beq.n	8005f14 <UART_SetConfig+0x218>
 8005eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef2:	d802      	bhi.n	8005efa <UART_SetConfig+0x1fe>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <UART_SetConfig+0x20c>
 8005ef8:	e012      	b.n	8005f20 <UART_SetConfig+0x224>
 8005efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005efe:	d006      	beq.n	8005f0e <UART_SetConfig+0x212>
 8005f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f04:	d009      	beq.n	8005f1a <UART_SetConfig+0x21e>
 8005f06:	e00b      	b.n	8005f20 <UART_SetConfig+0x224>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	76fb      	strb	r3, [r7, #27]
 8005f0c:	e038      	b.n	8005f80 <UART_SetConfig+0x284>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	76fb      	strb	r3, [r7, #27]
 8005f12:	e035      	b.n	8005f80 <UART_SetConfig+0x284>
 8005f14:	2304      	movs	r3, #4
 8005f16:	76fb      	strb	r3, [r7, #27]
 8005f18:	e032      	b.n	8005f80 <UART_SetConfig+0x284>
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	76fb      	strb	r3, [r7, #27]
 8005f1e:	e02f      	b.n	8005f80 <UART_SetConfig+0x284>
 8005f20:	2310      	movs	r3, #16
 8005f22:	76fb      	strb	r3, [r7, #27]
 8005f24:	bf00      	nop
 8005f26:	e02b      	b.n	8005f80 <UART_SetConfig+0x284>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a2c      	ldr	r2, [pc, #176]	; (8005fe0 <UART_SetConfig+0x2e4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d124      	bne.n	8005f7c <UART_SetConfig+0x280>
 8005f32:	4b2d      	ldr	r3, [pc, #180]	; (8005fe8 <UART_SetConfig+0x2ec>)
 8005f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f40:	d012      	beq.n	8005f68 <UART_SetConfig+0x26c>
 8005f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f46:	d802      	bhi.n	8005f4e <UART_SetConfig+0x252>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <UART_SetConfig+0x260>
 8005f4c:	e012      	b.n	8005f74 <UART_SetConfig+0x278>
 8005f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f52:	d006      	beq.n	8005f62 <UART_SetConfig+0x266>
 8005f54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f58:	d009      	beq.n	8005f6e <UART_SetConfig+0x272>
 8005f5a:	e00b      	b.n	8005f74 <UART_SetConfig+0x278>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	76fb      	strb	r3, [r7, #27]
 8005f60:	e00e      	b.n	8005f80 <UART_SetConfig+0x284>
 8005f62:	2302      	movs	r3, #2
 8005f64:	76fb      	strb	r3, [r7, #27]
 8005f66:	e00b      	b.n	8005f80 <UART_SetConfig+0x284>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	76fb      	strb	r3, [r7, #27]
 8005f6c:	e008      	b.n	8005f80 <UART_SetConfig+0x284>
 8005f6e:	2308      	movs	r3, #8
 8005f70:	76fb      	strb	r3, [r7, #27]
 8005f72:	e005      	b.n	8005f80 <UART_SetConfig+0x284>
 8005f74:	2310      	movs	r3, #16
 8005f76:	76fb      	strb	r3, [r7, #27]
 8005f78:	bf00      	nop
 8005f7a:	e001      	b.n	8005f80 <UART_SetConfig+0x284>
 8005f7c:	2310      	movs	r3, #16
 8005f7e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a16      	ldr	r2, [pc, #88]	; (8005fe0 <UART_SetConfig+0x2e4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	f040 8087 	bne.w	800609a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f8c:	7efb      	ldrb	r3, [r7, #27]
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d836      	bhi.n	8006000 <UART_SetConfig+0x304>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <UART_SetConfig+0x29c>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08006001 	.word	0x08006001
 8005fa0:	08005fc5 	.word	0x08005fc5
 8005fa4:	08006001 	.word	0x08006001
 8005fa8:	08005fcb 	.word	0x08005fcb
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08006001 	.word	0x08006001
 8005fb4:	08006001 	.word	0x08006001
 8005fb8:	08005fd3 	.word	0x08005fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fbc:	f7fe ffce 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005fc0:	6178      	str	r0, [r7, #20]
        break;
 8005fc2:	e022      	b.n	800600a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fc4:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <UART_SetConfig+0x300>)
 8005fc6:	617b      	str	r3, [r7, #20]
        break;
 8005fc8:	e01f      	b.n	800600a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fca:	f7fe ff31 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8005fce:	6178      	str	r0, [r7, #20]
        break;
 8005fd0:	e01b      	b.n	800600a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fd6:	617b      	str	r3, [r7, #20]
        break;
 8005fd8:	e017      	b.n	800600a <UART_SetConfig+0x30e>
 8005fda:	bf00      	nop
 8005fdc:	efff69f3 	.word	0xefff69f3
 8005fe0:	40008000 	.word	0x40008000
 8005fe4:	40013800 	.word	0x40013800
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	40004400 	.word	0x40004400
 8005ff0:	40004800 	.word	0x40004800
 8005ff4:	40004c00 	.word	0x40004c00
 8005ff8:	40005000 	.word	0x40005000
 8005ffc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	76bb      	strb	r3, [r7, #26]
        break;
 8006008:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 80f1 	beq.w	80061f4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4413      	add	r3, r2
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	429a      	cmp	r2, r3
 8006020:	d305      	bcc.n	800602e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	429a      	cmp	r2, r3
 800602c:	d902      	bls.n	8006034 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	76bb      	strb	r3, [r7, #26]
 8006032:	e0df      	b.n	80061f4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4619      	mov	r1, r3
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	f04f 0400 	mov.w	r4, #0
 8006044:	0214      	lsls	r4, r2, #8
 8006046:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800604a:	020b      	lsls	r3, r1, #8
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6852      	ldr	r2, [r2, #4]
 8006050:	0852      	lsrs	r2, r2, #1
 8006052:	4611      	mov	r1, r2
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	eb13 0b01 	adds.w	fp, r3, r1
 800605c:	eb44 0c02 	adc.w	ip, r4, r2
 8006060:	4658      	mov	r0, fp
 8006062:	4661      	mov	r1, ip
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f04f 0400 	mov.w	r4, #0
 800606c:	461a      	mov	r2, r3
 800606e:	4623      	mov	r3, r4
 8006070:	f7fa fd46 	bl	8000b00 <__aeabi_uldivmod>
 8006074:	4603      	mov	r3, r0
 8006076:	460c      	mov	r4, r1
 8006078:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006080:	d308      	bcc.n	8006094 <UART_SetConfig+0x398>
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006088:	d204      	bcs.n	8006094 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	60da      	str	r2, [r3, #12]
 8006092:	e0af      	b.n	80061f4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	76bb      	strb	r3, [r7, #26]
 8006098:	e0ac      	b.n	80061f4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a2:	d15b      	bne.n	800615c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80060a4:	7efb      	ldrb	r3, [r7, #27]
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d827      	bhi.n	80060fa <UART_SetConfig+0x3fe>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0x3b4>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060e5 	.word	0x080060e5
 80060bc:	080060fb 	.word	0x080060fb
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	080060fb 	.word	0x080060fb
 80060c8:	080060fb 	.word	0x080060fb
 80060cc:	080060fb 	.word	0x080060fb
 80060d0:	080060f3 	.word	0x080060f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fe ff42 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 80060d8:	6178      	str	r0, [r7, #20]
        break;
 80060da:	e013      	b.n	8006104 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fe ff54 	bl	8004f88 <HAL_RCC_GetPCLK2Freq>
 80060e0:	6178      	str	r0, [r7, #20]
        break;
 80060e2:	e00f      	b.n	8006104 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e4:	4b49      	ldr	r3, [pc, #292]	; (800620c <UART_SetConfig+0x510>)
 80060e6:	617b      	str	r3, [r7, #20]
        break;
 80060e8:	e00c      	b.n	8006104 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ea:	f7fe fea1 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 80060ee:	6178      	str	r0, [r7, #20]
        break;
 80060f0:	e008      	b.n	8006104 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f6:	617b      	str	r3, [r7, #20]
        break;
 80060f8:	e004      	b.n	8006104 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	76bb      	strb	r3, [r7, #26]
        break;
 8006102:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d074      	beq.n	80061f4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	005a      	lsls	r2, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	085b      	lsrs	r3, r3, #1
 8006114:	441a      	add	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	fbb2 f3f3 	udiv	r3, r2, r3
 800611e:	b29b      	uxth	r3, r3
 8006120:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	2b0f      	cmp	r3, #15
 8006126:	d916      	bls.n	8006156 <UART_SetConfig+0x45a>
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612e:	d212      	bcs.n	8006156 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f023 030f 	bic.w	r3, r3, #15
 8006138:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	085b      	lsrs	r3, r3, #1
 800613e:	b29b      	uxth	r3, r3
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	b29a      	uxth	r2, r3
 8006146:	89fb      	ldrh	r3, [r7, #14]
 8006148:	4313      	orrs	r3, r2
 800614a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	89fa      	ldrh	r2, [r7, #14]
 8006152:	60da      	str	r2, [r3, #12]
 8006154:	e04e      	b.n	80061f4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	76bb      	strb	r3, [r7, #26]
 800615a:	e04b      	b.n	80061f4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800615c:	7efb      	ldrb	r3, [r7, #27]
 800615e:	2b08      	cmp	r3, #8
 8006160:	d827      	bhi.n	80061b2 <UART_SetConfig+0x4b6>
 8006162:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <UART_SetConfig+0x46c>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	0800618d 	.word	0x0800618d
 800616c:	08006195 	.word	0x08006195
 8006170:	0800619d 	.word	0x0800619d
 8006174:	080061b3 	.word	0x080061b3
 8006178:	080061a3 	.word	0x080061a3
 800617c:	080061b3 	.word	0x080061b3
 8006180:	080061b3 	.word	0x080061b3
 8006184:	080061b3 	.word	0x080061b3
 8006188:	080061ab 	.word	0x080061ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800618c:	f7fe fee6 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8006190:	6178      	str	r0, [r7, #20]
        break;
 8006192:	e013      	b.n	80061bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006194:	f7fe fef8 	bl	8004f88 <HAL_RCC_GetPCLK2Freq>
 8006198:	6178      	str	r0, [r7, #20]
        break;
 800619a:	e00f      	b.n	80061bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800619c:	4b1b      	ldr	r3, [pc, #108]	; (800620c <UART_SetConfig+0x510>)
 800619e:	617b      	str	r3, [r7, #20]
        break;
 80061a0:	e00c      	b.n	80061bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061a2:	f7fe fe45 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 80061a6:	6178      	str	r0, [r7, #20]
        break;
 80061a8:	e008      	b.n	80061bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ae:	617b      	str	r3, [r7, #20]
        break;
 80061b0:	e004      	b.n	80061bc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	76bb      	strb	r3, [r7, #26]
        break;
 80061ba:	bf00      	nop
    }

    if (pclk != 0U)
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d018      	beq.n	80061f4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	085a      	lsrs	r2, r3, #1
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	441a      	add	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b0f      	cmp	r3, #15
 80061dc:	d908      	bls.n	80061f0 <UART_SetConfig+0x4f4>
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e4:	d204      	bcs.n	80061f0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	60da      	str	r2, [r3, #12]
 80061ee:	e001      	b.n	80061f4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006200:	7ebb      	ldrb	r3, [r7, #26]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800620c:	00f42400 	.word	0x00f42400

08006210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00a      	beq.n	800627e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01a      	beq.n	8006326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630e:	d10a      	bne.n	8006326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	605a      	str	r2, [r3, #4]
  }
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af02      	add	r7, sp, #8
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006362:	f7fc fb1f 	bl	80029a4 <HAL_GetTick>
 8006366:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0308 	and.w	r3, r3, #8
 8006372:	2b08      	cmp	r3, #8
 8006374:	d10e      	bne.n	8006394 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006376:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f82a 	bl	80063de <UART_WaitOnFlagUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e020      	b.n	80063d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d10e      	bne.n	80063c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f814 	bl	80063de <UART_WaitOnFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e00a      	b.n	80063d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	603b      	str	r3, [r7, #0]
 80063ea:	4613      	mov	r3, r2
 80063ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ee:	e05d      	b.n	80064ac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f6:	d059      	beq.n	80064ac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f8:	f7fc fad4 	bl	80029a4 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	429a      	cmp	r2, r3
 8006406:	d302      	bcc.n	800640e <UART_WaitOnFlagUntilTimeout+0x30>
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d11b      	bne.n	8006446 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800641c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2220      	movs	r2, #32
 8006432:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2220      	movs	r2, #32
 8006438:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e042      	b.n	80064cc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d02b      	beq.n	80064ac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800645e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006462:	d123      	bne.n	80064ac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800646c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800647c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0201 	bic.w	r2, r2, #1
 800648c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e00f      	b.n	80064cc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69da      	ldr	r2, [r3, #28]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4013      	ands	r3, r2
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	bf0c      	ite	eq
 80064bc:	2301      	moveq	r3, #1
 80064be:	2300      	movne	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d092      	beq.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064d4:	b084      	sub	sp, #16
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	f107 001c 	add.w	r0, r7, #28
 80064e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d122      	bne.n	8006532 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006516:	2b01      	cmp	r3, #1
 8006518:	d105      	bne.n	8006526 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa30 	bl	800698c <USB_CoreReset>
 800652c:	4603      	mov	r3, r0
 800652e:	73fb      	strb	r3, [r7, #15]
 8006530:	e01a      	b.n	8006568 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fa24 	bl	800698c <USB_CoreReset>
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
 800655a:	e005      	b.n	8006568 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006574:	b004      	add	sp, #16
 8006576:	4770      	bx	lr

08006578 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f023 0201 	bic.w	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b082      	sub	sp, #8
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	460b      	mov	r3, r1
 80065a4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d106      	bne.n	80065c6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60da      	str	r2, [r3, #12]
 80065c4:	e00b      	b.n	80065de <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d106      	bne.n	80065da <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60da      	str	r2, [r3, #12]
 80065d8:	e001      	b.n	80065de <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e003      	b.n	80065e6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80065de:	2032      	movs	r0, #50	; 0x32
 80065e0:	f7fc f9ec 	bl	80029bc <HAL_Delay>

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065f0:	b084      	sub	sp, #16
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	e009      	b.n	8006624 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3340      	adds	r3, #64	; 0x40
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	2200      	movs	r2, #0
 800661c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	3301      	adds	r3, #1
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b0e      	cmp	r3, #14
 8006628:	d9f2      	bls.n	8006610 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800662a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662c:	2b00      	cmp	r3, #0
 800662e:	d11c      	bne.n	800666a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800663e:	f043 0302 	orr.w	r3, r3, #2
 8006642:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	e005      	b.n	8006676 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800667c:	461a      	mov	r2, r3
 800667e:	2300      	movs	r3, #0
 8006680:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006688:	4619      	mov	r1, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	461a      	mov	r2, r3
 8006692:	680b      	ldr	r3, [r1, #0]
 8006694:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006696:	2103      	movs	r1, #3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f93d 	bl	8006918 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800669e:	2110      	movs	r1, #16
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f8f1 	bl	8006888 <USB_FlushTxFifo>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f90f 	bl	80068d4 <USB_FlushRxFifo>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c6:	461a      	mov	r2, r3
 80066c8:	2300      	movs	r3, #0
 80066ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d2:	461a      	mov	r2, r3
 80066d4:	2300      	movs	r3, #0
 80066d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	461a      	mov	r2, r3
 80066e0:	2300      	movs	r3, #0
 80066e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066e4:	2300      	movs	r3, #0
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	e043      	b.n	8006772 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006700:	d118      	bne.n	8006734 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006714:	461a      	mov	r2, r3
 8006716:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	e013      	b.n	8006746 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672a:	461a      	mov	r2, r3
 800672c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	e008      	b.n	8006746 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	461a      	mov	r2, r3
 8006742:	2300      	movs	r3, #0
 8006744:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006752:	461a      	mov	r2, r3
 8006754:	2300      	movs	r3, #0
 8006756:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	461a      	mov	r2, r3
 8006766:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800676a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	3301      	adds	r3, #1
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	429a      	cmp	r2, r3
 8006778:	d3b7      	bcc.n	80066ea <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800677a:	2300      	movs	r3, #0
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	e043      	b.n	8006808 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006796:	d118      	bne.n	80067ca <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067aa:	461a      	mov	r2, r3
 80067ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	e013      	b.n	80067dc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c0:	461a      	mov	r2, r3
 80067c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	e008      	b.n	80067dc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d6:	461a      	mov	r2, r3
 80067d8:	2300      	movs	r3, #0
 80067da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	461a      	mov	r2, r3
 80067ea:	2300      	movs	r3, #0
 80067ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fa:	461a      	mov	r2, r3
 80067fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006800:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	3301      	adds	r3, #1
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	429a      	cmp	r2, r3
 800680e:	d3b7      	bcc.n	8006780 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800681e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006822:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006830:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f043 0210 	orr.w	r2, r3, #16
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699a      	ldr	r2, [r3, #24]
 8006842:	4b10      	ldr	r3, [pc, #64]	; (8006884 <USB_DevInit+0x294>)
 8006844:	4313      	orrs	r3, r2
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800684a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f043 0208 	orr.w	r2, r3, #8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800685c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800685e:	2b01      	cmp	r3, #1
 8006860:	d107      	bne.n	8006872 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800686a:	f043 0304 	orr.w	r3, r3, #4
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800687e:	b004      	add	sp, #16
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	803c3800 	.word	0x803c3800

08006888 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	019b      	lsls	r3, r3, #6
 800689a:	f043 0220 	orr.w	r2, r3, #32
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3301      	adds	r3, #1
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <USB_FlushTxFifo+0x48>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d901      	bls.n	80068b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e006      	b.n	80068c2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	f003 0320 	and.w	r3, r3, #32
 80068bc:	2b20      	cmp	r3, #32
 80068be:	d0f0      	beq.n	80068a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	00030d40 	.word	0x00030d40

080068d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2210      	movs	r2, #16
 80068e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3301      	adds	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4a09      	ldr	r2, [pc, #36]	; (8006914 <USB_FlushRxFifo+0x40>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d901      	bls.n	80068f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e006      	b.n	8006906 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b10      	cmp	r3, #16
 8006902:	d0f0      	beq.n	80068e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	00030d40 	.word	0x00030d40

08006918 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	68f9      	ldr	r1, [r7, #12]
 8006934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006938:	4313      	orrs	r3, r2
 800693a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006964:	f023 0303 	bic.w	r3, r3, #3
 8006968:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006978:	f043 0302 	orr.w	r3, r3, #2
 800697c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3301      	adds	r3, #1
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4a13      	ldr	r2, [pc, #76]	; (80069f0 <USB_CoreReset+0x64>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d901      	bls.n	80069aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e01b      	b.n	80069e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	daf2      	bge.n	8006998 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f043 0201 	orr.w	r2, r3, #1
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3301      	adds	r3, #1
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <USB_CoreReset+0x64>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d901      	bls.n	80069d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e006      	b.n	80069e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d0f0      	beq.n	80069c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	00030d40 	.word	0x00030d40

080069f4 <__errno>:
 80069f4:	4b01      	ldr	r3, [pc, #4]	; (80069fc <__errno+0x8>)
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	2000002c 	.word	0x2000002c

08006a00 <__libc_init_array>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	4e0d      	ldr	r6, [pc, #52]	; (8006a38 <__libc_init_array+0x38>)
 8006a04:	4c0d      	ldr	r4, [pc, #52]	; (8006a3c <__libc_init_array+0x3c>)
 8006a06:	1ba4      	subs	r4, r4, r6
 8006a08:	10a4      	asrs	r4, r4, #2
 8006a0a:	2500      	movs	r5, #0
 8006a0c:	42a5      	cmp	r5, r4
 8006a0e:	d109      	bne.n	8006a24 <__libc_init_array+0x24>
 8006a10:	4e0b      	ldr	r6, [pc, #44]	; (8006a40 <__libc_init_array+0x40>)
 8006a12:	4c0c      	ldr	r4, [pc, #48]	; (8006a44 <__libc_init_array+0x44>)
 8006a14:	f001 fd48 	bl	80084a8 <_init>
 8006a18:	1ba4      	subs	r4, r4, r6
 8006a1a:	10a4      	asrs	r4, r4, #2
 8006a1c:	2500      	movs	r5, #0
 8006a1e:	42a5      	cmp	r5, r4
 8006a20:	d105      	bne.n	8006a2e <__libc_init_array+0x2e>
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
 8006a24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a28:	4798      	blx	r3
 8006a2a:	3501      	adds	r5, #1
 8006a2c:	e7ee      	b.n	8006a0c <__libc_init_array+0xc>
 8006a2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a32:	4798      	blx	r3
 8006a34:	3501      	adds	r5, #1
 8006a36:	e7f2      	b.n	8006a1e <__libc_init_array+0x1e>
 8006a38:	08008820 	.word	0x08008820
 8006a3c:	08008820 	.word	0x08008820
 8006a40:	08008820 	.word	0x08008820
 8006a44:	08008824 	.word	0x08008824

08006a48 <memcpy>:
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	1e43      	subs	r3, r0, #1
 8006a4c:	440a      	add	r2, r1
 8006a4e:	4291      	cmp	r1, r2
 8006a50:	d100      	bne.n	8006a54 <memcpy+0xc>
 8006a52:	bd10      	pop	{r4, pc}
 8006a54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a5c:	e7f7      	b.n	8006a4e <memcpy+0x6>

08006a5e <memset>:
 8006a5e:	4402      	add	r2, r0
 8006a60:	4603      	mov	r3, r0
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d100      	bne.n	8006a68 <memset+0xa>
 8006a66:	4770      	bx	lr
 8006a68:	f803 1b01 	strb.w	r1, [r3], #1
 8006a6c:	e7f9      	b.n	8006a62 <memset+0x4>

08006a6e <__cvt>:
 8006a6e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a72:	ec55 4b10 	vmov	r4, r5, d0
 8006a76:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006a78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a7c:	2d00      	cmp	r5, #0
 8006a7e:	460e      	mov	r6, r1
 8006a80:	4691      	mov	r9, r2
 8006a82:	4619      	mov	r1, r3
 8006a84:	bfb8      	it	lt
 8006a86:	4622      	movlt	r2, r4
 8006a88:	462b      	mov	r3, r5
 8006a8a:	f027 0720 	bic.w	r7, r7, #32
 8006a8e:	bfbb      	ittet	lt
 8006a90:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a94:	461d      	movlt	r5, r3
 8006a96:	2300      	movge	r3, #0
 8006a98:	232d      	movlt	r3, #45	; 0x2d
 8006a9a:	bfb8      	it	lt
 8006a9c:	4614      	movlt	r4, r2
 8006a9e:	2f46      	cmp	r7, #70	; 0x46
 8006aa0:	700b      	strb	r3, [r1, #0]
 8006aa2:	d004      	beq.n	8006aae <__cvt+0x40>
 8006aa4:	2f45      	cmp	r7, #69	; 0x45
 8006aa6:	d100      	bne.n	8006aaa <__cvt+0x3c>
 8006aa8:	3601      	adds	r6, #1
 8006aaa:	2102      	movs	r1, #2
 8006aac:	e000      	b.n	8006ab0 <__cvt+0x42>
 8006aae:	2103      	movs	r1, #3
 8006ab0:	ab03      	add	r3, sp, #12
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	ab02      	add	r3, sp, #8
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	4632      	mov	r2, r6
 8006aba:	4653      	mov	r3, sl
 8006abc:	ec45 4b10 	vmov	d0, r4, r5
 8006ac0:	f000 fbae 	bl	8007220 <_dtoa_r>
 8006ac4:	2f47      	cmp	r7, #71	; 0x47
 8006ac6:	4680      	mov	r8, r0
 8006ac8:	d102      	bne.n	8006ad0 <__cvt+0x62>
 8006aca:	f019 0f01 	tst.w	r9, #1
 8006ace:	d026      	beq.n	8006b1e <__cvt+0xb0>
 8006ad0:	2f46      	cmp	r7, #70	; 0x46
 8006ad2:	eb08 0906 	add.w	r9, r8, r6
 8006ad6:	d111      	bne.n	8006afc <__cvt+0x8e>
 8006ad8:	f898 3000 	ldrb.w	r3, [r8]
 8006adc:	2b30      	cmp	r3, #48	; 0x30
 8006ade:	d10a      	bne.n	8006af6 <__cvt+0x88>
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	f7f9 ff9a 	bl	8000a20 <__aeabi_dcmpeq>
 8006aec:	b918      	cbnz	r0, 8006af6 <__cvt+0x88>
 8006aee:	f1c6 0601 	rsb	r6, r6, #1
 8006af2:	f8ca 6000 	str.w	r6, [sl]
 8006af6:	f8da 3000 	ldr.w	r3, [sl]
 8006afa:	4499      	add	r9, r3
 8006afc:	2200      	movs	r2, #0
 8006afe:	2300      	movs	r3, #0
 8006b00:	4620      	mov	r0, r4
 8006b02:	4629      	mov	r1, r5
 8006b04:	f7f9 ff8c 	bl	8000a20 <__aeabi_dcmpeq>
 8006b08:	b938      	cbnz	r0, 8006b1a <__cvt+0xac>
 8006b0a:	2230      	movs	r2, #48	; 0x30
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	454b      	cmp	r3, r9
 8006b10:	d205      	bcs.n	8006b1e <__cvt+0xb0>
 8006b12:	1c59      	adds	r1, r3, #1
 8006b14:	9103      	str	r1, [sp, #12]
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	e7f8      	b.n	8006b0c <__cvt+0x9e>
 8006b1a:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b1e:	9b03      	ldr	r3, [sp, #12]
 8006b20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b22:	eba3 0308 	sub.w	r3, r3, r8
 8006b26:	4640      	mov	r0, r8
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	b004      	add	sp, #16
 8006b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006b30 <__exponent>:
 8006b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b32:	2900      	cmp	r1, #0
 8006b34:	4604      	mov	r4, r0
 8006b36:	bfba      	itte	lt
 8006b38:	4249      	neglt	r1, r1
 8006b3a:	232d      	movlt	r3, #45	; 0x2d
 8006b3c:	232b      	movge	r3, #43	; 0x2b
 8006b3e:	2909      	cmp	r1, #9
 8006b40:	f804 2b02 	strb.w	r2, [r4], #2
 8006b44:	7043      	strb	r3, [r0, #1]
 8006b46:	dd20      	ble.n	8006b8a <__exponent+0x5a>
 8006b48:	f10d 0307 	add.w	r3, sp, #7
 8006b4c:	461f      	mov	r7, r3
 8006b4e:	260a      	movs	r6, #10
 8006b50:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b54:	fb06 1115 	mls	r1, r6, r5, r1
 8006b58:	3130      	adds	r1, #48	; 0x30
 8006b5a:	2d09      	cmp	r5, #9
 8006b5c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b60:	f103 32ff 	add.w	r2, r3, #4294967295
 8006b64:	4629      	mov	r1, r5
 8006b66:	dc09      	bgt.n	8006b7c <__exponent+0x4c>
 8006b68:	3130      	adds	r1, #48	; 0x30
 8006b6a:	3b02      	subs	r3, #2
 8006b6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b70:	42bb      	cmp	r3, r7
 8006b72:	4622      	mov	r2, r4
 8006b74:	d304      	bcc.n	8006b80 <__exponent+0x50>
 8006b76:	1a10      	subs	r0, r2, r0
 8006b78:	b003      	add	sp, #12
 8006b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	e7e7      	b.n	8006b50 <__exponent+0x20>
 8006b80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b84:	f804 2b01 	strb.w	r2, [r4], #1
 8006b88:	e7f2      	b.n	8006b70 <__exponent+0x40>
 8006b8a:	2330      	movs	r3, #48	; 0x30
 8006b8c:	4419      	add	r1, r3
 8006b8e:	7083      	strb	r3, [r0, #2]
 8006b90:	1d02      	adds	r2, r0, #4
 8006b92:	70c1      	strb	r1, [r0, #3]
 8006b94:	e7ef      	b.n	8006b76 <__exponent+0x46>
	...

08006b98 <_printf_float>:
 8006b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	b08d      	sub	sp, #52	; 0x34
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	4605      	mov	r5, r0
 8006baa:	f001 f8f1 	bl	8007d90 <_localeconv_r>
 8006bae:	6803      	ldr	r3, [r0, #0]
 8006bb0:	9304      	str	r3, [sp, #16]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7f9 fb08 	bl	80001c8 <strlen>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	930a      	str	r3, [sp, #40]	; 0x28
 8006bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006bc0:	9005      	str	r0, [sp, #20]
 8006bc2:	3307      	adds	r3, #7
 8006bc4:	f023 0307 	bic.w	r3, r3, #7
 8006bc8:	f103 0208 	add.w	r2, r3, #8
 8006bcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006bd0:	f8d4 b000 	ldr.w	fp, [r4]
 8006bd4:	f8c8 2000 	str.w	r2, [r8]
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006be0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006be4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006be8:	9307      	str	r3, [sp, #28]
 8006bea:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bee:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf2:	4ba7      	ldr	r3, [pc, #668]	; (8006e90 <_printf_float+0x2f8>)
 8006bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bf8:	f7f9 ff44 	bl	8000a84 <__aeabi_dcmpun>
 8006bfc:	bb70      	cbnz	r0, 8006c5c <_printf_float+0xc4>
 8006bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006c02:	4ba3      	ldr	r3, [pc, #652]	; (8006e90 <_printf_float+0x2f8>)
 8006c04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c08:	f7f9 ff1e 	bl	8000a48 <__aeabi_dcmple>
 8006c0c:	bb30      	cbnz	r0, 8006c5c <_printf_float+0xc4>
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2300      	movs	r3, #0
 8006c12:	4640      	mov	r0, r8
 8006c14:	4649      	mov	r1, r9
 8006c16:	f7f9 ff0d 	bl	8000a34 <__aeabi_dcmplt>
 8006c1a:	b110      	cbz	r0, 8006c22 <_printf_float+0x8a>
 8006c1c:	232d      	movs	r3, #45	; 0x2d
 8006c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c22:	4a9c      	ldr	r2, [pc, #624]	; (8006e94 <_printf_float+0x2fc>)
 8006c24:	4b9c      	ldr	r3, [pc, #624]	; (8006e98 <_printf_float+0x300>)
 8006c26:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006c2a:	bf8c      	ite	hi
 8006c2c:	4690      	movhi	r8, r2
 8006c2e:	4698      	movls	r8, r3
 8006c30:	2303      	movs	r3, #3
 8006c32:	f02b 0204 	bic.w	r2, fp, #4
 8006c36:	6123      	str	r3, [r4, #16]
 8006c38:	6022      	str	r2, [r4, #0]
 8006c3a:	f04f 0900 	mov.w	r9, #0
 8006c3e:	9700      	str	r7, [sp, #0]
 8006c40:	4633      	mov	r3, r6
 8006c42:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c44:	4621      	mov	r1, r4
 8006c46:	4628      	mov	r0, r5
 8006c48:	f000 f9e6 	bl	8007018 <_printf_common>
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	f040 808d 	bne.w	8006d6c <_printf_float+0x1d4>
 8006c52:	f04f 30ff 	mov.w	r0, #4294967295
 8006c56:	b00d      	add	sp, #52	; 0x34
 8006c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	464b      	mov	r3, r9
 8006c60:	4640      	mov	r0, r8
 8006c62:	4649      	mov	r1, r9
 8006c64:	f7f9 ff0e 	bl	8000a84 <__aeabi_dcmpun>
 8006c68:	b110      	cbz	r0, 8006c70 <_printf_float+0xd8>
 8006c6a:	4a8c      	ldr	r2, [pc, #560]	; (8006e9c <_printf_float+0x304>)
 8006c6c:	4b8c      	ldr	r3, [pc, #560]	; (8006ea0 <_printf_float+0x308>)
 8006c6e:	e7da      	b.n	8006c26 <_printf_float+0x8e>
 8006c70:	6861      	ldr	r1, [r4, #4]
 8006c72:	1c4b      	adds	r3, r1, #1
 8006c74:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006c78:	a80a      	add	r0, sp, #40	; 0x28
 8006c7a:	d13e      	bne.n	8006cfa <_printf_float+0x162>
 8006c7c:	2306      	movs	r3, #6
 8006c7e:	6063      	str	r3, [r4, #4]
 8006c80:	2300      	movs	r3, #0
 8006c82:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006c86:	ab09      	add	r3, sp, #36	; 0x24
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	ec49 8b10 	vmov	d0, r8, r9
 8006c8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c92:	6022      	str	r2, [r4, #0]
 8006c94:	f8cd a004 	str.w	sl, [sp, #4]
 8006c98:	6861      	ldr	r1, [r4, #4]
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	f7ff fee7 	bl	8006a6e <__cvt>
 8006ca0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006ca4:	2b47      	cmp	r3, #71	; 0x47
 8006ca6:	4680      	mov	r8, r0
 8006ca8:	d109      	bne.n	8006cbe <_printf_float+0x126>
 8006caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cac:	1cd8      	adds	r0, r3, #3
 8006cae:	db02      	blt.n	8006cb6 <_printf_float+0x11e>
 8006cb0:	6862      	ldr	r2, [r4, #4]
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	dd47      	ble.n	8006d46 <_printf_float+0x1ae>
 8006cb6:	f1aa 0a02 	sub.w	sl, sl, #2
 8006cba:	fa5f fa8a 	uxtb.w	sl, sl
 8006cbe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006cc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cc4:	d824      	bhi.n	8006d10 <_printf_float+0x178>
 8006cc6:	3901      	subs	r1, #1
 8006cc8:	4652      	mov	r2, sl
 8006cca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cce:	9109      	str	r1, [sp, #36]	; 0x24
 8006cd0:	f7ff ff2e 	bl	8006b30 <__exponent>
 8006cd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cd6:	1813      	adds	r3, r2, r0
 8006cd8:	2a01      	cmp	r2, #1
 8006cda:	4681      	mov	r9, r0
 8006cdc:	6123      	str	r3, [r4, #16]
 8006cde:	dc02      	bgt.n	8006ce6 <_printf_float+0x14e>
 8006ce0:	6822      	ldr	r2, [r4, #0]
 8006ce2:	07d1      	lsls	r1, r2, #31
 8006ce4:	d501      	bpl.n	8006cea <_printf_float+0x152>
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0a5      	beq.n	8006c3e <_printf_float+0xa6>
 8006cf2:	232d      	movs	r3, #45	; 0x2d
 8006cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cf8:	e7a1      	b.n	8006c3e <_printf_float+0xa6>
 8006cfa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006cfe:	f000 8177 	beq.w	8006ff0 <_printf_float+0x458>
 8006d02:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006d06:	d1bb      	bne.n	8006c80 <_printf_float+0xe8>
 8006d08:	2900      	cmp	r1, #0
 8006d0a:	d1b9      	bne.n	8006c80 <_printf_float+0xe8>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e7b6      	b.n	8006c7e <_printf_float+0xe6>
 8006d10:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006d14:	d119      	bne.n	8006d4a <_printf_float+0x1b2>
 8006d16:	2900      	cmp	r1, #0
 8006d18:	6863      	ldr	r3, [r4, #4]
 8006d1a:	dd0c      	ble.n	8006d36 <_printf_float+0x19e>
 8006d1c:	6121      	str	r1, [r4, #16]
 8006d1e:	b913      	cbnz	r3, 8006d26 <_printf_float+0x18e>
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	07d2      	lsls	r2, r2, #31
 8006d24:	d502      	bpl.n	8006d2c <_printf_float+0x194>
 8006d26:	3301      	adds	r3, #1
 8006d28:	440b      	add	r3, r1
 8006d2a:	6123      	str	r3, [r4, #16]
 8006d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d30:	f04f 0900 	mov.w	r9, #0
 8006d34:	e7d9      	b.n	8006cea <_printf_float+0x152>
 8006d36:	b913      	cbnz	r3, 8006d3e <_printf_float+0x1a6>
 8006d38:	6822      	ldr	r2, [r4, #0]
 8006d3a:	07d0      	lsls	r0, r2, #31
 8006d3c:	d501      	bpl.n	8006d42 <_printf_float+0x1aa>
 8006d3e:	3302      	adds	r3, #2
 8006d40:	e7f3      	b.n	8006d2a <_printf_float+0x192>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e7f1      	b.n	8006d2a <_printf_float+0x192>
 8006d46:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006d4a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	db05      	blt.n	8006d5e <_printf_float+0x1c6>
 8006d52:	6822      	ldr	r2, [r4, #0]
 8006d54:	6123      	str	r3, [r4, #16]
 8006d56:	07d1      	lsls	r1, r2, #31
 8006d58:	d5e8      	bpl.n	8006d2c <_printf_float+0x194>
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	e7e5      	b.n	8006d2a <_printf_float+0x192>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bfd4      	ite	le
 8006d62:	f1c3 0302 	rsble	r3, r3, #2
 8006d66:	2301      	movgt	r3, #1
 8006d68:	4413      	add	r3, r2
 8006d6a:	e7de      	b.n	8006d2a <_printf_float+0x192>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	055a      	lsls	r2, r3, #21
 8006d70:	d407      	bmi.n	8006d82 <_printf_float+0x1ea>
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	4642      	mov	r2, r8
 8006d76:	4631      	mov	r1, r6
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b8      	blx	r7
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d12b      	bne.n	8006dd8 <_printf_float+0x240>
 8006d80:	e767      	b.n	8006c52 <_printf_float+0xba>
 8006d82:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006d86:	f240 80dc 	bls.w	8006f42 <_printf_float+0x3aa>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d92:	f7f9 fe45 	bl	8000a20 <__aeabi_dcmpeq>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d033      	beq.n	8006e02 <_printf_float+0x26a>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4a41      	ldr	r2, [pc, #260]	; (8006ea4 <_printf_float+0x30c>)
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b8      	blx	r7
 8006da4:	3001      	adds	r0, #1
 8006da6:	f43f af54 	beq.w	8006c52 <_printf_float+0xba>
 8006daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dae:	429a      	cmp	r2, r3
 8006db0:	db02      	blt.n	8006db8 <_printf_float+0x220>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	07d8      	lsls	r0, r3, #31
 8006db6:	d50f      	bpl.n	8006dd8 <_printf_float+0x240>
 8006db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	47b8      	blx	r7
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f43f af45 	beq.w	8006c52 <_printf_float+0xba>
 8006dc8:	f04f 0800 	mov.w	r8, #0
 8006dcc:	f104 091a 	add.w	r9, r4, #26
 8006dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	4543      	cmp	r3, r8
 8006dd6:	dc09      	bgt.n	8006dec <_printf_float+0x254>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	079b      	lsls	r3, r3, #30
 8006ddc:	f100 8103 	bmi.w	8006fe6 <_printf_float+0x44e>
 8006de0:	68e0      	ldr	r0, [r4, #12]
 8006de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de4:	4298      	cmp	r0, r3
 8006de6:	bfb8      	it	lt
 8006de8:	4618      	movlt	r0, r3
 8006dea:	e734      	b.n	8006c56 <_printf_float+0xbe>
 8006dec:	2301      	movs	r3, #1
 8006dee:	464a      	mov	r2, r9
 8006df0:	4631      	mov	r1, r6
 8006df2:	4628      	mov	r0, r5
 8006df4:	47b8      	blx	r7
 8006df6:	3001      	adds	r0, #1
 8006df8:	f43f af2b 	beq.w	8006c52 <_printf_float+0xba>
 8006dfc:	f108 0801 	add.w	r8, r8, #1
 8006e00:	e7e6      	b.n	8006dd0 <_printf_float+0x238>
 8006e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	dc2b      	bgt.n	8006e60 <_printf_float+0x2c8>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	4a26      	ldr	r2, [pc, #152]	; (8006ea4 <_printf_float+0x30c>)
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	f43f af1d 	beq.w	8006c52 <_printf_float+0xba>
 8006e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e1a:	b923      	cbnz	r3, 8006e26 <_printf_float+0x28e>
 8006e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e1e:	b913      	cbnz	r3, 8006e26 <_printf_float+0x28e>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	07d9      	lsls	r1, r3, #31
 8006e24:	d5d8      	bpl.n	8006dd8 <_printf_float+0x240>
 8006e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b8      	blx	r7
 8006e30:	3001      	adds	r0, #1
 8006e32:	f43f af0e 	beq.w	8006c52 <_printf_float+0xba>
 8006e36:	f04f 0900 	mov.w	r9, #0
 8006e3a:	f104 0a1a 	add.w	sl, r4, #26
 8006e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e40:	425b      	negs	r3, r3
 8006e42:	454b      	cmp	r3, r9
 8006e44:	dc01      	bgt.n	8006e4a <_printf_float+0x2b2>
 8006e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e48:	e794      	b.n	8006d74 <_printf_float+0x1dc>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4652      	mov	r2, sl
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	f43f aefc 	beq.w	8006c52 <_printf_float+0xba>
 8006e5a:	f109 0901 	add.w	r9, r9, #1
 8006e5e:	e7ee      	b.n	8006e3e <_printf_float+0x2a6>
 8006e60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e64:	429a      	cmp	r2, r3
 8006e66:	bfa8      	it	ge
 8006e68:	461a      	movge	r2, r3
 8006e6a:	2a00      	cmp	r2, #0
 8006e6c:	4691      	mov	r9, r2
 8006e6e:	dd07      	ble.n	8006e80 <_printf_float+0x2e8>
 8006e70:	4613      	mov	r3, r2
 8006e72:	4631      	mov	r1, r6
 8006e74:	4642      	mov	r2, r8
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	f43f aee9 	beq.w	8006c52 <_printf_float+0xba>
 8006e80:	f104 031a 	add.w	r3, r4, #26
 8006e84:	f04f 0b00 	mov.w	fp, #0
 8006e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e8c:	9306      	str	r3, [sp, #24]
 8006e8e:	e015      	b.n	8006ebc <_printf_float+0x324>
 8006e90:	7fefffff 	.word	0x7fefffff
 8006e94:	080085f0 	.word	0x080085f0
 8006e98:	080085ec 	.word	0x080085ec
 8006e9c:	080085f8 	.word	0x080085f8
 8006ea0:	080085f4 	.word	0x080085f4
 8006ea4:	080085fc 	.word	0x080085fc
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	9a06      	ldr	r2, [sp, #24]
 8006eac:	4631      	mov	r1, r6
 8006eae:	4628      	mov	r0, r5
 8006eb0:	47b8      	blx	r7
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	f43f aecd 	beq.w	8006c52 <_printf_float+0xba>
 8006eb8:	f10b 0b01 	add.w	fp, fp, #1
 8006ebc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006ec0:	ebaa 0309 	sub.w	r3, sl, r9
 8006ec4:	455b      	cmp	r3, fp
 8006ec6:	dcef      	bgt.n	8006ea8 <_printf_float+0x310>
 8006ec8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	44d0      	add	r8, sl
 8006ed0:	db15      	blt.n	8006efe <_printf_float+0x366>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	07da      	lsls	r2, r3, #31
 8006ed6:	d412      	bmi.n	8006efe <_printf_float+0x366>
 8006ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006edc:	eba3 020a 	sub.w	r2, r3, sl
 8006ee0:	eba3 0a01 	sub.w	sl, r3, r1
 8006ee4:	4592      	cmp	sl, r2
 8006ee6:	bfa8      	it	ge
 8006ee8:	4692      	movge	sl, r2
 8006eea:	f1ba 0f00 	cmp.w	sl, #0
 8006eee:	dc0e      	bgt.n	8006f0e <_printf_float+0x376>
 8006ef0:	f04f 0800 	mov.w	r8, #0
 8006ef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ef8:	f104 091a 	add.w	r9, r4, #26
 8006efc:	e019      	b.n	8006f32 <_printf_float+0x39a>
 8006efe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f02:	4631      	mov	r1, r6
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b8      	blx	r7
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d1e5      	bne.n	8006ed8 <_printf_float+0x340>
 8006f0c:	e6a1      	b.n	8006c52 <_printf_float+0xba>
 8006f0e:	4653      	mov	r3, sl
 8006f10:	4642      	mov	r2, r8
 8006f12:	4631      	mov	r1, r6
 8006f14:	4628      	mov	r0, r5
 8006f16:	47b8      	blx	r7
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d1e9      	bne.n	8006ef0 <_printf_float+0x358>
 8006f1c:	e699      	b.n	8006c52 <_printf_float+0xba>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	464a      	mov	r2, r9
 8006f22:	4631      	mov	r1, r6
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b8      	blx	r7
 8006f28:	3001      	adds	r0, #1
 8006f2a:	f43f ae92 	beq.w	8006c52 <_printf_float+0xba>
 8006f2e:	f108 0801 	add.w	r8, r8, #1
 8006f32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f36:	1a9b      	subs	r3, r3, r2
 8006f38:	eba3 030a 	sub.w	r3, r3, sl
 8006f3c:	4543      	cmp	r3, r8
 8006f3e:	dcee      	bgt.n	8006f1e <_printf_float+0x386>
 8006f40:	e74a      	b.n	8006dd8 <_printf_float+0x240>
 8006f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f44:	2a01      	cmp	r2, #1
 8006f46:	dc01      	bgt.n	8006f4c <_printf_float+0x3b4>
 8006f48:	07db      	lsls	r3, r3, #31
 8006f4a:	d53a      	bpl.n	8006fc2 <_printf_float+0x42a>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4642      	mov	r2, r8
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	f43f ae7b 	beq.w	8006c52 <_printf_float+0xba>
 8006f5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f108 0801 	add.w	r8, r8, #1
 8006f6c:	f43f ae71 	beq.w	8006c52 <_printf_float+0xba>
 8006f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f72:	2200      	movs	r2, #0
 8006f74:	f103 3aff 	add.w	sl, r3, #4294967295
 8006f78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f7f9 fd4f 	bl	8000a20 <__aeabi_dcmpeq>
 8006f82:	b9c8      	cbnz	r0, 8006fb8 <_printf_float+0x420>
 8006f84:	4653      	mov	r3, sl
 8006f86:	4642      	mov	r2, r8
 8006f88:	4631      	mov	r1, r6
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	47b8      	blx	r7
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d10e      	bne.n	8006fb0 <_printf_float+0x418>
 8006f92:	e65e      	b.n	8006c52 <_printf_float+0xba>
 8006f94:	2301      	movs	r3, #1
 8006f96:	4652      	mov	r2, sl
 8006f98:	4631      	mov	r1, r6
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	47b8      	blx	r7
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	f43f ae57 	beq.w	8006c52 <_printf_float+0xba>
 8006fa4:	f108 0801 	add.w	r8, r8, #1
 8006fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006faa:	3b01      	subs	r3, #1
 8006fac:	4543      	cmp	r3, r8
 8006fae:	dcf1      	bgt.n	8006f94 <_printf_float+0x3fc>
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fb6:	e6de      	b.n	8006d76 <_printf_float+0x1de>
 8006fb8:	f04f 0800 	mov.w	r8, #0
 8006fbc:	f104 0a1a 	add.w	sl, r4, #26
 8006fc0:	e7f2      	b.n	8006fa8 <_printf_float+0x410>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e7df      	b.n	8006f86 <_printf_float+0x3ee>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	464a      	mov	r2, r9
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4628      	mov	r0, r5
 8006fce:	47b8      	blx	r7
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	f43f ae3e 	beq.w	8006c52 <_printf_float+0xba>
 8006fd6:	f108 0801 	add.w	r8, r8, #1
 8006fda:	68e3      	ldr	r3, [r4, #12]
 8006fdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fde:	1a9b      	subs	r3, r3, r2
 8006fe0:	4543      	cmp	r3, r8
 8006fe2:	dcf0      	bgt.n	8006fc6 <_printf_float+0x42e>
 8006fe4:	e6fc      	b.n	8006de0 <_printf_float+0x248>
 8006fe6:	f04f 0800 	mov.w	r8, #0
 8006fea:	f104 0919 	add.w	r9, r4, #25
 8006fee:	e7f4      	b.n	8006fda <_printf_float+0x442>
 8006ff0:	2900      	cmp	r1, #0
 8006ff2:	f43f ae8b 	beq.w	8006d0c <_printf_float+0x174>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006ffc:	ab09      	add	r3, sp, #36	; 0x24
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	ec49 8b10 	vmov	d0, r8, r9
 8007004:	6022      	str	r2, [r4, #0]
 8007006:	f8cd a004 	str.w	sl, [sp, #4]
 800700a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800700e:	4628      	mov	r0, r5
 8007010:	f7ff fd2d 	bl	8006a6e <__cvt>
 8007014:	4680      	mov	r8, r0
 8007016:	e648      	b.n	8006caa <_printf_float+0x112>

08007018 <_printf_common>:
 8007018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800701c:	4691      	mov	r9, r2
 800701e:	461f      	mov	r7, r3
 8007020:	688a      	ldr	r2, [r1, #8]
 8007022:	690b      	ldr	r3, [r1, #16]
 8007024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007028:	4293      	cmp	r3, r2
 800702a:	bfb8      	it	lt
 800702c:	4613      	movlt	r3, r2
 800702e:	f8c9 3000 	str.w	r3, [r9]
 8007032:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007036:	4606      	mov	r6, r0
 8007038:	460c      	mov	r4, r1
 800703a:	b112      	cbz	r2, 8007042 <_printf_common+0x2a>
 800703c:	3301      	adds	r3, #1
 800703e:	f8c9 3000 	str.w	r3, [r9]
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	0699      	lsls	r1, r3, #26
 8007046:	bf42      	ittt	mi
 8007048:	f8d9 3000 	ldrmi.w	r3, [r9]
 800704c:	3302      	addmi	r3, #2
 800704e:	f8c9 3000 	strmi.w	r3, [r9]
 8007052:	6825      	ldr	r5, [r4, #0]
 8007054:	f015 0506 	ands.w	r5, r5, #6
 8007058:	d107      	bne.n	800706a <_printf_common+0x52>
 800705a:	f104 0a19 	add.w	sl, r4, #25
 800705e:	68e3      	ldr	r3, [r4, #12]
 8007060:	f8d9 2000 	ldr.w	r2, [r9]
 8007064:	1a9b      	subs	r3, r3, r2
 8007066:	42ab      	cmp	r3, r5
 8007068:	dc28      	bgt.n	80070bc <_printf_common+0xa4>
 800706a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800706e:	6822      	ldr	r2, [r4, #0]
 8007070:	3300      	adds	r3, #0
 8007072:	bf18      	it	ne
 8007074:	2301      	movne	r3, #1
 8007076:	0692      	lsls	r2, r2, #26
 8007078:	d42d      	bmi.n	80070d6 <_printf_common+0xbe>
 800707a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800707e:	4639      	mov	r1, r7
 8007080:	4630      	mov	r0, r6
 8007082:	47c0      	blx	r8
 8007084:	3001      	adds	r0, #1
 8007086:	d020      	beq.n	80070ca <_printf_common+0xb2>
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	68e5      	ldr	r5, [r4, #12]
 800708c:	f8d9 2000 	ldr.w	r2, [r9]
 8007090:	f003 0306 	and.w	r3, r3, #6
 8007094:	2b04      	cmp	r3, #4
 8007096:	bf08      	it	eq
 8007098:	1aad      	subeq	r5, r5, r2
 800709a:	68a3      	ldr	r3, [r4, #8]
 800709c:	6922      	ldr	r2, [r4, #16]
 800709e:	bf0c      	ite	eq
 80070a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070a4:	2500      	movne	r5, #0
 80070a6:	4293      	cmp	r3, r2
 80070a8:	bfc4      	itt	gt
 80070aa:	1a9b      	subgt	r3, r3, r2
 80070ac:	18ed      	addgt	r5, r5, r3
 80070ae:	f04f 0900 	mov.w	r9, #0
 80070b2:	341a      	adds	r4, #26
 80070b4:	454d      	cmp	r5, r9
 80070b6:	d11a      	bne.n	80070ee <_printf_common+0xd6>
 80070b8:	2000      	movs	r0, #0
 80070ba:	e008      	b.n	80070ce <_printf_common+0xb6>
 80070bc:	2301      	movs	r3, #1
 80070be:	4652      	mov	r2, sl
 80070c0:	4639      	mov	r1, r7
 80070c2:	4630      	mov	r0, r6
 80070c4:	47c0      	blx	r8
 80070c6:	3001      	adds	r0, #1
 80070c8:	d103      	bne.n	80070d2 <_printf_common+0xba>
 80070ca:	f04f 30ff 	mov.w	r0, #4294967295
 80070ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d2:	3501      	adds	r5, #1
 80070d4:	e7c3      	b.n	800705e <_printf_common+0x46>
 80070d6:	18e1      	adds	r1, r4, r3
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	2030      	movs	r0, #48	; 0x30
 80070dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070e0:	4422      	add	r2, r4
 80070e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070ea:	3302      	adds	r3, #2
 80070ec:	e7c5      	b.n	800707a <_printf_common+0x62>
 80070ee:	2301      	movs	r3, #1
 80070f0:	4622      	mov	r2, r4
 80070f2:	4639      	mov	r1, r7
 80070f4:	4630      	mov	r0, r6
 80070f6:	47c0      	blx	r8
 80070f8:	3001      	adds	r0, #1
 80070fa:	d0e6      	beq.n	80070ca <_printf_common+0xb2>
 80070fc:	f109 0901 	add.w	r9, r9, #1
 8007100:	e7d8      	b.n	80070b4 <_printf_common+0x9c>

08007102 <quorem>:
 8007102:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007106:	6903      	ldr	r3, [r0, #16]
 8007108:	690c      	ldr	r4, [r1, #16]
 800710a:	42a3      	cmp	r3, r4
 800710c:	4680      	mov	r8, r0
 800710e:	f2c0 8082 	blt.w	8007216 <quorem+0x114>
 8007112:	3c01      	subs	r4, #1
 8007114:	f101 0714 	add.w	r7, r1, #20
 8007118:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800711c:	f100 0614 	add.w	r6, r0, #20
 8007120:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007124:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007128:	eb06 030c 	add.w	r3, r6, ip
 800712c:	3501      	adds	r5, #1
 800712e:	eb07 090c 	add.w	r9, r7, ip
 8007132:	9301      	str	r3, [sp, #4]
 8007134:	fbb0 f5f5 	udiv	r5, r0, r5
 8007138:	b395      	cbz	r5, 80071a0 <quorem+0x9e>
 800713a:	f04f 0a00 	mov.w	sl, #0
 800713e:	4638      	mov	r0, r7
 8007140:	46b6      	mov	lr, r6
 8007142:	46d3      	mov	fp, sl
 8007144:	f850 2b04 	ldr.w	r2, [r0], #4
 8007148:	b293      	uxth	r3, r2
 800714a:	fb05 a303 	mla	r3, r5, r3, sl
 800714e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007152:	b29b      	uxth	r3, r3
 8007154:	ebab 0303 	sub.w	r3, fp, r3
 8007158:	0c12      	lsrs	r2, r2, #16
 800715a:	f8de b000 	ldr.w	fp, [lr]
 800715e:	fb05 a202 	mla	r2, r5, r2, sl
 8007162:	fa13 f38b 	uxtah	r3, r3, fp
 8007166:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800716a:	fa1f fb82 	uxth.w	fp, r2
 800716e:	f8de 2000 	ldr.w	r2, [lr]
 8007172:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007176:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800717a:	b29b      	uxth	r3, r3
 800717c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007180:	4581      	cmp	r9, r0
 8007182:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007186:	f84e 3b04 	str.w	r3, [lr], #4
 800718a:	d2db      	bcs.n	8007144 <quorem+0x42>
 800718c:	f856 300c 	ldr.w	r3, [r6, ip]
 8007190:	b933      	cbnz	r3, 80071a0 <quorem+0x9e>
 8007192:	9b01      	ldr	r3, [sp, #4]
 8007194:	3b04      	subs	r3, #4
 8007196:	429e      	cmp	r6, r3
 8007198:	461a      	mov	r2, r3
 800719a:	d330      	bcc.n	80071fe <quorem+0xfc>
 800719c:	f8c8 4010 	str.w	r4, [r8, #16]
 80071a0:	4640      	mov	r0, r8
 80071a2:	f001 f821 	bl	80081e8 <__mcmp>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	db25      	blt.n	80071f6 <quorem+0xf4>
 80071aa:	3501      	adds	r5, #1
 80071ac:	4630      	mov	r0, r6
 80071ae:	f04f 0c00 	mov.w	ip, #0
 80071b2:	f857 2b04 	ldr.w	r2, [r7], #4
 80071b6:	f8d0 e000 	ldr.w	lr, [r0]
 80071ba:	b293      	uxth	r3, r2
 80071bc:	ebac 0303 	sub.w	r3, ip, r3
 80071c0:	0c12      	lsrs	r2, r2, #16
 80071c2:	fa13 f38e 	uxtah	r3, r3, lr
 80071c6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071d4:	45b9      	cmp	r9, r7
 80071d6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071da:	f840 3b04 	str.w	r3, [r0], #4
 80071de:	d2e8      	bcs.n	80071b2 <quorem+0xb0>
 80071e0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80071e4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80071e8:	b92a      	cbnz	r2, 80071f6 <quorem+0xf4>
 80071ea:	3b04      	subs	r3, #4
 80071ec:	429e      	cmp	r6, r3
 80071ee:	461a      	mov	r2, r3
 80071f0:	d30b      	bcc.n	800720a <quorem+0x108>
 80071f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80071f6:	4628      	mov	r0, r5
 80071f8:	b003      	add	sp, #12
 80071fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fe:	6812      	ldr	r2, [r2, #0]
 8007200:	3b04      	subs	r3, #4
 8007202:	2a00      	cmp	r2, #0
 8007204:	d1ca      	bne.n	800719c <quorem+0x9a>
 8007206:	3c01      	subs	r4, #1
 8007208:	e7c5      	b.n	8007196 <quorem+0x94>
 800720a:	6812      	ldr	r2, [r2, #0]
 800720c:	3b04      	subs	r3, #4
 800720e:	2a00      	cmp	r2, #0
 8007210:	d1ef      	bne.n	80071f2 <quorem+0xf0>
 8007212:	3c01      	subs	r4, #1
 8007214:	e7ea      	b.n	80071ec <quorem+0xea>
 8007216:	2000      	movs	r0, #0
 8007218:	e7ee      	b.n	80071f8 <quorem+0xf6>
 800721a:	0000      	movs	r0, r0
 800721c:	0000      	movs	r0, r0
	...

08007220 <_dtoa_r>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	ec57 6b10 	vmov	r6, r7, d0
 8007228:	b097      	sub	sp, #92	; 0x5c
 800722a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800722c:	9106      	str	r1, [sp, #24]
 800722e:	4604      	mov	r4, r0
 8007230:	920b      	str	r2, [sp, #44]	; 0x2c
 8007232:	9312      	str	r3, [sp, #72]	; 0x48
 8007234:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007238:	e9cd 6700 	strd	r6, r7, [sp]
 800723c:	b93d      	cbnz	r5, 800724e <_dtoa_r+0x2e>
 800723e:	2010      	movs	r0, #16
 8007240:	f000 fdb4 	bl	8007dac <malloc>
 8007244:	6260      	str	r0, [r4, #36]	; 0x24
 8007246:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800724a:	6005      	str	r5, [r0, #0]
 800724c:	60c5      	str	r5, [r0, #12]
 800724e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007250:	6819      	ldr	r1, [r3, #0]
 8007252:	b151      	cbz	r1, 800726a <_dtoa_r+0x4a>
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	604a      	str	r2, [r1, #4]
 8007258:	2301      	movs	r3, #1
 800725a:	4093      	lsls	r3, r2
 800725c:	608b      	str	r3, [r1, #8]
 800725e:	4620      	mov	r0, r4
 8007260:	f000 fde0 	bl	8007e24 <_Bfree>
 8007264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007266:	2200      	movs	r2, #0
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	1e3b      	subs	r3, r7, #0
 800726c:	bfbb      	ittet	lt
 800726e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007272:	9301      	strlt	r3, [sp, #4]
 8007274:	2300      	movge	r3, #0
 8007276:	2201      	movlt	r2, #1
 8007278:	bfac      	ite	ge
 800727a:	f8c8 3000 	strge.w	r3, [r8]
 800727e:	f8c8 2000 	strlt.w	r2, [r8]
 8007282:	4baf      	ldr	r3, [pc, #700]	; (8007540 <_dtoa_r+0x320>)
 8007284:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007288:	ea33 0308 	bics.w	r3, r3, r8
 800728c:	d114      	bne.n	80072b8 <_dtoa_r+0x98>
 800728e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007290:	f242 730f 	movw	r3, #9999	; 0x270f
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	9b00      	ldr	r3, [sp, #0]
 8007298:	b923      	cbnz	r3, 80072a4 <_dtoa_r+0x84>
 800729a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800729e:	2800      	cmp	r0, #0
 80072a0:	f000 8542 	beq.w	8007d28 <_dtoa_r+0xb08>
 80072a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007554 <_dtoa_r+0x334>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8544 	beq.w	8007d38 <_dtoa_r+0xb18>
 80072b0:	f10b 0303 	add.w	r3, fp, #3
 80072b4:	f000 bd3e 	b.w	8007d34 <_dtoa_r+0xb14>
 80072b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072bc:	2200      	movs	r2, #0
 80072be:	2300      	movs	r3, #0
 80072c0:	4630      	mov	r0, r6
 80072c2:	4639      	mov	r1, r7
 80072c4:	f7f9 fbac 	bl	8000a20 <__aeabi_dcmpeq>
 80072c8:	4681      	mov	r9, r0
 80072ca:	b168      	cbz	r0, 80072e8 <_dtoa_r+0xc8>
 80072cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072ce:	2301      	movs	r3, #1
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8524 	beq.w	8007d22 <_dtoa_r+0xb02>
 80072da:	4b9a      	ldr	r3, [pc, #616]	; (8007544 <_dtoa_r+0x324>)
 80072dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072de:	f103 3bff 	add.w	fp, r3, #4294967295
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	f000 bd28 	b.w	8007d38 <_dtoa_r+0xb18>
 80072e8:	aa14      	add	r2, sp, #80	; 0x50
 80072ea:	a915      	add	r1, sp, #84	; 0x54
 80072ec:	ec47 6b10 	vmov	d0, r6, r7
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 fff0 	bl	80082d6 <__d2b>
 80072f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80072fa:	9004      	str	r0, [sp, #16]
 80072fc:	2d00      	cmp	r5, #0
 80072fe:	d07c      	beq.n	80073fa <_dtoa_r+0x1da>
 8007300:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007304:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007308:	46b2      	mov	sl, r6
 800730a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800730e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007312:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007316:	2200      	movs	r2, #0
 8007318:	4b8b      	ldr	r3, [pc, #556]	; (8007548 <_dtoa_r+0x328>)
 800731a:	4650      	mov	r0, sl
 800731c:	4659      	mov	r1, fp
 800731e:	f7f8 ff5f 	bl	80001e0 <__aeabi_dsub>
 8007322:	a381      	add	r3, pc, #516	; (adr r3, 8007528 <_dtoa_r+0x308>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f7f9 f912 	bl	8000550 <__aeabi_dmul>
 800732c:	a380      	add	r3, pc, #512	; (adr r3, 8007530 <_dtoa_r+0x310>)
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f7f8 ff57 	bl	80001e4 <__adddf3>
 8007336:	4606      	mov	r6, r0
 8007338:	4628      	mov	r0, r5
 800733a:	460f      	mov	r7, r1
 800733c:	f7f9 f89e 	bl	800047c <__aeabi_i2d>
 8007340:	a37d      	add	r3, pc, #500	; (adr r3, 8007538 <_dtoa_r+0x318>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f7f9 f903 	bl	8000550 <__aeabi_dmul>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4630      	mov	r0, r6
 8007350:	4639      	mov	r1, r7
 8007352:	f7f8 ff47 	bl	80001e4 <__adddf3>
 8007356:	4606      	mov	r6, r0
 8007358:	460f      	mov	r7, r1
 800735a:	f7f9 fba9 	bl	8000ab0 <__aeabi_d2iz>
 800735e:	2200      	movs	r2, #0
 8007360:	4682      	mov	sl, r0
 8007362:	2300      	movs	r3, #0
 8007364:	4630      	mov	r0, r6
 8007366:	4639      	mov	r1, r7
 8007368:	f7f9 fb64 	bl	8000a34 <__aeabi_dcmplt>
 800736c:	b148      	cbz	r0, 8007382 <_dtoa_r+0x162>
 800736e:	4650      	mov	r0, sl
 8007370:	f7f9 f884 	bl	800047c <__aeabi_i2d>
 8007374:	4632      	mov	r2, r6
 8007376:	463b      	mov	r3, r7
 8007378:	f7f9 fb52 	bl	8000a20 <__aeabi_dcmpeq>
 800737c:	b908      	cbnz	r0, 8007382 <_dtoa_r+0x162>
 800737e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007382:	f1ba 0f16 	cmp.w	sl, #22
 8007386:	d859      	bhi.n	800743c <_dtoa_r+0x21c>
 8007388:	4970      	ldr	r1, [pc, #448]	; (800754c <_dtoa_r+0x32c>)
 800738a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800738e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007392:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007396:	f7f9 fb6b 	bl	8000a70 <__aeabi_dcmpgt>
 800739a:	2800      	cmp	r0, #0
 800739c:	d050      	beq.n	8007440 <_dtoa_r+0x220>
 800739e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073a2:	2300      	movs	r3, #0
 80073a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80073a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073a8:	1b5d      	subs	r5, r3, r5
 80073aa:	f1b5 0801 	subs.w	r8, r5, #1
 80073ae:	bf49      	itett	mi
 80073b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80073b4:	2300      	movpl	r3, #0
 80073b6:	9305      	strmi	r3, [sp, #20]
 80073b8:	f04f 0800 	movmi.w	r8, #0
 80073bc:	bf58      	it	pl
 80073be:	9305      	strpl	r3, [sp, #20]
 80073c0:	f1ba 0f00 	cmp.w	sl, #0
 80073c4:	db3e      	blt.n	8007444 <_dtoa_r+0x224>
 80073c6:	2300      	movs	r3, #0
 80073c8:	44d0      	add	r8, sl
 80073ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80073ce:	9307      	str	r3, [sp, #28]
 80073d0:	9b06      	ldr	r3, [sp, #24]
 80073d2:	2b09      	cmp	r3, #9
 80073d4:	f200 8090 	bhi.w	80074f8 <_dtoa_r+0x2d8>
 80073d8:	2b05      	cmp	r3, #5
 80073da:	bfc4      	itt	gt
 80073dc:	3b04      	subgt	r3, #4
 80073de:	9306      	strgt	r3, [sp, #24]
 80073e0:	9b06      	ldr	r3, [sp, #24]
 80073e2:	f1a3 0302 	sub.w	r3, r3, #2
 80073e6:	bfcc      	ite	gt
 80073e8:	2500      	movgt	r5, #0
 80073ea:	2501      	movle	r5, #1
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	f200 808f 	bhi.w	8007510 <_dtoa_r+0x2f0>
 80073f2:	e8df f003 	tbb	[pc, r3]
 80073f6:	7f7d      	.short	0x7f7d
 80073f8:	7131      	.short	0x7131
 80073fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80073fe:	441d      	add	r5, r3
 8007400:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007404:	2820      	cmp	r0, #32
 8007406:	dd13      	ble.n	8007430 <_dtoa_r+0x210>
 8007408:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800740c:	9b00      	ldr	r3, [sp, #0]
 800740e:	fa08 f800 	lsl.w	r8, r8, r0
 8007412:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007416:	fa23 f000 	lsr.w	r0, r3, r0
 800741a:	ea48 0000 	orr.w	r0, r8, r0
 800741e:	f7f9 f81d 	bl	800045c <__aeabi_ui2d>
 8007422:	2301      	movs	r3, #1
 8007424:	4682      	mov	sl, r0
 8007426:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800742a:	3d01      	subs	r5, #1
 800742c:	9313      	str	r3, [sp, #76]	; 0x4c
 800742e:	e772      	b.n	8007316 <_dtoa_r+0xf6>
 8007430:	9b00      	ldr	r3, [sp, #0]
 8007432:	f1c0 0020 	rsb	r0, r0, #32
 8007436:	fa03 f000 	lsl.w	r0, r3, r0
 800743a:	e7f0      	b.n	800741e <_dtoa_r+0x1fe>
 800743c:	2301      	movs	r3, #1
 800743e:	e7b1      	b.n	80073a4 <_dtoa_r+0x184>
 8007440:	900f      	str	r0, [sp, #60]	; 0x3c
 8007442:	e7b0      	b.n	80073a6 <_dtoa_r+0x186>
 8007444:	9b05      	ldr	r3, [sp, #20]
 8007446:	eba3 030a 	sub.w	r3, r3, sl
 800744a:	9305      	str	r3, [sp, #20]
 800744c:	f1ca 0300 	rsb	r3, sl, #0
 8007450:	9307      	str	r3, [sp, #28]
 8007452:	2300      	movs	r3, #0
 8007454:	930e      	str	r3, [sp, #56]	; 0x38
 8007456:	e7bb      	b.n	80073d0 <_dtoa_r+0x1b0>
 8007458:	2301      	movs	r3, #1
 800745a:	930a      	str	r3, [sp, #40]	; 0x28
 800745c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800745e:	2b00      	cmp	r3, #0
 8007460:	dd59      	ble.n	8007516 <_dtoa_r+0x2f6>
 8007462:	9302      	str	r3, [sp, #8]
 8007464:	4699      	mov	r9, r3
 8007466:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007468:	2200      	movs	r2, #0
 800746a:	6072      	str	r2, [r6, #4]
 800746c:	2204      	movs	r2, #4
 800746e:	f102 0014 	add.w	r0, r2, #20
 8007472:	4298      	cmp	r0, r3
 8007474:	6871      	ldr	r1, [r6, #4]
 8007476:	d953      	bls.n	8007520 <_dtoa_r+0x300>
 8007478:	4620      	mov	r0, r4
 800747a:	f000 fc9f 	bl	8007dbc <_Balloc>
 800747e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007480:	6030      	str	r0, [r6, #0]
 8007482:	f1b9 0f0e 	cmp.w	r9, #14
 8007486:	f8d3 b000 	ldr.w	fp, [r3]
 800748a:	f200 80e6 	bhi.w	800765a <_dtoa_r+0x43a>
 800748e:	2d00      	cmp	r5, #0
 8007490:	f000 80e3 	beq.w	800765a <_dtoa_r+0x43a>
 8007494:	ed9d 7b00 	vldr	d7, [sp]
 8007498:	f1ba 0f00 	cmp.w	sl, #0
 800749c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80074a0:	dd74      	ble.n	800758c <_dtoa_r+0x36c>
 80074a2:	4a2a      	ldr	r2, [pc, #168]	; (800754c <_dtoa_r+0x32c>)
 80074a4:	f00a 030f 	and.w	r3, sl, #15
 80074a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074ac:	ed93 7b00 	vldr	d7, [r3]
 80074b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80074b4:	06f0      	lsls	r0, r6, #27
 80074b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80074ba:	d565      	bpl.n	8007588 <_dtoa_r+0x368>
 80074bc:	4b24      	ldr	r3, [pc, #144]	; (8007550 <_dtoa_r+0x330>)
 80074be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074c6:	f7f9 f96d 	bl	80007a4 <__aeabi_ddiv>
 80074ca:	e9cd 0100 	strd	r0, r1, [sp]
 80074ce:	f006 060f 	and.w	r6, r6, #15
 80074d2:	2503      	movs	r5, #3
 80074d4:	4f1e      	ldr	r7, [pc, #120]	; (8007550 <_dtoa_r+0x330>)
 80074d6:	e04c      	b.n	8007572 <_dtoa_r+0x352>
 80074d8:	2301      	movs	r3, #1
 80074da:	930a      	str	r3, [sp, #40]	; 0x28
 80074dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074de:	4453      	add	r3, sl
 80074e0:	f103 0901 	add.w	r9, r3, #1
 80074e4:	9302      	str	r3, [sp, #8]
 80074e6:	464b      	mov	r3, r9
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	bfb8      	it	lt
 80074ec:	2301      	movlt	r3, #1
 80074ee:	e7ba      	b.n	8007466 <_dtoa_r+0x246>
 80074f0:	2300      	movs	r3, #0
 80074f2:	e7b2      	b.n	800745a <_dtoa_r+0x23a>
 80074f4:	2300      	movs	r3, #0
 80074f6:	e7f0      	b.n	80074da <_dtoa_r+0x2ba>
 80074f8:	2501      	movs	r5, #1
 80074fa:	2300      	movs	r3, #0
 80074fc:	9306      	str	r3, [sp, #24]
 80074fe:	950a      	str	r5, [sp, #40]	; 0x28
 8007500:	f04f 33ff 	mov.w	r3, #4294967295
 8007504:	9302      	str	r3, [sp, #8]
 8007506:	4699      	mov	r9, r3
 8007508:	2200      	movs	r2, #0
 800750a:	2312      	movs	r3, #18
 800750c:	920b      	str	r2, [sp, #44]	; 0x2c
 800750e:	e7aa      	b.n	8007466 <_dtoa_r+0x246>
 8007510:	2301      	movs	r3, #1
 8007512:	930a      	str	r3, [sp, #40]	; 0x28
 8007514:	e7f4      	b.n	8007500 <_dtoa_r+0x2e0>
 8007516:	2301      	movs	r3, #1
 8007518:	9302      	str	r3, [sp, #8]
 800751a:	4699      	mov	r9, r3
 800751c:	461a      	mov	r2, r3
 800751e:	e7f5      	b.n	800750c <_dtoa_r+0x2ec>
 8007520:	3101      	adds	r1, #1
 8007522:	6071      	str	r1, [r6, #4]
 8007524:	0052      	lsls	r2, r2, #1
 8007526:	e7a2      	b.n	800746e <_dtoa_r+0x24e>
 8007528:	636f4361 	.word	0x636f4361
 800752c:	3fd287a7 	.word	0x3fd287a7
 8007530:	8b60c8b3 	.word	0x8b60c8b3
 8007534:	3fc68a28 	.word	0x3fc68a28
 8007538:	509f79fb 	.word	0x509f79fb
 800753c:	3fd34413 	.word	0x3fd34413
 8007540:	7ff00000 	.word	0x7ff00000
 8007544:	080085fd 	.word	0x080085fd
 8007548:	3ff80000 	.word	0x3ff80000
 800754c:	08008638 	.word	0x08008638
 8007550:	08008610 	.word	0x08008610
 8007554:	08008607 	.word	0x08008607
 8007558:	07f1      	lsls	r1, r6, #31
 800755a:	d508      	bpl.n	800756e <_dtoa_r+0x34e>
 800755c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007564:	f7f8 fff4 	bl	8000550 <__aeabi_dmul>
 8007568:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800756c:	3501      	adds	r5, #1
 800756e:	1076      	asrs	r6, r6, #1
 8007570:	3708      	adds	r7, #8
 8007572:	2e00      	cmp	r6, #0
 8007574:	d1f0      	bne.n	8007558 <_dtoa_r+0x338>
 8007576:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800757a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800757e:	f7f9 f911 	bl	80007a4 <__aeabi_ddiv>
 8007582:	e9cd 0100 	strd	r0, r1, [sp]
 8007586:	e01a      	b.n	80075be <_dtoa_r+0x39e>
 8007588:	2502      	movs	r5, #2
 800758a:	e7a3      	b.n	80074d4 <_dtoa_r+0x2b4>
 800758c:	f000 80a0 	beq.w	80076d0 <_dtoa_r+0x4b0>
 8007590:	f1ca 0600 	rsb	r6, sl, #0
 8007594:	4b9f      	ldr	r3, [pc, #636]	; (8007814 <_dtoa_r+0x5f4>)
 8007596:	4fa0      	ldr	r7, [pc, #640]	; (8007818 <_dtoa_r+0x5f8>)
 8007598:	f006 020f 	and.w	r2, r6, #15
 800759c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075a8:	f7f8 ffd2 	bl	8000550 <__aeabi_dmul>
 80075ac:	e9cd 0100 	strd	r0, r1, [sp]
 80075b0:	1136      	asrs	r6, r6, #4
 80075b2:	2300      	movs	r3, #0
 80075b4:	2502      	movs	r5, #2
 80075b6:	2e00      	cmp	r6, #0
 80075b8:	d17f      	bne.n	80076ba <_dtoa_r+0x49a>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e1      	bne.n	8007582 <_dtoa_r+0x362>
 80075be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 8087 	beq.w	80076d4 <_dtoa_r+0x4b4>
 80075c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80075ca:	2200      	movs	r2, #0
 80075cc:	4b93      	ldr	r3, [pc, #588]	; (800781c <_dtoa_r+0x5fc>)
 80075ce:	4630      	mov	r0, r6
 80075d0:	4639      	mov	r1, r7
 80075d2:	f7f9 fa2f 	bl	8000a34 <__aeabi_dcmplt>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d07c      	beq.n	80076d4 <_dtoa_r+0x4b4>
 80075da:	f1b9 0f00 	cmp.w	r9, #0
 80075de:	d079      	beq.n	80076d4 <_dtoa_r+0x4b4>
 80075e0:	9b02      	ldr	r3, [sp, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dd35      	ble.n	8007652 <_dtoa_r+0x432>
 80075e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80075ea:	9308      	str	r3, [sp, #32]
 80075ec:	4639      	mov	r1, r7
 80075ee:	2200      	movs	r2, #0
 80075f0:	4b8b      	ldr	r3, [pc, #556]	; (8007820 <_dtoa_r+0x600>)
 80075f2:	4630      	mov	r0, r6
 80075f4:	f7f8 ffac 	bl	8000550 <__aeabi_dmul>
 80075f8:	e9cd 0100 	strd	r0, r1, [sp]
 80075fc:	9f02      	ldr	r7, [sp, #8]
 80075fe:	3501      	adds	r5, #1
 8007600:	4628      	mov	r0, r5
 8007602:	f7f8 ff3b 	bl	800047c <__aeabi_i2d>
 8007606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800760a:	f7f8 ffa1 	bl	8000550 <__aeabi_dmul>
 800760e:	2200      	movs	r2, #0
 8007610:	4b84      	ldr	r3, [pc, #528]	; (8007824 <_dtoa_r+0x604>)
 8007612:	f7f8 fde7 	bl	80001e4 <__adddf3>
 8007616:	4605      	mov	r5, r0
 8007618:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800761c:	2f00      	cmp	r7, #0
 800761e:	d15d      	bne.n	80076dc <_dtoa_r+0x4bc>
 8007620:	2200      	movs	r2, #0
 8007622:	4b81      	ldr	r3, [pc, #516]	; (8007828 <_dtoa_r+0x608>)
 8007624:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007628:	f7f8 fdda 	bl	80001e0 <__aeabi_dsub>
 800762c:	462a      	mov	r2, r5
 800762e:	4633      	mov	r3, r6
 8007630:	e9cd 0100 	strd	r0, r1, [sp]
 8007634:	f7f9 fa1c 	bl	8000a70 <__aeabi_dcmpgt>
 8007638:	2800      	cmp	r0, #0
 800763a:	f040 8288 	bne.w	8007b4e <_dtoa_r+0x92e>
 800763e:	462a      	mov	r2, r5
 8007640:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007644:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007648:	f7f9 f9f4 	bl	8000a34 <__aeabi_dcmplt>
 800764c:	2800      	cmp	r0, #0
 800764e:	f040 827c 	bne.w	8007b4a <_dtoa_r+0x92a>
 8007652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007656:	e9cd 2300 	strd	r2, r3, [sp]
 800765a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800765c:	2b00      	cmp	r3, #0
 800765e:	f2c0 8150 	blt.w	8007902 <_dtoa_r+0x6e2>
 8007662:	f1ba 0f0e 	cmp.w	sl, #14
 8007666:	f300 814c 	bgt.w	8007902 <_dtoa_r+0x6e2>
 800766a:	4b6a      	ldr	r3, [pc, #424]	; (8007814 <_dtoa_r+0x5f4>)
 800766c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007670:	ed93 7b00 	vldr	d7, [r3]
 8007674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007676:	2b00      	cmp	r3, #0
 8007678:	ed8d 7b02 	vstr	d7, [sp, #8]
 800767c:	f280 80d8 	bge.w	8007830 <_dtoa_r+0x610>
 8007680:	f1b9 0f00 	cmp.w	r9, #0
 8007684:	f300 80d4 	bgt.w	8007830 <_dtoa_r+0x610>
 8007688:	f040 825e 	bne.w	8007b48 <_dtoa_r+0x928>
 800768c:	2200      	movs	r2, #0
 800768e:	4b66      	ldr	r3, [pc, #408]	; (8007828 <_dtoa_r+0x608>)
 8007690:	ec51 0b17 	vmov	r0, r1, d7
 8007694:	f7f8 ff5c 	bl	8000550 <__aeabi_dmul>
 8007698:	e9dd 2300 	ldrd	r2, r3, [sp]
 800769c:	f7f9 f9de 	bl	8000a5c <__aeabi_dcmpge>
 80076a0:	464f      	mov	r7, r9
 80076a2:	464e      	mov	r6, r9
 80076a4:	2800      	cmp	r0, #0
 80076a6:	f040 8234 	bne.w	8007b12 <_dtoa_r+0x8f2>
 80076aa:	2331      	movs	r3, #49	; 0x31
 80076ac:	f10b 0501 	add.w	r5, fp, #1
 80076b0:	f88b 3000 	strb.w	r3, [fp]
 80076b4:	f10a 0a01 	add.w	sl, sl, #1
 80076b8:	e22f      	b.n	8007b1a <_dtoa_r+0x8fa>
 80076ba:	07f2      	lsls	r2, r6, #31
 80076bc:	d505      	bpl.n	80076ca <_dtoa_r+0x4aa>
 80076be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076c2:	f7f8 ff45 	bl	8000550 <__aeabi_dmul>
 80076c6:	3501      	adds	r5, #1
 80076c8:	2301      	movs	r3, #1
 80076ca:	1076      	asrs	r6, r6, #1
 80076cc:	3708      	adds	r7, #8
 80076ce:	e772      	b.n	80075b6 <_dtoa_r+0x396>
 80076d0:	2502      	movs	r5, #2
 80076d2:	e774      	b.n	80075be <_dtoa_r+0x39e>
 80076d4:	f8cd a020 	str.w	sl, [sp, #32]
 80076d8:	464f      	mov	r7, r9
 80076da:	e791      	b.n	8007600 <_dtoa_r+0x3e0>
 80076dc:	4b4d      	ldr	r3, [pc, #308]	; (8007814 <_dtoa_r+0x5f4>)
 80076de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80076e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d047      	beq.n	800777c <_dtoa_r+0x55c>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	2000      	movs	r0, #0
 80076f2:	494e      	ldr	r1, [pc, #312]	; (800782c <_dtoa_r+0x60c>)
 80076f4:	f7f9 f856 	bl	80007a4 <__aeabi_ddiv>
 80076f8:	462a      	mov	r2, r5
 80076fa:	4633      	mov	r3, r6
 80076fc:	f7f8 fd70 	bl	80001e0 <__aeabi_dsub>
 8007700:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007704:	465d      	mov	r5, fp
 8007706:	e9dd 0100 	ldrd	r0, r1, [sp]
 800770a:	f7f9 f9d1 	bl	8000ab0 <__aeabi_d2iz>
 800770e:	4606      	mov	r6, r0
 8007710:	f7f8 feb4 	bl	800047c <__aeabi_i2d>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	e9dd 0100 	ldrd	r0, r1, [sp]
 800771c:	f7f8 fd60 	bl	80001e0 <__aeabi_dsub>
 8007720:	3630      	adds	r6, #48	; 0x30
 8007722:	f805 6b01 	strb.w	r6, [r5], #1
 8007726:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800772a:	e9cd 0100 	strd	r0, r1, [sp]
 800772e:	f7f9 f981 	bl	8000a34 <__aeabi_dcmplt>
 8007732:	2800      	cmp	r0, #0
 8007734:	d163      	bne.n	80077fe <_dtoa_r+0x5de>
 8007736:	e9dd 2300 	ldrd	r2, r3, [sp]
 800773a:	2000      	movs	r0, #0
 800773c:	4937      	ldr	r1, [pc, #220]	; (800781c <_dtoa_r+0x5fc>)
 800773e:	f7f8 fd4f 	bl	80001e0 <__aeabi_dsub>
 8007742:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007746:	f7f9 f975 	bl	8000a34 <__aeabi_dcmplt>
 800774a:	2800      	cmp	r0, #0
 800774c:	f040 80b7 	bne.w	80078be <_dtoa_r+0x69e>
 8007750:	eba5 030b 	sub.w	r3, r5, fp
 8007754:	429f      	cmp	r7, r3
 8007756:	f77f af7c 	ble.w	8007652 <_dtoa_r+0x432>
 800775a:	2200      	movs	r2, #0
 800775c:	4b30      	ldr	r3, [pc, #192]	; (8007820 <_dtoa_r+0x600>)
 800775e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007762:	f7f8 fef5 	bl	8000550 <__aeabi_dmul>
 8007766:	2200      	movs	r2, #0
 8007768:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800776c:	4b2c      	ldr	r3, [pc, #176]	; (8007820 <_dtoa_r+0x600>)
 800776e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007772:	f7f8 feed 	bl	8000550 <__aeabi_dmul>
 8007776:	e9cd 0100 	strd	r0, r1, [sp]
 800777a:	e7c4      	b.n	8007706 <_dtoa_r+0x4e6>
 800777c:	462a      	mov	r2, r5
 800777e:	4633      	mov	r3, r6
 8007780:	f7f8 fee6 	bl	8000550 <__aeabi_dmul>
 8007784:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007788:	eb0b 0507 	add.w	r5, fp, r7
 800778c:	465e      	mov	r6, fp
 800778e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007792:	f7f9 f98d 	bl	8000ab0 <__aeabi_d2iz>
 8007796:	4607      	mov	r7, r0
 8007798:	f7f8 fe70 	bl	800047c <__aeabi_i2d>
 800779c:	3730      	adds	r7, #48	; 0x30
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077a6:	f7f8 fd1b 	bl	80001e0 <__aeabi_dsub>
 80077aa:	f806 7b01 	strb.w	r7, [r6], #1
 80077ae:	42ae      	cmp	r6, r5
 80077b0:	e9cd 0100 	strd	r0, r1, [sp]
 80077b4:	f04f 0200 	mov.w	r2, #0
 80077b8:	d126      	bne.n	8007808 <_dtoa_r+0x5e8>
 80077ba:	4b1c      	ldr	r3, [pc, #112]	; (800782c <_dtoa_r+0x60c>)
 80077bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077c0:	f7f8 fd10 	bl	80001e4 <__adddf3>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077cc:	f7f9 f950 	bl	8000a70 <__aeabi_dcmpgt>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d174      	bne.n	80078be <_dtoa_r+0x69e>
 80077d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077d8:	2000      	movs	r0, #0
 80077da:	4914      	ldr	r1, [pc, #80]	; (800782c <_dtoa_r+0x60c>)
 80077dc:	f7f8 fd00 	bl	80001e0 <__aeabi_dsub>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077e8:	f7f9 f924 	bl	8000a34 <__aeabi_dcmplt>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	f43f af30 	beq.w	8007652 <_dtoa_r+0x432>
 80077f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077f6:	2b30      	cmp	r3, #48	; 0x30
 80077f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80077fc:	d002      	beq.n	8007804 <_dtoa_r+0x5e4>
 80077fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007802:	e04a      	b.n	800789a <_dtoa_r+0x67a>
 8007804:	4615      	mov	r5, r2
 8007806:	e7f4      	b.n	80077f2 <_dtoa_r+0x5d2>
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <_dtoa_r+0x600>)
 800780a:	f7f8 fea1 	bl	8000550 <__aeabi_dmul>
 800780e:	e9cd 0100 	strd	r0, r1, [sp]
 8007812:	e7bc      	b.n	800778e <_dtoa_r+0x56e>
 8007814:	08008638 	.word	0x08008638
 8007818:	08008610 	.word	0x08008610
 800781c:	3ff00000 	.word	0x3ff00000
 8007820:	40240000 	.word	0x40240000
 8007824:	401c0000 	.word	0x401c0000
 8007828:	40140000 	.word	0x40140000
 800782c:	3fe00000 	.word	0x3fe00000
 8007830:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007834:	465d      	mov	r5, fp
 8007836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800783a:	4630      	mov	r0, r6
 800783c:	4639      	mov	r1, r7
 800783e:	f7f8 ffb1 	bl	80007a4 <__aeabi_ddiv>
 8007842:	f7f9 f935 	bl	8000ab0 <__aeabi_d2iz>
 8007846:	4680      	mov	r8, r0
 8007848:	f7f8 fe18 	bl	800047c <__aeabi_i2d>
 800784c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007850:	f7f8 fe7e 	bl	8000550 <__aeabi_dmul>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4630      	mov	r0, r6
 800785a:	4639      	mov	r1, r7
 800785c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007860:	f7f8 fcbe 	bl	80001e0 <__aeabi_dsub>
 8007864:	f805 6b01 	strb.w	r6, [r5], #1
 8007868:	eba5 060b 	sub.w	r6, r5, fp
 800786c:	45b1      	cmp	r9, r6
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	d139      	bne.n	80078e8 <_dtoa_r+0x6c8>
 8007874:	f7f8 fcb6 	bl	80001e4 <__adddf3>
 8007878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800787c:	4606      	mov	r6, r0
 800787e:	460f      	mov	r7, r1
 8007880:	f7f9 f8f6 	bl	8000a70 <__aeabi_dcmpgt>
 8007884:	b9c8      	cbnz	r0, 80078ba <_dtoa_r+0x69a>
 8007886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800788a:	4630      	mov	r0, r6
 800788c:	4639      	mov	r1, r7
 800788e:	f7f9 f8c7 	bl	8000a20 <__aeabi_dcmpeq>
 8007892:	b110      	cbz	r0, 800789a <_dtoa_r+0x67a>
 8007894:	f018 0f01 	tst.w	r8, #1
 8007898:	d10f      	bne.n	80078ba <_dtoa_r+0x69a>
 800789a:	9904      	ldr	r1, [sp, #16]
 800789c:	4620      	mov	r0, r4
 800789e:	f000 fac1 	bl	8007e24 <_Bfree>
 80078a2:	2300      	movs	r3, #0
 80078a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078a6:	702b      	strb	r3, [r5, #0]
 80078a8:	f10a 0301 	add.w	r3, sl, #1
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 8241 	beq.w	8007d38 <_dtoa_r+0xb18>
 80078b6:	601d      	str	r5, [r3, #0]
 80078b8:	e23e      	b.n	8007d38 <_dtoa_r+0xb18>
 80078ba:	f8cd a020 	str.w	sl, [sp, #32]
 80078be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078c2:	2a39      	cmp	r2, #57	; 0x39
 80078c4:	f105 33ff 	add.w	r3, r5, #4294967295
 80078c8:	d108      	bne.n	80078dc <_dtoa_r+0x6bc>
 80078ca:	459b      	cmp	fp, r3
 80078cc:	d10a      	bne.n	80078e4 <_dtoa_r+0x6c4>
 80078ce:	9b08      	ldr	r3, [sp, #32]
 80078d0:	3301      	adds	r3, #1
 80078d2:	9308      	str	r3, [sp, #32]
 80078d4:	2330      	movs	r3, #48	; 0x30
 80078d6:	f88b 3000 	strb.w	r3, [fp]
 80078da:	465b      	mov	r3, fp
 80078dc:	781a      	ldrb	r2, [r3, #0]
 80078de:	3201      	adds	r2, #1
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	e78c      	b.n	80077fe <_dtoa_r+0x5de>
 80078e4:	461d      	mov	r5, r3
 80078e6:	e7ea      	b.n	80078be <_dtoa_r+0x69e>
 80078e8:	2200      	movs	r2, #0
 80078ea:	4b9b      	ldr	r3, [pc, #620]	; (8007b58 <_dtoa_r+0x938>)
 80078ec:	f7f8 fe30 	bl	8000550 <__aeabi_dmul>
 80078f0:	2200      	movs	r2, #0
 80078f2:	2300      	movs	r3, #0
 80078f4:	4606      	mov	r6, r0
 80078f6:	460f      	mov	r7, r1
 80078f8:	f7f9 f892 	bl	8000a20 <__aeabi_dcmpeq>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	d09a      	beq.n	8007836 <_dtoa_r+0x616>
 8007900:	e7cb      	b.n	800789a <_dtoa_r+0x67a>
 8007902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007904:	2a00      	cmp	r2, #0
 8007906:	f000 808b 	beq.w	8007a20 <_dtoa_r+0x800>
 800790a:	9a06      	ldr	r2, [sp, #24]
 800790c:	2a01      	cmp	r2, #1
 800790e:	dc6e      	bgt.n	80079ee <_dtoa_r+0x7ce>
 8007910:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007912:	2a00      	cmp	r2, #0
 8007914:	d067      	beq.n	80079e6 <_dtoa_r+0x7c6>
 8007916:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800791a:	9f07      	ldr	r7, [sp, #28]
 800791c:	9d05      	ldr	r5, [sp, #20]
 800791e:	9a05      	ldr	r2, [sp, #20]
 8007920:	2101      	movs	r1, #1
 8007922:	441a      	add	r2, r3
 8007924:	4620      	mov	r0, r4
 8007926:	9205      	str	r2, [sp, #20]
 8007928:	4498      	add	r8, r3
 800792a:	f000 fb1b 	bl	8007f64 <__i2b>
 800792e:	4606      	mov	r6, r0
 8007930:	2d00      	cmp	r5, #0
 8007932:	dd0c      	ble.n	800794e <_dtoa_r+0x72e>
 8007934:	f1b8 0f00 	cmp.w	r8, #0
 8007938:	dd09      	ble.n	800794e <_dtoa_r+0x72e>
 800793a:	4545      	cmp	r5, r8
 800793c:	9a05      	ldr	r2, [sp, #20]
 800793e:	462b      	mov	r3, r5
 8007940:	bfa8      	it	ge
 8007942:	4643      	movge	r3, r8
 8007944:	1ad2      	subs	r2, r2, r3
 8007946:	9205      	str	r2, [sp, #20]
 8007948:	1aed      	subs	r5, r5, r3
 800794a:	eba8 0803 	sub.w	r8, r8, r3
 800794e:	9b07      	ldr	r3, [sp, #28]
 8007950:	b1eb      	cbz	r3, 800798e <_dtoa_r+0x76e>
 8007952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007954:	2b00      	cmp	r3, #0
 8007956:	d067      	beq.n	8007a28 <_dtoa_r+0x808>
 8007958:	b18f      	cbz	r7, 800797e <_dtoa_r+0x75e>
 800795a:	4631      	mov	r1, r6
 800795c:	463a      	mov	r2, r7
 800795e:	4620      	mov	r0, r4
 8007960:	f000 fba0 	bl	80080a4 <__pow5mult>
 8007964:	9a04      	ldr	r2, [sp, #16]
 8007966:	4601      	mov	r1, r0
 8007968:	4606      	mov	r6, r0
 800796a:	4620      	mov	r0, r4
 800796c:	f000 fb03 	bl	8007f76 <__multiply>
 8007970:	9904      	ldr	r1, [sp, #16]
 8007972:	9008      	str	r0, [sp, #32]
 8007974:	4620      	mov	r0, r4
 8007976:	f000 fa55 	bl	8007e24 <_Bfree>
 800797a:	9b08      	ldr	r3, [sp, #32]
 800797c:	9304      	str	r3, [sp, #16]
 800797e:	9b07      	ldr	r3, [sp, #28]
 8007980:	1bda      	subs	r2, r3, r7
 8007982:	d004      	beq.n	800798e <_dtoa_r+0x76e>
 8007984:	9904      	ldr	r1, [sp, #16]
 8007986:	4620      	mov	r0, r4
 8007988:	f000 fb8c 	bl	80080a4 <__pow5mult>
 800798c:	9004      	str	r0, [sp, #16]
 800798e:	2101      	movs	r1, #1
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fae7 	bl	8007f64 <__i2b>
 8007996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007998:	4607      	mov	r7, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 81d0 	beq.w	8007d40 <_dtoa_r+0xb20>
 80079a0:	461a      	mov	r2, r3
 80079a2:	4601      	mov	r1, r0
 80079a4:	4620      	mov	r0, r4
 80079a6:	f000 fb7d 	bl	80080a4 <__pow5mult>
 80079aa:	9b06      	ldr	r3, [sp, #24]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	4607      	mov	r7, r0
 80079b0:	dc40      	bgt.n	8007a34 <_dtoa_r+0x814>
 80079b2:	9b00      	ldr	r3, [sp, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d139      	bne.n	8007a2c <_dtoa_r+0x80c>
 80079b8:	9b01      	ldr	r3, [sp, #4]
 80079ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d136      	bne.n	8007a30 <_dtoa_r+0x810>
 80079c2:	9b01      	ldr	r3, [sp, #4]
 80079c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079c8:	0d1b      	lsrs	r3, r3, #20
 80079ca:	051b      	lsls	r3, r3, #20
 80079cc:	b12b      	cbz	r3, 80079da <_dtoa_r+0x7ba>
 80079ce:	9b05      	ldr	r3, [sp, #20]
 80079d0:	3301      	adds	r3, #1
 80079d2:	9305      	str	r3, [sp, #20]
 80079d4:	f108 0801 	add.w	r8, r8, #1
 80079d8:	2301      	movs	r3, #1
 80079da:	9307      	str	r3, [sp, #28]
 80079dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d12a      	bne.n	8007a38 <_dtoa_r+0x818>
 80079e2:	2001      	movs	r0, #1
 80079e4:	e030      	b.n	8007a48 <_dtoa_r+0x828>
 80079e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079ec:	e795      	b.n	800791a <_dtoa_r+0x6fa>
 80079ee:	9b07      	ldr	r3, [sp, #28]
 80079f0:	f109 37ff 	add.w	r7, r9, #4294967295
 80079f4:	42bb      	cmp	r3, r7
 80079f6:	bfbf      	itttt	lt
 80079f8:	9b07      	ldrlt	r3, [sp, #28]
 80079fa:	9707      	strlt	r7, [sp, #28]
 80079fc:	1afa      	sublt	r2, r7, r3
 80079fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007a00:	bfbb      	ittet	lt
 8007a02:	189b      	addlt	r3, r3, r2
 8007a04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007a06:	1bdf      	subge	r7, r3, r7
 8007a08:	2700      	movlt	r7, #0
 8007a0a:	f1b9 0f00 	cmp.w	r9, #0
 8007a0e:	bfb5      	itete	lt
 8007a10:	9b05      	ldrlt	r3, [sp, #20]
 8007a12:	9d05      	ldrge	r5, [sp, #20]
 8007a14:	eba3 0509 	sublt.w	r5, r3, r9
 8007a18:	464b      	movge	r3, r9
 8007a1a:	bfb8      	it	lt
 8007a1c:	2300      	movlt	r3, #0
 8007a1e:	e77e      	b.n	800791e <_dtoa_r+0x6fe>
 8007a20:	9f07      	ldr	r7, [sp, #28]
 8007a22:	9d05      	ldr	r5, [sp, #20]
 8007a24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007a26:	e783      	b.n	8007930 <_dtoa_r+0x710>
 8007a28:	9a07      	ldr	r2, [sp, #28]
 8007a2a:	e7ab      	b.n	8007984 <_dtoa_r+0x764>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e7d4      	b.n	80079da <_dtoa_r+0x7ba>
 8007a30:	9b00      	ldr	r3, [sp, #0]
 8007a32:	e7d2      	b.n	80079da <_dtoa_r+0x7ba>
 8007a34:	2300      	movs	r3, #0
 8007a36:	9307      	str	r3, [sp, #28]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007a3e:	6918      	ldr	r0, [r3, #16]
 8007a40:	f000 fa42 	bl	8007ec8 <__hi0bits>
 8007a44:	f1c0 0020 	rsb	r0, r0, #32
 8007a48:	4440      	add	r0, r8
 8007a4a:	f010 001f 	ands.w	r0, r0, #31
 8007a4e:	d047      	beq.n	8007ae0 <_dtoa_r+0x8c0>
 8007a50:	f1c0 0320 	rsb	r3, r0, #32
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	dd3b      	ble.n	8007ad0 <_dtoa_r+0x8b0>
 8007a58:	9b05      	ldr	r3, [sp, #20]
 8007a5a:	f1c0 001c 	rsb	r0, r0, #28
 8007a5e:	4403      	add	r3, r0
 8007a60:	9305      	str	r3, [sp, #20]
 8007a62:	4405      	add	r5, r0
 8007a64:	4480      	add	r8, r0
 8007a66:	9b05      	ldr	r3, [sp, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	dd05      	ble.n	8007a78 <_dtoa_r+0x858>
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	9904      	ldr	r1, [sp, #16]
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 fb65 	bl	8008140 <__lshift>
 8007a76:	9004      	str	r0, [sp, #16]
 8007a78:	f1b8 0f00 	cmp.w	r8, #0
 8007a7c:	dd05      	ble.n	8007a8a <_dtoa_r+0x86a>
 8007a7e:	4639      	mov	r1, r7
 8007a80:	4642      	mov	r2, r8
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 fb5c 	bl	8008140 <__lshift>
 8007a88:	4607      	mov	r7, r0
 8007a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a8c:	b353      	cbz	r3, 8007ae4 <_dtoa_r+0x8c4>
 8007a8e:	4639      	mov	r1, r7
 8007a90:	9804      	ldr	r0, [sp, #16]
 8007a92:	f000 fba9 	bl	80081e8 <__mcmp>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	da24      	bge.n	8007ae4 <_dtoa_r+0x8c4>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	220a      	movs	r2, #10
 8007a9e:	9904      	ldr	r1, [sp, #16]
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f000 f9d6 	bl	8007e52 <__multadd>
 8007aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa8:	9004      	str	r0, [sp, #16]
 8007aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 814d 	beq.w	8007d4e <_dtoa_r+0xb2e>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	220a      	movs	r2, #10
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 f9c9 	bl	8007e52 <__multadd>
 8007ac0:	9b02      	ldr	r3, [sp, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	dc4f      	bgt.n	8007b68 <_dtoa_r+0x948>
 8007ac8:	9b06      	ldr	r3, [sp, #24]
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	dd4c      	ble.n	8007b68 <_dtoa_r+0x948>
 8007ace:	e011      	b.n	8007af4 <_dtoa_r+0x8d4>
 8007ad0:	d0c9      	beq.n	8007a66 <_dtoa_r+0x846>
 8007ad2:	9a05      	ldr	r2, [sp, #20]
 8007ad4:	331c      	adds	r3, #28
 8007ad6:	441a      	add	r2, r3
 8007ad8:	9205      	str	r2, [sp, #20]
 8007ada:	441d      	add	r5, r3
 8007adc:	4498      	add	r8, r3
 8007ade:	e7c2      	b.n	8007a66 <_dtoa_r+0x846>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	e7f6      	b.n	8007ad2 <_dtoa_r+0x8b2>
 8007ae4:	f1b9 0f00 	cmp.w	r9, #0
 8007ae8:	dc38      	bgt.n	8007b5c <_dtoa_r+0x93c>
 8007aea:	9b06      	ldr	r3, [sp, #24]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	dd35      	ble.n	8007b5c <_dtoa_r+0x93c>
 8007af0:	f8cd 9008 	str.w	r9, [sp, #8]
 8007af4:	9b02      	ldr	r3, [sp, #8]
 8007af6:	b963      	cbnz	r3, 8007b12 <_dtoa_r+0x8f2>
 8007af8:	4639      	mov	r1, r7
 8007afa:	2205      	movs	r2, #5
 8007afc:	4620      	mov	r0, r4
 8007afe:	f000 f9a8 	bl	8007e52 <__multadd>
 8007b02:	4601      	mov	r1, r0
 8007b04:	4607      	mov	r7, r0
 8007b06:	9804      	ldr	r0, [sp, #16]
 8007b08:	f000 fb6e 	bl	80081e8 <__mcmp>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	f73f adcc 	bgt.w	80076aa <_dtoa_r+0x48a>
 8007b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b14:	465d      	mov	r5, fp
 8007b16:	ea6f 0a03 	mvn.w	sl, r3
 8007b1a:	f04f 0900 	mov.w	r9, #0
 8007b1e:	4639      	mov	r1, r7
 8007b20:	4620      	mov	r0, r4
 8007b22:	f000 f97f 	bl	8007e24 <_Bfree>
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	f43f aeb7 	beq.w	800789a <_dtoa_r+0x67a>
 8007b2c:	f1b9 0f00 	cmp.w	r9, #0
 8007b30:	d005      	beq.n	8007b3e <_dtoa_r+0x91e>
 8007b32:	45b1      	cmp	r9, r6
 8007b34:	d003      	beq.n	8007b3e <_dtoa_r+0x91e>
 8007b36:	4649      	mov	r1, r9
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 f973 	bl	8007e24 <_Bfree>
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 f96f 	bl	8007e24 <_Bfree>
 8007b46:	e6a8      	b.n	800789a <_dtoa_r+0x67a>
 8007b48:	2700      	movs	r7, #0
 8007b4a:	463e      	mov	r6, r7
 8007b4c:	e7e1      	b.n	8007b12 <_dtoa_r+0x8f2>
 8007b4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007b52:	463e      	mov	r6, r7
 8007b54:	e5a9      	b.n	80076aa <_dtoa_r+0x48a>
 8007b56:	bf00      	nop
 8007b58:	40240000 	.word	0x40240000
 8007b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 80fa 	beq.w	8007d5c <_dtoa_r+0xb3c>
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	dd05      	ble.n	8007b78 <_dtoa_r+0x958>
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	462a      	mov	r2, r5
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 fae5 	bl	8008140 <__lshift>
 8007b76:	4606      	mov	r6, r0
 8007b78:	9b07      	ldr	r3, [sp, #28]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d04c      	beq.n	8007c18 <_dtoa_r+0x9f8>
 8007b7e:	6871      	ldr	r1, [r6, #4]
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 f91b 	bl	8007dbc <_Balloc>
 8007b86:	6932      	ldr	r2, [r6, #16]
 8007b88:	3202      	adds	r2, #2
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	0092      	lsls	r2, r2, #2
 8007b8e:	f106 010c 	add.w	r1, r6, #12
 8007b92:	300c      	adds	r0, #12
 8007b94:	f7fe ff58 	bl	8006a48 <memcpy>
 8007b98:	2201      	movs	r2, #1
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f000 facf 	bl	8008140 <__lshift>
 8007ba2:	9b00      	ldr	r3, [sp, #0]
 8007ba4:	f8cd b014 	str.w	fp, [sp, #20]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	46b1      	mov	r9, r6
 8007bae:	9307      	str	r3, [sp, #28]
 8007bb0:	4606      	mov	r6, r0
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	9804      	ldr	r0, [sp, #16]
 8007bb6:	f7ff faa4 	bl	8007102 <quorem>
 8007bba:	4649      	mov	r1, r9
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007bc2:	9804      	ldr	r0, [sp, #16]
 8007bc4:	f000 fb10 	bl	80081e8 <__mcmp>
 8007bc8:	4632      	mov	r2, r6
 8007bca:	9000      	str	r0, [sp, #0]
 8007bcc:	4639      	mov	r1, r7
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f000 fb24 	bl	800821c <__mdiff>
 8007bd4:	68c3      	ldr	r3, [r0, #12]
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	bb03      	cbnz	r3, 8007c1c <_dtoa_r+0x9fc>
 8007bda:	4601      	mov	r1, r0
 8007bdc:	9008      	str	r0, [sp, #32]
 8007bde:	9804      	ldr	r0, [sp, #16]
 8007be0:	f000 fb02 	bl	80081e8 <__mcmp>
 8007be4:	9a08      	ldr	r2, [sp, #32]
 8007be6:	4603      	mov	r3, r0
 8007be8:	4611      	mov	r1, r2
 8007bea:	4620      	mov	r0, r4
 8007bec:	9308      	str	r3, [sp, #32]
 8007bee:	f000 f919 	bl	8007e24 <_Bfree>
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	b9a3      	cbnz	r3, 8007c20 <_dtoa_r+0xa00>
 8007bf6:	9a06      	ldr	r2, [sp, #24]
 8007bf8:	b992      	cbnz	r2, 8007c20 <_dtoa_r+0xa00>
 8007bfa:	9a07      	ldr	r2, [sp, #28]
 8007bfc:	b982      	cbnz	r2, 8007c20 <_dtoa_r+0xa00>
 8007bfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c02:	d029      	beq.n	8007c58 <_dtoa_r+0xa38>
 8007c04:	9b00      	ldr	r3, [sp, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	dd01      	ble.n	8007c0e <_dtoa_r+0x9ee>
 8007c0a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007c0e:	9b05      	ldr	r3, [sp, #20]
 8007c10:	1c5d      	adds	r5, r3, #1
 8007c12:	f883 8000 	strb.w	r8, [r3]
 8007c16:	e782      	b.n	8007b1e <_dtoa_r+0x8fe>
 8007c18:	4630      	mov	r0, r6
 8007c1a:	e7c2      	b.n	8007ba2 <_dtoa_r+0x982>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e7e3      	b.n	8007be8 <_dtoa_r+0x9c8>
 8007c20:	9a00      	ldr	r2, [sp, #0]
 8007c22:	2a00      	cmp	r2, #0
 8007c24:	db04      	blt.n	8007c30 <_dtoa_r+0xa10>
 8007c26:	d125      	bne.n	8007c74 <_dtoa_r+0xa54>
 8007c28:	9a06      	ldr	r2, [sp, #24]
 8007c2a:	bb1a      	cbnz	r2, 8007c74 <_dtoa_r+0xa54>
 8007c2c:	9a07      	ldr	r2, [sp, #28]
 8007c2e:	bb0a      	cbnz	r2, 8007c74 <_dtoa_r+0xa54>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	ddec      	ble.n	8007c0e <_dtoa_r+0x9ee>
 8007c34:	2201      	movs	r2, #1
 8007c36:	9904      	ldr	r1, [sp, #16]
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fa81 	bl	8008140 <__lshift>
 8007c3e:	4639      	mov	r1, r7
 8007c40:	9004      	str	r0, [sp, #16]
 8007c42:	f000 fad1 	bl	80081e8 <__mcmp>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	dc03      	bgt.n	8007c52 <_dtoa_r+0xa32>
 8007c4a:	d1e0      	bne.n	8007c0e <_dtoa_r+0x9ee>
 8007c4c:	f018 0f01 	tst.w	r8, #1
 8007c50:	d0dd      	beq.n	8007c0e <_dtoa_r+0x9ee>
 8007c52:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c56:	d1d8      	bne.n	8007c0a <_dtoa_r+0x9ea>
 8007c58:	9b05      	ldr	r3, [sp, #20]
 8007c5a:	9a05      	ldr	r2, [sp, #20]
 8007c5c:	1c5d      	adds	r5, r3, #1
 8007c5e:	2339      	movs	r3, #57	; 0x39
 8007c60:	7013      	strb	r3, [r2, #0]
 8007c62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c66:	2b39      	cmp	r3, #57	; 0x39
 8007c68:	f105 32ff 	add.w	r2, r5, #4294967295
 8007c6c:	d04f      	beq.n	8007d0e <_dtoa_r+0xaee>
 8007c6e:	3301      	adds	r3, #1
 8007c70:	7013      	strb	r3, [r2, #0]
 8007c72:	e754      	b.n	8007b1e <_dtoa_r+0x8fe>
 8007c74:	9a05      	ldr	r2, [sp, #20]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f102 0501 	add.w	r5, r2, #1
 8007c7c:	dd06      	ble.n	8007c8c <_dtoa_r+0xa6c>
 8007c7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c82:	d0e9      	beq.n	8007c58 <_dtoa_r+0xa38>
 8007c84:	f108 0801 	add.w	r8, r8, #1
 8007c88:	9b05      	ldr	r3, [sp, #20]
 8007c8a:	e7c2      	b.n	8007c12 <_dtoa_r+0x9f2>
 8007c8c:	9a02      	ldr	r2, [sp, #8]
 8007c8e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007c92:	eba5 030b 	sub.w	r3, r5, fp
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d021      	beq.n	8007cde <_dtoa_r+0xabe>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	220a      	movs	r2, #10
 8007c9e:	9904      	ldr	r1, [sp, #16]
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 f8d6 	bl	8007e52 <__multadd>
 8007ca6:	45b1      	cmp	r9, r6
 8007ca8:	9004      	str	r0, [sp, #16]
 8007caa:	f04f 0300 	mov.w	r3, #0
 8007cae:	f04f 020a 	mov.w	r2, #10
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	d105      	bne.n	8007cc4 <_dtoa_r+0xaa4>
 8007cb8:	f000 f8cb 	bl	8007e52 <__multadd>
 8007cbc:	4681      	mov	r9, r0
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	9505      	str	r5, [sp, #20]
 8007cc2:	e776      	b.n	8007bb2 <_dtoa_r+0x992>
 8007cc4:	f000 f8c5 	bl	8007e52 <__multadd>
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4681      	mov	r9, r0
 8007ccc:	2300      	movs	r3, #0
 8007cce:	220a      	movs	r2, #10
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 f8be 	bl	8007e52 <__multadd>
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	e7f2      	b.n	8007cc0 <_dtoa_r+0xaa0>
 8007cda:	f04f 0900 	mov.w	r9, #0
 8007cde:	2201      	movs	r2, #1
 8007ce0:	9904      	ldr	r1, [sp, #16]
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 fa2c 	bl	8008140 <__lshift>
 8007ce8:	4639      	mov	r1, r7
 8007cea:	9004      	str	r0, [sp, #16]
 8007cec:	f000 fa7c 	bl	80081e8 <__mcmp>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	dcb6      	bgt.n	8007c62 <_dtoa_r+0xa42>
 8007cf4:	d102      	bne.n	8007cfc <_dtoa_r+0xadc>
 8007cf6:	f018 0f01 	tst.w	r8, #1
 8007cfa:	d1b2      	bne.n	8007c62 <_dtoa_r+0xa42>
 8007cfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d00:	2b30      	cmp	r3, #48	; 0x30
 8007d02:	f105 32ff 	add.w	r2, r5, #4294967295
 8007d06:	f47f af0a 	bne.w	8007b1e <_dtoa_r+0x8fe>
 8007d0a:	4615      	mov	r5, r2
 8007d0c:	e7f6      	b.n	8007cfc <_dtoa_r+0xadc>
 8007d0e:	4593      	cmp	fp, r2
 8007d10:	d105      	bne.n	8007d1e <_dtoa_r+0xafe>
 8007d12:	2331      	movs	r3, #49	; 0x31
 8007d14:	f10a 0a01 	add.w	sl, sl, #1
 8007d18:	f88b 3000 	strb.w	r3, [fp]
 8007d1c:	e6ff      	b.n	8007b1e <_dtoa_r+0x8fe>
 8007d1e:	4615      	mov	r5, r2
 8007d20:	e79f      	b.n	8007c62 <_dtoa_r+0xa42>
 8007d22:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007d88 <_dtoa_r+0xb68>
 8007d26:	e007      	b.n	8007d38 <_dtoa_r+0xb18>
 8007d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007d8c <_dtoa_r+0xb6c>
 8007d2e:	b11b      	cbz	r3, 8007d38 <_dtoa_r+0xb18>
 8007d30:	f10b 0308 	add.w	r3, fp, #8
 8007d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	4658      	mov	r0, fp
 8007d3a:	b017      	add	sp, #92	; 0x5c
 8007d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d40:	9b06      	ldr	r3, [sp, #24]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	f77f ae35 	ble.w	80079b2 <_dtoa_r+0x792>
 8007d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d4a:	9307      	str	r3, [sp, #28]
 8007d4c:	e649      	b.n	80079e2 <_dtoa_r+0x7c2>
 8007d4e:	9b02      	ldr	r3, [sp, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	dc03      	bgt.n	8007d5c <_dtoa_r+0xb3c>
 8007d54:	9b06      	ldr	r3, [sp, #24]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	f73f aecc 	bgt.w	8007af4 <_dtoa_r+0x8d4>
 8007d5c:	465d      	mov	r5, fp
 8007d5e:	4639      	mov	r1, r7
 8007d60:	9804      	ldr	r0, [sp, #16]
 8007d62:	f7ff f9ce 	bl	8007102 <quorem>
 8007d66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d6a:	f805 8b01 	strb.w	r8, [r5], #1
 8007d6e:	9a02      	ldr	r2, [sp, #8]
 8007d70:	eba5 030b 	sub.w	r3, r5, fp
 8007d74:	429a      	cmp	r2, r3
 8007d76:	ddb0      	ble.n	8007cda <_dtoa_r+0xaba>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	220a      	movs	r2, #10
 8007d7c:	9904      	ldr	r1, [sp, #16]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 f867 	bl	8007e52 <__multadd>
 8007d84:	9004      	str	r0, [sp, #16]
 8007d86:	e7ea      	b.n	8007d5e <_dtoa_r+0xb3e>
 8007d88:	080085fc 	.word	0x080085fc
 8007d8c:	080085fe 	.word	0x080085fe

08007d90 <_localeconv_r>:
 8007d90:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <_localeconv_r+0x14>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6a18      	ldr	r0, [r3, #32]
 8007d96:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <_localeconv_r+0x18>)
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	bf08      	it	eq
 8007d9c:	4618      	moveq	r0, r3
 8007d9e:	30f0      	adds	r0, #240	; 0xf0
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	2000002c 	.word	0x2000002c
 8007da8:	20000090 	.word	0x20000090

08007dac <malloc>:
 8007dac:	4b02      	ldr	r3, [pc, #8]	; (8007db8 <malloc+0xc>)
 8007dae:	4601      	mov	r1, r0
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	f000 baed 	b.w	8008390 <_malloc_r>
 8007db6:	bf00      	nop
 8007db8:	2000002c 	.word	0x2000002c

08007dbc <_Balloc>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	460e      	mov	r6, r1
 8007dc4:	b93d      	cbnz	r5, 8007dd6 <_Balloc+0x1a>
 8007dc6:	2010      	movs	r0, #16
 8007dc8:	f7ff fff0 	bl	8007dac <malloc>
 8007dcc:	6260      	str	r0, [r4, #36]	; 0x24
 8007dce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007dd2:	6005      	str	r5, [r0, #0]
 8007dd4:	60c5      	str	r5, [r0, #12]
 8007dd6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007dd8:	68eb      	ldr	r3, [r5, #12]
 8007dda:	b183      	cbz	r3, 8007dfe <_Balloc+0x42>
 8007ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007de4:	b9b8      	cbnz	r0, 8007e16 <_Balloc+0x5a>
 8007de6:	2101      	movs	r1, #1
 8007de8:	fa01 f506 	lsl.w	r5, r1, r6
 8007dec:	1d6a      	adds	r2, r5, #5
 8007dee:	0092      	lsls	r2, r2, #2
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fabf 	bl	8008374 <_calloc_r>
 8007df6:	b160      	cbz	r0, 8007e12 <_Balloc+0x56>
 8007df8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007dfc:	e00e      	b.n	8007e1c <_Balloc+0x60>
 8007dfe:	2221      	movs	r2, #33	; 0x21
 8007e00:	2104      	movs	r1, #4
 8007e02:	4620      	mov	r0, r4
 8007e04:	f000 fab6 	bl	8008374 <_calloc_r>
 8007e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e0a:	60e8      	str	r0, [r5, #12]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e4      	bne.n	8007ddc <_Balloc+0x20>
 8007e12:	2000      	movs	r0, #0
 8007e14:	bd70      	pop	{r4, r5, r6, pc}
 8007e16:	6802      	ldr	r2, [r0, #0]
 8007e18:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e22:	e7f7      	b.n	8007e14 <_Balloc+0x58>

08007e24 <_Bfree>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007e28:	4606      	mov	r6, r0
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	b93c      	cbnz	r4, 8007e3e <_Bfree+0x1a>
 8007e2e:	2010      	movs	r0, #16
 8007e30:	f7ff ffbc 	bl	8007dac <malloc>
 8007e34:	6270      	str	r0, [r6, #36]	; 0x24
 8007e36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e3a:	6004      	str	r4, [r0, #0]
 8007e3c:	60c4      	str	r4, [r0, #12]
 8007e3e:	b13d      	cbz	r5, 8007e50 <_Bfree+0x2c>
 8007e40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e42:	686a      	ldr	r2, [r5, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e4a:	6029      	str	r1, [r5, #0]
 8007e4c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007e50:	bd70      	pop	{r4, r5, r6, pc}

08007e52 <__multadd>:
 8007e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e56:	690d      	ldr	r5, [r1, #16]
 8007e58:	461f      	mov	r7, r3
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	f101 0c14 	add.w	ip, r1, #20
 8007e62:	2300      	movs	r3, #0
 8007e64:	f8dc 0000 	ldr.w	r0, [ip]
 8007e68:	b281      	uxth	r1, r0
 8007e6a:	fb02 7101 	mla	r1, r2, r1, r7
 8007e6e:	0c0f      	lsrs	r7, r1, #16
 8007e70:	0c00      	lsrs	r0, r0, #16
 8007e72:	fb02 7000 	mla	r0, r2, r0, r7
 8007e76:	b289      	uxth	r1, r1
 8007e78:	3301      	adds	r3, #1
 8007e7a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007e7e:	429d      	cmp	r5, r3
 8007e80:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007e84:	f84c 1b04 	str.w	r1, [ip], #4
 8007e88:	dcec      	bgt.n	8007e64 <__multadd+0x12>
 8007e8a:	b1d7      	cbz	r7, 8007ec2 <__multadd+0x70>
 8007e8c:	68a3      	ldr	r3, [r4, #8]
 8007e8e:	42ab      	cmp	r3, r5
 8007e90:	dc12      	bgt.n	8007eb8 <__multadd+0x66>
 8007e92:	6861      	ldr	r1, [r4, #4]
 8007e94:	4630      	mov	r0, r6
 8007e96:	3101      	adds	r1, #1
 8007e98:	f7ff ff90 	bl	8007dbc <_Balloc>
 8007e9c:	6922      	ldr	r2, [r4, #16]
 8007e9e:	3202      	adds	r2, #2
 8007ea0:	f104 010c 	add.w	r1, r4, #12
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	0092      	lsls	r2, r2, #2
 8007ea8:	300c      	adds	r0, #12
 8007eaa:	f7fe fdcd 	bl	8006a48 <memcpy>
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f7ff ffb7 	bl	8007e24 <_Bfree>
 8007eb6:	4644      	mov	r4, r8
 8007eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	615f      	str	r7, [r3, #20]
 8007ec0:	6125      	str	r5, [r4, #16]
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ec8 <__hi0bits>:
 8007ec8:	0c02      	lsrs	r2, r0, #16
 8007eca:	0412      	lsls	r2, r2, #16
 8007ecc:	4603      	mov	r3, r0
 8007ece:	b9b2      	cbnz	r2, 8007efe <__hi0bits+0x36>
 8007ed0:	0403      	lsls	r3, r0, #16
 8007ed2:	2010      	movs	r0, #16
 8007ed4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007ed8:	bf04      	itt	eq
 8007eda:	021b      	lsleq	r3, r3, #8
 8007edc:	3008      	addeq	r0, #8
 8007ede:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007ee2:	bf04      	itt	eq
 8007ee4:	011b      	lsleq	r3, r3, #4
 8007ee6:	3004      	addeq	r0, #4
 8007ee8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007eec:	bf04      	itt	eq
 8007eee:	009b      	lsleq	r3, r3, #2
 8007ef0:	3002      	addeq	r0, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	db06      	blt.n	8007f04 <__hi0bits+0x3c>
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	d503      	bpl.n	8007f02 <__hi0bits+0x3a>
 8007efa:	3001      	adds	r0, #1
 8007efc:	4770      	bx	lr
 8007efe:	2000      	movs	r0, #0
 8007f00:	e7e8      	b.n	8007ed4 <__hi0bits+0xc>
 8007f02:	2020      	movs	r0, #32
 8007f04:	4770      	bx	lr

08007f06 <__lo0bits>:
 8007f06:	6803      	ldr	r3, [r0, #0]
 8007f08:	f013 0207 	ands.w	r2, r3, #7
 8007f0c:	4601      	mov	r1, r0
 8007f0e:	d00b      	beq.n	8007f28 <__lo0bits+0x22>
 8007f10:	07da      	lsls	r2, r3, #31
 8007f12:	d423      	bmi.n	8007f5c <__lo0bits+0x56>
 8007f14:	0798      	lsls	r0, r3, #30
 8007f16:	bf49      	itett	mi
 8007f18:	085b      	lsrmi	r3, r3, #1
 8007f1a:	089b      	lsrpl	r3, r3, #2
 8007f1c:	2001      	movmi	r0, #1
 8007f1e:	600b      	strmi	r3, [r1, #0]
 8007f20:	bf5c      	itt	pl
 8007f22:	600b      	strpl	r3, [r1, #0]
 8007f24:	2002      	movpl	r0, #2
 8007f26:	4770      	bx	lr
 8007f28:	b298      	uxth	r0, r3
 8007f2a:	b9a8      	cbnz	r0, 8007f58 <__lo0bits+0x52>
 8007f2c:	0c1b      	lsrs	r3, r3, #16
 8007f2e:	2010      	movs	r0, #16
 8007f30:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007f34:	bf04      	itt	eq
 8007f36:	0a1b      	lsreq	r3, r3, #8
 8007f38:	3008      	addeq	r0, #8
 8007f3a:	071a      	lsls	r2, r3, #28
 8007f3c:	bf04      	itt	eq
 8007f3e:	091b      	lsreq	r3, r3, #4
 8007f40:	3004      	addeq	r0, #4
 8007f42:	079a      	lsls	r2, r3, #30
 8007f44:	bf04      	itt	eq
 8007f46:	089b      	lsreq	r3, r3, #2
 8007f48:	3002      	addeq	r0, #2
 8007f4a:	07da      	lsls	r2, r3, #31
 8007f4c:	d402      	bmi.n	8007f54 <__lo0bits+0x4e>
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	d006      	beq.n	8007f60 <__lo0bits+0x5a>
 8007f52:	3001      	adds	r0, #1
 8007f54:	600b      	str	r3, [r1, #0]
 8007f56:	4770      	bx	lr
 8007f58:	4610      	mov	r0, r2
 8007f5a:	e7e9      	b.n	8007f30 <__lo0bits+0x2a>
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	4770      	bx	lr
 8007f60:	2020      	movs	r0, #32
 8007f62:	4770      	bx	lr

08007f64 <__i2b>:
 8007f64:	b510      	push	{r4, lr}
 8007f66:	460c      	mov	r4, r1
 8007f68:	2101      	movs	r1, #1
 8007f6a:	f7ff ff27 	bl	8007dbc <_Balloc>
 8007f6e:	2201      	movs	r2, #1
 8007f70:	6144      	str	r4, [r0, #20]
 8007f72:	6102      	str	r2, [r0, #16]
 8007f74:	bd10      	pop	{r4, pc}

08007f76 <__multiply>:
 8007f76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7a:	4614      	mov	r4, r2
 8007f7c:	690a      	ldr	r2, [r1, #16]
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	bfb8      	it	lt
 8007f84:	460b      	movlt	r3, r1
 8007f86:	4688      	mov	r8, r1
 8007f88:	bfbc      	itt	lt
 8007f8a:	46a0      	movlt	r8, r4
 8007f8c:	461c      	movlt	r4, r3
 8007f8e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f92:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007f96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f9a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f9e:	eb07 0609 	add.w	r6, r7, r9
 8007fa2:	42b3      	cmp	r3, r6
 8007fa4:	bfb8      	it	lt
 8007fa6:	3101      	addlt	r1, #1
 8007fa8:	f7ff ff08 	bl	8007dbc <_Balloc>
 8007fac:	f100 0514 	add.w	r5, r0, #20
 8007fb0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	4573      	cmp	r3, lr
 8007fba:	d316      	bcc.n	8007fea <__multiply+0x74>
 8007fbc:	f104 0214 	add.w	r2, r4, #20
 8007fc0:	f108 0114 	add.w	r1, r8, #20
 8007fc4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007fc8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	9b00      	ldr	r3, [sp, #0]
 8007fd0:	9201      	str	r2, [sp, #4]
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d80c      	bhi.n	8007ff0 <__multiply+0x7a>
 8007fd6:	2e00      	cmp	r6, #0
 8007fd8:	dd03      	ble.n	8007fe2 <__multiply+0x6c>
 8007fda:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d05d      	beq.n	800809e <__multiply+0x128>
 8007fe2:	6106      	str	r6, [r0, #16]
 8007fe4:	b003      	add	sp, #12
 8007fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fea:	f843 2b04 	str.w	r2, [r3], #4
 8007fee:	e7e3      	b.n	8007fb8 <__multiply+0x42>
 8007ff0:	f8b2 b000 	ldrh.w	fp, [r2]
 8007ff4:	f1bb 0f00 	cmp.w	fp, #0
 8007ff8:	d023      	beq.n	8008042 <__multiply+0xcc>
 8007ffa:	4689      	mov	r9, r1
 8007ffc:	46ac      	mov	ip, r5
 8007ffe:	f04f 0800 	mov.w	r8, #0
 8008002:	f859 4b04 	ldr.w	r4, [r9], #4
 8008006:	f8dc a000 	ldr.w	sl, [ip]
 800800a:	b2a3      	uxth	r3, r4
 800800c:	fa1f fa8a 	uxth.w	sl, sl
 8008010:	fb0b a303 	mla	r3, fp, r3, sl
 8008014:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008018:	f8dc 4000 	ldr.w	r4, [ip]
 800801c:	4443      	add	r3, r8
 800801e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008022:	fb0b 840a 	mla	r4, fp, sl, r8
 8008026:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800802a:	46e2      	mov	sl, ip
 800802c:	b29b      	uxth	r3, r3
 800802e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008032:	454f      	cmp	r7, r9
 8008034:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008038:	f84a 3b04 	str.w	r3, [sl], #4
 800803c:	d82b      	bhi.n	8008096 <__multiply+0x120>
 800803e:	f8cc 8004 	str.w	r8, [ip, #4]
 8008042:	9b01      	ldr	r3, [sp, #4]
 8008044:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008048:	3204      	adds	r2, #4
 800804a:	f1ba 0f00 	cmp.w	sl, #0
 800804e:	d020      	beq.n	8008092 <__multiply+0x11c>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	4689      	mov	r9, r1
 8008054:	46a8      	mov	r8, r5
 8008056:	f04f 0b00 	mov.w	fp, #0
 800805a:	f8b9 c000 	ldrh.w	ip, [r9]
 800805e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008062:	fb0a 440c 	mla	r4, sl, ip, r4
 8008066:	445c      	add	r4, fp
 8008068:	46c4      	mov	ip, r8
 800806a:	b29b      	uxth	r3, r3
 800806c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008070:	f84c 3b04 	str.w	r3, [ip], #4
 8008074:	f859 3b04 	ldr.w	r3, [r9], #4
 8008078:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800807c:	0c1b      	lsrs	r3, r3, #16
 800807e:	fb0a b303 	mla	r3, sl, r3, fp
 8008082:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008086:	454f      	cmp	r7, r9
 8008088:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800808c:	d805      	bhi.n	800809a <__multiply+0x124>
 800808e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008092:	3504      	adds	r5, #4
 8008094:	e79b      	b.n	8007fce <__multiply+0x58>
 8008096:	46d4      	mov	ip, sl
 8008098:	e7b3      	b.n	8008002 <__multiply+0x8c>
 800809a:	46e0      	mov	r8, ip
 800809c:	e7dd      	b.n	800805a <__multiply+0xe4>
 800809e:	3e01      	subs	r6, #1
 80080a0:	e799      	b.n	8007fd6 <__multiply+0x60>
	...

080080a4 <__pow5mult>:
 80080a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a8:	4615      	mov	r5, r2
 80080aa:	f012 0203 	ands.w	r2, r2, #3
 80080ae:	4606      	mov	r6, r0
 80080b0:	460f      	mov	r7, r1
 80080b2:	d007      	beq.n	80080c4 <__pow5mult+0x20>
 80080b4:	3a01      	subs	r2, #1
 80080b6:	4c21      	ldr	r4, [pc, #132]	; (800813c <__pow5mult+0x98>)
 80080b8:	2300      	movs	r3, #0
 80080ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080be:	f7ff fec8 	bl	8007e52 <__multadd>
 80080c2:	4607      	mov	r7, r0
 80080c4:	10ad      	asrs	r5, r5, #2
 80080c6:	d035      	beq.n	8008134 <__pow5mult+0x90>
 80080c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80080ca:	b93c      	cbnz	r4, 80080dc <__pow5mult+0x38>
 80080cc:	2010      	movs	r0, #16
 80080ce:	f7ff fe6d 	bl	8007dac <malloc>
 80080d2:	6270      	str	r0, [r6, #36]	; 0x24
 80080d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080d8:	6004      	str	r4, [r0, #0]
 80080da:	60c4      	str	r4, [r0, #12]
 80080dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80080e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080e4:	b94c      	cbnz	r4, 80080fa <__pow5mult+0x56>
 80080e6:	f240 2171 	movw	r1, #625	; 0x271
 80080ea:	4630      	mov	r0, r6
 80080ec:	f7ff ff3a 	bl	8007f64 <__i2b>
 80080f0:	2300      	movs	r3, #0
 80080f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80080f6:	4604      	mov	r4, r0
 80080f8:	6003      	str	r3, [r0, #0]
 80080fa:	f04f 0800 	mov.w	r8, #0
 80080fe:	07eb      	lsls	r3, r5, #31
 8008100:	d50a      	bpl.n	8008118 <__pow5mult+0x74>
 8008102:	4639      	mov	r1, r7
 8008104:	4622      	mov	r2, r4
 8008106:	4630      	mov	r0, r6
 8008108:	f7ff ff35 	bl	8007f76 <__multiply>
 800810c:	4639      	mov	r1, r7
 800810e:	4681      	mov	r9, r0
 8008110:	4630      	mov	r0, r6
 8008112:	f7ff fe87 	bl	8007e24 <_Bfree>
 8008116:	464f      	mov	r7, r9
 8008118:	106d      	asrs	r5, r5, #1
 800811a:	d00b      	beq.n	8008134 <__pow5mult+0x90>
 800811c:	6820      	ldr	r0, [r4, #0]
 800811e:	b938      	cbnz	r0, 8008130 <__pow5mult+0x8c>
 8008120:	4622      	mov	r2, r4
 8008122:	4621      	mov	r1, r4
 8008124:	4630      	mov	r0, r6
 8008126:	f7ff ff26 	bl	8007f76 <__multiply>
 800812a:	6020      	str	r0, [r4, #0]
 800812c:	f8c0 8000 	str.w	r8, [r0]
 8008130:	4604      	mov	r4, r0
 8008132:	e7e4      	b.n	80080fe <__pow5mult+0x5a>
 8008134:	4638      	mov	r0, r7
 8008136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800813a:	bf00      	nop
 800813c:	08008700 	.word	0x08008700

08008140 <__lshift>:
 8008140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	460c      	mov	r4, r1
 8008146:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800814a:	6923      	ldr	r3, [r4, #16]
 800814c:	6849      	ldr	r1, [r1, #4]
 800814e:	eb0a 0903 	add.w	r9, sl, r3
 8008152:	68a3      	ldr	r3, [r4, #8]
 8008154:	4607      	mov	r7, r0
 8008156:	4616      	mov	r6, r2
 8008158:	f109 0501 	add.w	r5, r9, #1
 800815c:	42ab      	cmp	r3, r5
 800815e:	db32      	blt.n	80081c6 <__lshift+0x86>
 8008160:	4638      	mov	r0, r7
 8008162:	f7ff fe2b 	bl	8007dbc <_Balloc>
 8008166:	2300      	movs	r3, #0
 8008168:	4680      	mov	r8, r0
 800816a:	f100 0114 	add.w	r1, r0, #20
 800816e:	461a      	mov	r2, r3
 8008170:	4553      	cmp	r3, sl
 8008172:	db2b      	blt.n	80081cc <__lshift+0x8c>
 8008174:	6920      	ldr	r0, [r4, #16]
 8008176:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800817a:	f104 0314 	add.w	r3, r4, #20
 800817e:	f016 021f 	ands.w	r2, r6, #31
 8008182:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008186:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800818a:	d025      	beq.n	80081d8 <__lshift+0x98>
 800818c:	f1c2 0e20 	rsb	lr, r2, #32
 8008190:	2000      	movs	r0, #0
 8008192:	681e      	ldr	r6, [r3, #0]
 8008194:	468a      	mov	sl, r1
 8008196:	4096      	lsls	r6, r2
 8008198:	4330      	orrs	r0, r6
 800819a:	f84a 0b04 	str.w	r0, [sl], #4
 800819e:	f853 0b04 	ldr.w	r0, [r3], #4
 80081a2:	459c      	cmp	ip, r3
 80081a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80081a8:	d814      	bhi.n	80081d4 <__lshift+0x94>
 80081aa:	6048      	str	r0, [r1, #4]
 80081ac:	b108      	cbz	r0, 80081b2 <__lshift+0x72>
 80081ae:	f109 0502 	add.w	r5, r9, #2
 80081b2:	3d01      	subs	r5, #1
 80081b4:	4638      	mov	r0, r7
 80081b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80081ba:	4621      	mov	r1, r4
 80081bc:	f7ff fe32 	bl	8007e24 <_Bfree>
 80081c0:	4640      	mov	r0, r8
 80081c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c6:	3101      	adds	r1, #1
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	e7c7      	b.n	800815c <__lshift+0x1c>
 80081cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80081d0:	3301      	adds	r3, #1
 80081d2:	e7cd      	b.n	8008170 <__lshift+0x30>
 80081d4:	4651      	mov	r1, sl
 80081d6:	e7dc      	b.n	8008192 <__lshift+0x52>
 80081d8:	3904      	subs	r1, #4
 80081da:	f853 2b04 	ldr.w	r2, [r3], #4
 80081de:	f841 2f04 	str.w	r2, [r1, #4]!
 80081e2:	459c      	cmp	ip, r3
 80081e4:	d8f9      	bhi.n	80081da <__lshift+0x9a>
 80081e6:	e7e4      	b.n	80081b2 <__lshift+0x72>

080081e8 <__mcmp>:
 80081e8:	6903      	ldr	r3, [r0, #16]
 80081ea:	690a      	ldr	r2, [r1, #16]
 80081ec:	1a9b      	subs	r3, r3, r2
 80081ee:	b530      	push	{r4, r5, lr}
 80081f0:	d10c      	bne.n	800820c <__mcmp+0x24>
 80081f2:	0092      	lsls	r2, r2, #2
 80081f4:	3014      	adds	r0, #20
 80081f6:	3114      	adds	r1, #20
 80081f8:	1884      	adds	r4, r0, r2
 80081fa:	4411      	add	r1, r2
 80081fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008200:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008204:	4295      	cmp	r5, r2
 8008206:	d003      	beq.n	8008210 <__mcmp+0x28>
 8008208:	d305      	bcc.n	8008216 <__mcmp+0x2e>
 800820a:	2301      	movs	r3, #1
 800820c:	4618      	mov	r0, r3
 800820e:	bd30      	pop	{r4, r5, pc}
 8008210:	42a0      	cmp	r0, r4
 8008212:	d3f3      	bcc.n	80081fc <__mcmp+0x14>
 8008214:	e7fa      	b.n	800820c <__mcmp+0x24>
 8008216:	f04f 33ff 	mov.w	r3, #4294967295
 800821a:	e7f7      	b.n	800820c <__mcmp+0x24>

0800821c <__mdiff>:
 800821c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	460d      	mov	r5, r1
 8008222:	4607      	mov	r7, r0
 8008224:	4611      	mov	r1, r2
 8008226:	4628      	mov	r0, r5
 8008228:	4614      	mov	r4, r2
 800822a:	f7ff ffdd 	bl	80081e8 <__mcmp>
 800822e:	1e06      	subs	r6, r0, #0
 8008230:	d108      	bne.n	8008244 <__mdiff+0x28>
 8008232:	4631      	mov	r1, r6
 8008234:	4638      	mov	r0, r7
 8008236:	f7ff fdc1 	bl	8007dbc <_Balloc>
 800823a:	2301      	movs	r3, #1
 800823c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008244:	bfa4      	itt	ge
 8008246:	4623      	movge	r3, r4
 8008248:	462c      	movge	r4, r5
 800824a:	4638      	mov	r0, r7
 800824c:	6861      	ldr	r1, [r4, #4]
 800824e:	bfa6      	itte	ge
 8008250:	461d      	movge	r5, r3
 8008252:	2600      	movge	r6, #0
 8008254:	2601      	movlt	r6, #1
 8008256:	f7ff fdb1 	bl	8007dbc <_Balloc>
 800825a:	692b      	ldr	r3, [r5, #16]
 800825c:	60c6      	str	r6, [r0, #12]
 800825e:	6926      	ldr	r6, [r4, #16]
 8008260:	f105 0914 	add.w	r9, r5, #20
 8008264:	f104 0214 	add.w	r2, r4, #20
 8008268:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800826c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008270:	f100 0514 	add.w	r5, r0, #20
 8008274:	f04f 0e00 	mov.w	lr, #0
 8008278:	f852 ab04 	ldr.w	sl, [r2], #4
 800827c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008280:	fa1e f18a 	uxtah	r1, lr, sl
 8008284:	b2a3      	uxth	r3, r4
 8008286:	1ac9      	subs	r1, r1, r3
 8008288:	0c23      	lsrs	r3, r4, #16
 800828a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800828e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008292:	b289      	uxth	r1, r1
 8008294:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008298:	45c8      	cmp	r8, r9
 800829a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800829e:	4694      	mov	ip, r2
 80082a0:	f845 3b04 	str.w	r3, [r5], #4
 80082a4:	d8e8      	bhi.n	8008278 <__mdiff+0x5c>
 80082a6:	45bc      	cmp	ip, r7
 80082a8:	d304      	bcc.n	80082b4 <__mdiff+0x98>
 80082aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80082ae:	b183      	cbz	r3, 80082d2 <__mdiff+0xb6>
 80082b0:	6106      	str	r6, [r0, #16]
 80082b2:	e7c5      	b.n	8008240 <__mdiff+0x24>
 80082b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80082b8:	fa1e f381 	uxtah	r3, lr, r1
 80082bc:	141a      	asrs	r2, r3, #16
 80082be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80082cc:	f845 3b04 	str.w	r3, [r5], #4
 80082d0:	e7e9      	b.n	80082a6 <__mdiff+0x8a>
 80082d2:	3e01      	subs	r6, #1
 80082d4:	e7e9      	b.n	80082aa <__mdiff+0x8e>

080082d6 <__d2b>:
 80082d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082da:	460e      	mov	r6, r1
 80082dc:	2101      	movs	r1, #1
 80082de:	ec59 8b10 	vmov	r8, r9, d0
 80082e2:	4615      	mov	r5, r2
 80082e4:	f7ff fd6a 	bl	8007dbc <_Balloc>
 80082e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80082ec:	4607      	mov	r7, r0
 80082ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082f2:	bb34      	cbnz	r4, 8008342 <__d2b+0x6c>
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	f1b8 0300 	subs.w	r3, r8, #0
 80082fa:	d027      	beq.n	800834c <__d2b+0x76>
 80082fc:	a802      	add	r0, sp, #8
 80082fe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008302:	f7ff fe00 	bl	8007f06 <__lo0bits>
 8008306:	9900      	ldr	r1, [sp, #0]
 8008308:	b1f0      	cbz	r0, 8008348 <__d2b+0x72>
 800830a:	9a01      	ldr	r2, [sp, #4]
 800830c:	f1c0 0320 	rsb	r3, r0, #32
 8008310:	fa02 f303 	lsl.w	r3, r2, r3
 8008314:	430b      	orrs	r3, r1
 8008316:	40c2      	lsrs	r2, r0
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	9201      	str	r2, [sp, #4]
 800831c:	9b01      	ldr	r3, [sp, #4]
 800831e:	61bb      	str	r3, [r7, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	bf14      	ite	ne
 8008324:	2102      	movne	r1, #2
 8008326:	2101      	moveq	r1, #1
 8008328:	6139      	str	r1, [r7, #16]
 800832a:	b1c4      	cbz	r4, 800835e <__d2b+0x88>
 800832c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008330:	4404      	add	r4, r0
 8008332:	6034      	str	r4, [r6, #0]
 8008334:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008338:	6028      	str	r0, [r5, #0]
 800833a:	4638      	mov	r0, r7
 800833c:	b003      	add	sp, #12
 800833e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008346:	e7d5      	b.n	80082f4 <__d2b+0x1e>
 8008348:	6179      	str	r1, [r7, #20]
 800834a:	e7e7      	b.n	800831c <__d2b+0x46>
 800834c:	a801      	add	r0, sp, #4
 800834e:	f7ff fdda 	bl	8007f06 <__lo0bits>
 8008352:	9b01      	ldr	r3, [sp, #4]
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	2101      	movs	r1, #1
 8008358:	6139      	str	r1, [r7, #16]
 800835a:	3020      	adds	r0, #32
 800835c:	e7e5      	b.n	800832a <__d2b+0x54>
 800835e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008362:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008366:	6030      	str	r0, [r6, #0]
 8008368:	6918      	ldr	r0, [r3, #16]
 800836a:	f7ff fdad 	bl	8007ec8 <__hi0bits>
 800836e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008372:	e7e1      	b.n	8008338 <__d2b+0x62>

08008374 <_calloc_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	fb02 f401 	mul.w	r4, r2, r1
 800837a:	4621      	mov	r1, r4
 800837c:	f000 f808 	bl	8008390 <_malloc_r>
 8008380:	4605      	mov	r5, r0
 8008382:	b118      	cbz	r0, 800838c <_calloc_r+0x18>
 8008384:	4622      	mov	r2, r4
 8008386:	2100      	movs	r1, #0
 8008388:	f7fe fb69 	bl	8006a5e <memset>
 800838c:	4628      	mov	r0, r5
 800838e:	bd38      	pop	{r3, r4, r5, pc}

08008390 <_malloc_r>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	1ccd      	adds	r5, r1, #3
 8008394:	f025 0503 	bic.w	r5, r5, #3
 8008398:	3508      	adds	r5, #8
 800839a:	2d0c      	cmp	r5, #12
 800839c:	bf38      	it	cc
 800839e:	250c      	movcc	r5, #12
 80083a0:	2d00      	cmp	r5, #0
 80083a2:	4606      	mov	r6, r0
 80083a4:	db01      	blt.n	80083aa <_malloc_r+0x1a>
 80083a6:	42a9      	cmp	r1, r5
 80083a8:	d903      	bls.n	80083b2 <_malloc_r+0x22>
 80083aa:	230c      	movs	r3, #12
 80083ac:	6033      	str	r3, [r6, #0]
 80083ae:	2000      	movs	r0, #0
 80083b0:	bd70      	pop	{r4, r5, r6, pc}
 80083b2:	f000 f869 	bl	8008488 <__malloc_lock>
 80083b6:	4a21      	ldr	r2, [pc, #132]	; (800843c <_malloc_r+0xac>)
 80083b8:	6814      	ldr	r4, [r2, #0]
 80083ba:	4621      	mov	r1, r4
 80083bc:	b991      	cbnz	r1, 80083e4 <_malloc_r+0x54>
 80083be:	4c20      	ldr	r4, [pc, #128]	; (8008440 <_malloc_r+0xb0>)
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	b91b      	cbnz	r3, 80083cc <_malloc_r+0x3c>
 80083c4:	4630      	mov	r0, r6
 80083c6:	f000 f83d 	bl	8008444 <_sbrk_r>
 80083ca:	6020      	str	r0, [r4, #0]
 80083cc:	4629      	mov	r1, r5
 80083ce:	4630      	mov	r0, r6
 80083d0:	f000 f838 	bl	8008444 <_sbrk_r>
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	d124      	bne.n	8008422 <_malloc_r+0x92>
 80083d8:	230c      	movs	r3, #12
 80083da:	6033      	str	r3, [r6, #0]
 80083dc:	4630      	mov	r0, r6
 80083de:	f000 f854 	bl	800848a <__malloc_unlock>
 80083e2:	e7e4      	b.n	80083ae <_malloc_r+0x1e>
 80083e4:	680b      	ldr	r3, [r1, #0]
 80083e6:	1b5b      	subs	r3, r3, r5
 80083e8:	d418      	bmi.n	800841c <_malloc_r+0x8c>
 80083ea:	2b0b      	cmp	r3, #11
 80083ec:	d90f      	bls.n	800840e <_malloc_r+0x7e>
 80083ee:	600b      	str	r3, [r1, #0]
 80083f0:	50cd      	str	r5, [r1, r3]
 80083f2:	18cc      	adds	r4, r1, r3
 80083f4:	4630      	mov	r0, r6
 80083f6:	f000 f848 	bl	800848a <__malloc_unlock>
 80083fa:	f104 000b 	add.w	r0, r4, #11
 80083fe:	1d23      	adds	r3, r4, #4
 8008400:	f020 0007 	bic.w	r0, r0, #7
 8008404:	1ac3      	subs	r3, r0, r3
 8008406:	d0d3      	beq.n	80083b0 <_malloc_r+0x20>
 8008408:	425a      	negs	r2, r3
 800840a:	50e2      	str	r2, [r4, r3]
 800840c:	e7d0      	b.n	80083b0 <_malloc_r+0x20>
 800840e:	428c      	cmp	r4, r1
 8008410:	684b      	ldr	r3, [r1, #4]
 8008412:	bf16      	itet	ne
 8008414:	6063      	strne	r3, [r4, #4]
 8008416:	6013      	streq	r3, [r2, #0]
 8008418:	460c      	movne	r4, r1
 800841a:	e7eb      	b.n	80083f4 <_malloc_r+0x64>
 800841c:	460c      	mov	r4, r1
 800841e:	6849      	ldr	r1, [r1, #4]
 8008420:	e7cc      	b.n	80083bc <_malloc_r+0x2c>
 8008422:	1cc4      	adds	r4, r0, #3
 8008424:	f024 0403 	bic.w	r4, r4, #3
 8008428:	42a0      	cmp	r0, r4
 800842a:	d005      	beq.n	8008438 <_malloc_r+0xa8>
 800842c:	1a21      	subs	r1, r4, r0
 800842e:	4630      	mov	r0, r6
 8008430:	f000 f808 	bl	8008444 <_sbrk_r>
 8008434:	3001      	adds	r0, #1
 8008436:	d0cf      	beq.n	80083d8 <_malloc_r+0x48>
 8008438:	6025      	str	r5, [r4, #0]
 800843a:	e7db      	b.n	80083f4 <_malloc_r+0x64>
 800843c:	2000024c 	.word	0x2000024c
 8008440:	20000250 	.word	0x20000250

08008444 <_sbrk_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4c06      	ldr	r4, [pc, #24]	; (8008460 <_sbrk_r+0x1c>)
 8008448:	2300      	movs	r3, #0
 800844a:	4605      	mov	r5, r0
 800844c:	4608      	mov	r0, r1
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	f7f9 fe5a 	bl	8002108 <_sbrk>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_sbrk_r+0x1a>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	b103      	cbz	r3, 800845e <_sbrk_r+0x1a>
 800845c:	602b      	str	r3, [r5, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	20000958 	.word	0x20000958

08008464 <__ascii_mbtowc>:
 8008464:	b082      	sub	sp, #8
 8008466:	b901      	cbnz	r1, 800846a <__ascii_mbtowc+0x6>
 8008468:	a901      	add	r1, sp, #4
 800846a:	b142      	cbz	r2, 800847e <__ascii_mbtowc+0x1a>
 800846c:	b14b      	cbz	r3, 8008482 <__ascii_mbtowc+0x1e>
 800846e:	7813      	ldrb	r3, [r2, #0]
 8008470:	600b      	str	r3, [r1, #0]
 8008472:	7812      	ldrb	r2, [r2, #0]
 8008474:	1c10      	adds	r0, r2, #0
 8008476:	bf18      	it	ne
 8008478:	2001      	movne	r0, #1
 800847a:	b002      	add	sp, #8
 800847c:	4770      	bx	lr
 800847e:	4610      	mov	r0, r2
 8008480:	e7fb      	b.n	800847a <__ascii_mbtowc+0x16>
 8008482:	f06f 0001 	mvn.w	r0, #1
 8008486:	e7f8      	b.n	800847a <__ascii_mbtowc+0x16>

08008488 <__malloc_lock>:
 8008488:	4770      	bx	lr

0800848a <__malloc_unlock>:
 800848a:	4770      	bx	lr

0800848c <__ascii_wctomb>:
 800848c:	b149      	cbz	r1, 80084a2 <__ascii_wctomb+0x16>
 800848e:	2aff      	cmp	r2, #255	; 0xff
 8008490:	bf85      	ittet	hi
 8008492:	238a      	movhi	r3, #138	; 0x8a
 8008494:	6003      	strhi	r3, [r0, #0]
 8008496:	700a      	strbls	r2, [r1, #0]
 8008498:	f04f 30ff 	movhi.w	r0, #4294967295
 800849c:	bf98      	it	ls
 800849e:	2001      	movls	r0, #1
 80084a0:	4770      	bx	lr
 80084a2:	4608      	mov	r0, r1
 80084a4:	4770      	bx	lr
	...

080084a8 <_init>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr

080084b4 <_fini>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	bf00      	nop
 80084b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ba:	bc08      	pop	{r3}
 80084bc:	469e      	mov	lr, r3
 80084be:	4770      	bx	lr
